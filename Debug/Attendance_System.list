
Attendance_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e30  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08009000  08009000  00019000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009180  08009180  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  08009180  08009180  00019180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009188  08009188  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009188  08009188  00019188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800918c  0800918c  0001918c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08009190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a20  20000238  080093c8  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c58  080093c8  00024c58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed0c  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c1d  00000000  00000000  0003ef74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a0  00000000  00000000  00042b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001218  00000000  00000000  00043f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029b5e  00000000  00000000  00045150  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012e21  00000000  00000000  0006ecae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f49d4  00000000  00000000  00081acf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001764a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e0  00000000  00000000  00176520  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000238 	.word	0x20000238
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008fe8 	.word	0x08008fe8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000023c 	.word	0x2000023c
 800020c:	08008fe8 	.word	0x08008fe8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <heart_beat_thread_init>:
* Input    : None
* Output   : None.
* Return   : None.
*******************************************************************************/
int heart_beat_thread_init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	heart_beat_thread_handle = osThreadNew(heart_beat_thread_entry, NULL, &heart_beat_thread_attr);
 8000514:	4a09      	ldr	r2, [pc, #36]	; (800053c <heart_beat_thread_init+0x2c>)
 8000516:	2100      	movs	r1, #0
 8000518:	4809      	ldr	r0, [pc, #36]	; (8000540 <heart_beat_thread_init+0x30>)
 800051a:	f004 fe09 	bl	8005130 <osThreadNew>
 800051e:	4602      	mov	r2, r0
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <heart_beat_thread_init+0x34>)
 8000522:	601a      	str	r2, [r3, #0]
	if(heart_beat_thread_handle == NULL)
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <heart_beat_thread_init+0x34>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d104      	bne.n	8000536 <heart_beat_thread_init+0x26>
	{
		PRINT_INFO_LOG("failed to create Heart beat thread!\r\n");
 800052c:	4806      	ldr	r0, [pc, #24]	; (8000548 <heart_beat_thread_init+0x38>)
 800052e:	f008 f94f 	bl	80087d0 <puts>
		return 1;
 8000532:	2301      	movs	r3, #1
 8000534:	e000      	b.n	8000538 <heart_beat_thread_init+0x28>
	}
	
	return 0;
 8000536:	2300      	movs	r3, #0
}
 8000538:	4618      	mov	r0, r3
 800053a:	bd80      	pop	{r7, pc}
 800053c:	08009090 	.word	0x08009090
 8000540:	0800054d 	.word	0x0800054d
 8000544:	20000254 	.word	0x20000254
 8000548:	08009014 	.word	0x08009014

0800054c <heart_beat_thread_entry>:

/******************************************************************************
* STATIC FUNCTIONS
*******************************************************************************/
static void heart_beat_thread_entry (void *argument)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    while(1)
    {
        led_blue_on(true);
 8000554:	2001      	movs	r0, #1
 8000556:	f004 f981 	bl	800485c <led_blue_on>
        osDelay(500);
 800055a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800055e:	f004 fe8d 	bl	800527c <osDelay>
        led_blue_on(false);
 8000562:	2000      	movs	r0, #0
 8000564:	f004 f97a 	bl	800485c <led_blue_on>
        osDelay(500);
 8000568:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800056c:	f004 fe86 	bl	800527c <osDelay>
        led_blue_on(true);
 8000570:	e7f0      	b.n	8000554 <heart_beat_thread_entry+0x8>
	...

08000574 <rfid_thread_init>:
* Input    : None
* Output   : None.
* Return   : None.
*******************************************************************************/
int rfid_thread_init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	rfid_thread_handle = osThreadNew(rfid_thread_entry, NULL, &rfid_thread_attr);
 8000578:	4a09      	ldr	r2, [pc, #36]	; (80005a0 <rfid_thread_init+0x2c>)
 800057a:	2100      	movs	r1, #0
 800057c:	4809      	ldr	r0, [pc, #36]	; (80005a4 <rfid_thread_init+0x30>)
 800057e:	f004 fdd7 	bl	8005130 <osThreadNew>
 8000582:	4602      	mov	r2, r0
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <rfid_thread_init+0x34>)
 8000586:	601a      	str	r2, [r3, #0]
	if(rfid_thread_handle == NULL)
 8000588:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <rfid_thread_init+0x34>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d104      	bne.n	800059a <rfid_thread_init+0x26>
	{
		PRINT_INFO_LOG("failed to create RFID thread!\r\n");
 8000590:	4806      	ldr	r0, [pc, #24]	; (80005ac <rfid_thread_init+0x38>)
 8000592:	f008 f91d 	bl	80087d0 <puts>
		return 1;
 8000596:	2301      	movs	r3, #1
 8000598:	e000      	b.n	800059c <rfid_thread_init+0x28>
	}
	
	return 0;
 800059a:	2300      	movs	r3, #0
}
 800059c:	4618      	mov	r0, r3
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	080090b4 	.word	0x080090b4
 80005a4:	0800085d 	.word	0x0800085d
 80005a8:	20000280 	.word	0x20000280
 80005ac:	08009058 	.word	0x08009058

080005b0 <control_thread_init>:
* Input    : None
* Output   : None.
* Return   : None.
*******************************************************************************/
int control_thread_init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	control_thread_handle = osThreadNew(control_thread_entry, NULL, &control_thread_attr);
 80005b4:	4a09      	ldr	r2, [pc, #36]	; (80005dc <control_thread_init+0x2c>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4809      	ldr	r0, [pc, #36]	; (80005e0 <control_thread_init+0x30>)
 80005ba:	f004 fdb9 	bl	8005130 <osThreadNew>
 80005be:	4602      	mov	r2, r0
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <control_thread_init+0x34>)
 80005c2:	601a      	str	r2, [r3, #0]
	if(rfid_thread_handle == NULL)
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <control_thread_init+0x38>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d104      	bne.n	80005d6 <control_thread_init+0x26>
	{
		PRINT_INFO_LOG("failed to create RFID thread!\r\n");
 80005cc:	4807      	ldr	r0, [pc, #28]	; (80005ec <control_thread_init+0x3c>)
 80005ce:	f008 f8ff 	bl	80087d0 <puts>
		return 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	e000      	b.n	80005d8 <control_thread_init+0x28>
	}

	return 0;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	080090d8 	.word	0x080090d8
 80005e0:	08000895 	.word	0x08000895
 80005e4:	20000284 	.word	0x20000284
 80005e8:	20000280 	.word	0x20000280
 80005ec:	08009058 	.word	0x08009058

080005f0 <rfid_send_msg_to_pc>:
* Input    : None
* Output   : None.
* Return   : None.
*******************************************************************************/
void rfid_send_msg_to_pc(uint8_t *p_data, uint16_t len)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	807b      	strh	r3, [r7, #2]
	uint16_t idx = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	81fb      	strh	r3, [r7, #14]
	rfid_tx_msg_buf[idx++] = 'R';
 8000600:	89fb      	ldrh	r3, [r7, #14]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	81fa      	strh	r2, [r7, #14]
 8000606:	461a      	mov	r2, r3
 8000608:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <rfid_send_msg_to_pc+0xe4>)
 800060a:	2152      	movs	r1, #82	; 0x52
 800060c:	5499      	strb	r1, [r3, r2]
	rfid_tx_msg_buf[idx++] = 'F';
 800060e:	89fb      	ldrh	r3, [r7, #14]
 8000610:	1c5a      	adds	r2, r3, #1
 8000612:	81fa      	strh	r2, [r7, #14]
 8000614:	461a      	mov	r2, r3
 8000616:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <rfid_send_msg_to_pc+0xe4>)
 8000618:	2146      	movs	r1, #70	; 0x46
 800061a:	5499      	strb	r1, [r3, r2]
	rfid_tx_msg_buf[idx++] = 'I';
 800061c:	89fb      	ldrh	r3, [r7, #14]
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	81fa      	strh	r2, [r7, #14]
 8000622:	461a      	mov	r2, r3
 8000624:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <rfid_send_msg_to_pc+0xe4>)
 8000626:	2149      	movs	r1, #73	; 0x49
 8000628:	5499      	strb	r1, [r3, r2]
	rfid_tx_msg_buf[idx++] = 'R';
 800062a:	89fb      	ldrh	r3, [r7, #14]
 800062c:	1c5a      	adds	r2, r3, #1
 800062e:	81fa      	strh	r2, [r7, #14]
 8000630:	461a      	mov	r2, r3
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <rfid_send_msg_to_pc+0xe4>)
 8000634:	2152      	movs	r1, #82	; 0x52
 8000636:	5499      	strb	r1, [r3, r2]
	rfid_tx_msg_buf[idx++] = p_data[0];
 8000638:	89fb      	ldrh	r3, [r7, #14]
 800063a:	1c5a      	adds	r2, r3, #1
 800063c:	81fa      	strh	r2, [r7, #14]
 800063e:	461a      	mov	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	7819      	ldrb	r1, [r3, #0]
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <rfid_send_msg_to_pc+0xe4>)
 8000646:	5499      	strb	r1, [r3, r2]
	rfid_tx_msg_buf[idx++] = p_data[1];
 8000648:	89fb      	ldrh	r3, [r7, #14]
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	81fa      	strh	r2, [r7, #14]
 800064e:	461a      	mov	r2, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	7859      	ldrb	r1, [r3, #1]
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <rfid_send_msg_to_pc+0xe4>)
 8000656:	5499      	strb	r1, [r3, r2]
	rfid_tx_msg_buf[idx++] = p_data[2];
 8000658:	89fb      	ldrh	r3, [r7, #14]
 800065a:	1c5a      	adds	r2, r3, #1
 800065c:	81fa      	strh	r2, [r7, #14]
 800065e:	461a      	mov	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	7899      	ldrb	r1, [r3, #2]
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <rfid_send_msg_to_pc+0xe4>)
 8000666:	5499      	strb	r1, [r3, r2]
	rfid_tx_msg_buf[idx++] = p_data[3];
 8000668:	89fb      	ldrh	r3, [r7, #14]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	81fa      	strh	r2, [r7, #14]
 800066e:	461a      	mov	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	78d9      	ldrb	r1, [r3, #3]
 8000674:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <rfid_send_msg_to_pc+0xe4>)
 8000676:	5499      	strb	r1, [r3, r2]
	rfid_tx_msg_buf[idx++] = p_data[4];
 8000678:	89fb      	ldrh	r3, [r7, #14]
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	81fa      	strh	r2, [r7, #14]
 800067e:	461a      	mov	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	7919      	ldrb	r1, [r3, #4]
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <rfid_send_msg_to_pc+0xe4>)
 8000686:	5499      	strb	r1, [r3, r2]
	rfid_tx_msg_buf[idx++] = '$';
 8000688:	89fb      	ldrh	r3, [r7, #14]
 800068a:	1c5a      	adds	r2, r3, #1
 800068c:	81fa      	strh	r2, [r7, #14]
 800068e:	461a      	mov	r2, r3
 8000690:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <rfid_send_msg_to_pc+0xe4>)
 8000692:	2124      	movs	r1, #36	; 0x24
 8000694:	5499      	strb	r1, [r3, r2]
	rfid_tx_msg_buf[idx++] = '$';
 8000696:	89fb      	ldrh	r3, [r7, #14]
 8000698:	1c5a      	adds	r2, r3, #1
 800069a:	81fa      	strh	r2, [r7, #14]
 800069c:	461a      	mov	r2, r3
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <rfid_send_msg_to_pc+0xe4>)
 80006a0:	2124      	movs	r1, #36	; 0x24
 80006a2:	5499      	strb	r1, [r3, r2]
	rfid_tx_msg_buf[idx++] = '$';
 80006a4:	89fb      	ldrh	r3, [r7, #14]
 80006a6:	1c5a      	adds	r2, r3, #1
 80006a8:	81fa      	strh	r2, [r7, #14]
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <rfid_send_msg_to_pc+0xe4>)
 80006ae:	2124      	movs	r1, #36	; 0x24
 80006b0:	5499      	strb	r1, [r3, r2]
	rfid_tx_msg_buf[idx++] = '$';
 80006b2:	89fb      	ldrh	r3, [r7, #14]
 80006b4:	1c5a      	adds	r2, r3, #1
 80006b6:	81fa      	strh	r2, [r7, #14]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <rfid_send_msg_to_pc+0xe4>)
 80006bc:	2124      	movs	r1, #36	; 0x24
 80006be:	5499      	strb	r1, [r3, r2]

	rfid_uart_tx_send_string(rfid_tx_msg_buf, idx);
 80006c0:	89fb      	ldrh	r3, [r7, #14]
 80006c2:	4619      	mov	r1, r3
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <rfid_send_msg_to_pc+0xe4>)
 80006c6:	f000 f94b 	bl	8000960 <rfid_uart_tx_send_string>
}
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000258 	.word	0x20000258

080006d8 <rfid_receive_complete_callback>:
* Input    : None
* Output   : None.
* Return   : None.
*******************************************************************************/
void rfid_receive_complete_callback(UART_HandleTypeDef *huart)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  static uint16_t rx_idx = 0;
  static uint16_t frame_size = 0;
  static bool is_received_header = false;

  // read the incoming byte
  if(huart->Instance == USART1)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a55      	ldr	r2, [pc, #340]	; (800083c <rfid_receive_complete_callback+0x164>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	f040 80a4 	bne.w	8000834 <rfid_receive_complete_callback+0x15c>
  {
	rfid_rx_msg_buf[rx_idx++] = rfid_dma_data[0];
 80006ec:	4b54      	ldr	r3, [pc, #336]	; (8000840 <rfid_receive_complete_callback+0x168>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	1c5a      	adds	r2, r3, #1
 80006f2:	b291      	uxth	r1, r2
 80006f4:	4a52      	ldr	r2, [pc, #328]	; (8000840 <rfid_receive_complete_callback+0x168>)
 80006f6:	8011      	strh	r1, [r2, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b52      	ldr	r3, [pc, #328]	; (8000844 <rfid_receive_complete_callback+0x16c>)
 80006fc:	7819      	ldrb	r1, [r3, #0]
 80006fe:	4b52      	ldr	r3, [pc, #328]	; (8000848 <rfid_receive_complete_callback+0x170>)
 8000700:	5499      	strb	r1, [r3, r2]

	if(is_received_header == false)
 8000702:	4b52      	ldr	r3, [pc, #328]	; (800084c <rfid_receive_complete_callback+0x174>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	f083 0301 	eor.w	r3, r3, #1
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2b00      	cmp	r3, #0
 800070e:	d035      	beq.n	800077c <rfid_receive_complete_callback+0xa4>
	{
		// Get mesasage header 
		if(rx_idx == RFID_FRAME_HEADER_SIZE)
 8000710:	4b4b      	ldr	r3, [pc, #300]	; (8000840 <rfid_receive_complete_callback+0x168>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	2b04      	cmp	r3, #4
 8000716:	d131      	bne.n	800077c <rfid_receive_complete_callback+0xa4>
		{
			if((rfid_rx_msg_buf[0] == 'R') && (rfid_rx_msg_buf[1] == 'F') && (rfid_rx_msg_buf[2] == 'I') && (rfid_rx_msg_buf[3] == 'C'))
 8000718:	4b4b      	ldr	r3, [pc, #300]	; (8000848 <rfid_receive_complete_callback+0x170>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b52      	cmp	r3, #82	; 0x52
 800071e:	d115      	bne.n	800074c <rfid_receive_complete_callback+0x74>
 8000720:	4b49      	ldr	r3, [pc, #292]	; (8000848 <rfid_receive_complete_callback+0x170>)
 8000722:	785b      	ldrb	r3, [r3, #1]
 8000724:	2b46      	cmp	r3, #70	; 0x46
 8000726:	d111      	bne.n	800074c <rfid_receive_complete_callback+0x74>
 8000728:	4b47      	ldr	r3, [pc, #284]	; (8000848 <rfid_receive_complete_callback+0x170>)
 800072a:	789b      	ldrb	r3, [r3, #2]
 800072c:	2b49      	cmp	r3, #73	; 0x49
 800072e:	d10d      	bne.n	800074c <rfid_receive_complete_callback+0x74>
 8000730:	4b45      	ldr	r3, [pc, #276]	; (8000848 <rfid_receive_complete_callback+0x170>)
 8000732:	78db      	ldrb	r3, [r3, #3]
 8000734:	2b43      	cmp	r3, #67	; 0x43
 8000736:	d109      	bne.n	800074c <rfid_receive_complete_callback+0x74>
			{
				rfid_msg_id = RFID_REQ_MSG_ID;
 8000738:	4b45      	ldr	r3, [pc, #276]	; (8000850 <rfid_receive_complete_callback+0x178>)
 800073a:	2221      	movs	r2, #33	; 0x21
 800073c:	701a      	strb	r2, [r3, #0]
				is_received_header = true;
 800073e:	4b43      	ldr	r3, [pc, #268]	; (800084c <rfid_receive_complete_callback+0x174>)
 8000740:	2201      	movs	r2, #1
 8000742:	701a      	strb	r2, [r3, #0]
				frame_size = 0;
 8000744:	4b43      	ldr	r3, [pc, #268]	; (8000854 <rfid_receive_complete_callback+0x17c>)
 8000746:	2200      	movs	r2, #0
 8000748:	801a      	strh	r2, [r3, #0]
 800074a:	e017      	b.n	800077c <rfid_receive_complete_callback+0xa4>
			}
			else
			{
				rx_idx--;
 800074c:	4b3c      	ldr	r3, [pc, #240]	; (8000840 <rfid_receive_complete_callback+0x168>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	3b01      	subs	r3, #1
 8000752:	b29a      	uxth	r2, r3
 8000754:	4b3a      	ldr	r3, [pc, #232]	; (8000840 <rfid_receive_complete_callback+0x168>)
 8000756:	801a      	strh	r2, [r3, #0]
				// Shift the received array left to remove the first received byte
				rfid_rx_msg_buf[0] = rfid_rx_msg_buf[1];
 8000758:	4b3b      	ldr	r3, [pc, #236]	; (8000848 <rfid_receive_complete_callback+0x170>)
 800075a:	785a      	ldrb	r2, [r3, #1]
 800075c:	4b3a      	ldr	r3, [pc, #232]	; (8000848 <rfid_receive_complete_callback+0x170>)
 800075e:	701a      	strb	r2, [r3, #0]
				rfid_rx_msg_buf[1] = rfid_rx_msg_buf[2];
 8000760:	4b39      	ldr	r3, [pc, #228]	; (8000848 <rfid_receive_complete_callback+0x170>)
 8000762:	789a      	ldrb	r2, [r3, #2]
 8000764:	4b38      	ldr	r3, [pc, #224]	; (8000848 <rfid_receive_complete_callback+0x170>)
 8000766:	705a      	strb	r2, [r3, #1]
				rfid_rx_msg_buf[2] = rfid_rx_msg_buf[3];
 8000768:	4b37      	ldr	r3, [pc, #220]	; (8000848 <rfid_receive_complete_callback+0x170>)
 800076a:	78da      	ldrb	r2, [r3, #3]
 800076c:	4b36      	ldr	r3, [pc, #216]	; (8000848 <rfid_receive_complete_callback+0x170>)
 800076e:	709a      	strb	r2, [r3, #2]
				rfid_msg_id = 0;
 8000770:	4b37      	ldr	r3, [pc, #220]	; (8000850 <rfid_receive_complete_callback+0x178>)
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
				frame_size = 0;
 8000776:	4b37      	ldr	r3, [pc, #220]	; (8000854 <rfid_receive_complete_callback+0x17c>)
 8000778:	2200      	movs	r2, #0
 800077a:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	if(is_received_header && (rfid_msg_id == RFID_REQ_MSG_ID) && (frame_size == 0))
 800077c:	4b33      	ldr	r3, [pc, #204]	; (800084c <rfid_receive_complete_callback+0x174>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d019      	beq.n	80007b8 <rfid_receive_complete_callback+0xe0>
 8000784:	4b32      	ldr	r3, [pc, #200]	; (8000850 <rfid_receive_complete_callback+0x178>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b21      	cmp	r3, #33	; 0x21
 800078a:	d115      	bne.n	80007b8 <rfid_receive_complete_callback+0xe0>
 800078c:	4b31      	ldr	r3, [pc, #196]	; (8000854 <rfid_receive_complete_callback+0x17c>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d111      	bne.n	80007b8 <rfid_receive_complete_callback+0xe0>
	{
		if(rx_idx == (RFID_FRAME_HEADER_SIZE + 2))  // received payload size
 8000794:	4b2a      	ldr	r3, [pc, #168]	; (8000840 <rfid_receive_complete_callback+0x168>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	2b06      	cmp	r3, #6
 800079a:	d10d      	bne.n	80007b8 <rfid_receive_complete_callback+0xe0>
        {
          frame_size = RFID_FRAME_HEADER_SIZE + RFID_FRAME_FOOTER_SIZE + (rfid_rx_msg_buf[5] | (uint16_t)rfid_rx_msg_buf[4] << 8) + RFID_PAYLOAD_LENGHT_SIZE;
 800079c:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <rfid_receive_complete_callback+0x170>)
 800079e:	795b      	ldrb	r3, [r3, #5]
 80007a0:	b21a      	sxth	r2, r3
 80007a2:	4b29      	ldr	r3, [pc, #164]	; (8000848 <rfid_receive_complete_callback+0x170>)
 80007a4:	791b      	ldrb	r3, [r3, #4]
 80007a6:	021b      	lsls	r3, r3, #8
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	330a      	adds	r3, #10
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <rfid_receive_complete_callback+0x17c>)
 80007b6:	801a      	strh	r2, [r3, #0]
        }
	}

	if(is_received_header && (rx_idx == frame_size))
 80007b8:	4b24      	ldr	r3, [pc, #144]	; (800084c <rfid_receive_complete_callback+0x174>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d035      	beq.n	800082c <rfid_receive_complete_callback+0x154>
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <rfid_receive_complete_callback+0x168>)
 80007c2:	881a      	ldrh	r2, [r3, #0]
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <rfid_receive_complete_callback+0x17c>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d12f      	bne.n	800082c <rfid_receive_complete_callback+0x154>
	{
		if((rfid_rx_msg_buf[frame_size - RFID_FRAME_FOOTER_SIZE] == RFID_FRAME_FOOTER_VALUE) && 
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <rfid_receive_complete_callback+0x17c>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	3b04      	subs	r3, #4
 80007d2:	4a1d      	ldr	r2, [pc, #116]	; (8000848 <rfid_receive_complete_callback+0x170>)
 80007d4:	5cd3      	ldrb	r3, [r2, r3]
 80007d6:	2b24      	cmp	r3, #36	; 0x24
 80007d8:	d11a      	bne.n	8000810 <rfid_receive_complete_callback+0x138>
			(rfid_rx_msg_buf[frame_size - RFID_FRAME_FOOTER_SIZE + 1] == RFID_FRAME_FOOTER_VALUE) && 
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <rfid_receive_complete_callback+0x17c>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	3b03      	subs	r3, #3
 80007e0:	4a19      	ldr	r2, [pc, #100]	; (8000848 <rfid_receive_complete_callback+0x170>)
 80007e2:	5cd3      	ldrb	r3, [r2, r3]
		if((rfid_rx_msg_buf[frame_size - RFID_FRAME_FOOTER_SIZE] == RFID_FRAME_FOOTER_VALUE) && 
 80007e4:	2b24      	cmp	r3, #36	; 0x24
 80007e6:	d113      	bne.n	8000810 <rfid_receive_complete_callback+0x138>
			(rfid_rx_msg_buf[frame_size - RFID_FRAME_FOOTER_SIZE + 2] == RFID_FRAME_FOOTER_VALUE) && 
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <rfid_receive_complete_callback+0x17c>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	3b02      	subs	r3, #2
 80007ee:	4a16      	ldr	r2, [pc, #88]	; (8000848 <rfid_receive_complete_callback+0x170>)
 80007f0:	5cd3      	ldrb	r3, [r2, r3]
			(rfid_rx_msg_buf[frame_size - RFID_FRAME_FOOTER_SIZE + 1] == RFID_FRAME_FOOTER_VALUE) && 
 80007f2:	2b24      	cmp	r3, #36	; 0x24
 80007f4:	d10c      	bne.n	8000810 <rfid_receive_complete_callback+0x138>
			(rfid_rx_msg_buf[frame_size - RFID_FRAME_FOOTER_SIZE + 3] == RFID_FRAME_FOOTER_VALUE))
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <rfid_receive_complete_callback+0x17c>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	4a12      	ldr	r2, [pc, #72]	; (8000848 <rfid_receive_complete_callback+0x170>)
 80007fe:	5cd3      	ldrb	r3, [r2, r3]
			(rfid_rx_msg_buf[frame_size - RFID_FRAME_FOOTER_SIZE + 2] == RFID_FRAME_FOOTER_VALUE) && 
 8000800:	2b24      	cmp	r3, #36	; 0x24
 8000802:	d105      	bne.n	8000810 <rfid_receive_complete_callback+0x138>
		{
			control_value = rfid_rx_msg_buf[RFID_FRAME_HEADER_SIZE + RFID_PAYLOAD_LENGHT_SIZE];
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <rfid_receive_complete_callback+0x170>)
 8000806:	799a      	ldrb	r2, [r3, #6]
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <rfid_receive_complete_callback+0x180>)
 800080a:	701a      	strb	r2, [r3, #0]
			control_release_dma_from_pc();
 800080c:	f000 f88c 	bl	8000928 <control_release_dma_from_pc>

		}

		memset(rfid_rx_msg_buf, 0x00, sizeof(rfid_rx_msg_buf));
 8000810:	2214      	movs	r2, #20
 8000812:	2100      	movs	r1, #0
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <rfid_receive_complete_callback+0x170>)
 8000816:	f007 ff76 	bl	8008706 <memset>
		rx_idx = 0;
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <rfid_receive_complete_callback+0x168>)
 800081c:	2200      	movs	r2, #0
 800081e:	801a      	strh	r2, [r3, #0]
		is_received_header = false;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <rfid_receive_complete_callback+0x174>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
		frame_size = 0;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <rfid_receive_complete_callback+0x17c>)
 8000828:	2200      	movs	r2, #0
 800082a:	801a      	strh	r2, [r3, #0]
	}
	rfid_uart_rx_receive_string_dma(rfid_dma_data, 1);
 800082c:	2101      	movs	r1, #1
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <rfid_receive_complete_callback+0x16c>)
 8000830:	f000 f8aa 	bl	8000988 <rfid_uart_rx_receive_string_dma>
  }
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40011000 	.word	0x40011000
 8000840:	20000296 	.word	0x20000296
 8000844:	20000294 	.word	0x20000294
 8000848:	2000026c 	.word	0x2000026c
 800084c:	20000298 	.word	0x20000298
 8000850:	20000291 	.word	0x20000291
 8000854:	2000029a 	.word	0x2000029a
 8000858:	20000295 	.word	0x20000295

0800085c <rfid_thread_entry>:

/******************************************************************************
* STATIC FUNCTIONS
*******************************************************************************/
static void rfid_thread_entry(void *argument)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	// Init UART TX and RX for transmit/receive data
	mfrc522_init();
 8000864:	f004 f8cc 	bl	8004a00 <mfrc522_init>
	HAL_Delay(10);
 8000868:	200a      	movs	r0, #10
 800086a:	f000 fc69 	bl	8001140 <HAL_Delay>
	while(1)
	{
		if(mfrc522_check(tags_code) == MI_OK)
 800086e:	4808      	ldr	r0, [pc, #32]	; (8000890 <rfid_thread_entry+0x34>)
 8000870:	f004 f8f4 	bl	8004a5c <mfrc522_check>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d106      	bne.n	8000888 <rfid_thread_entry+0x2c>
		{
//			PRINT_INFO_LOG("[%02x-%02x-%02x-%02x-%02x] \r\n", tags_code[0], tags_code[1],
//															  tags_code[2], tags_code[3],
//															  tags_code[4]);

			rfid_send_msg_to_pc(tags_code, sizeof(tags_code));
 800087a:	2105      	movs	r1, #5
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <rfid_thread_entry+0x34>)
 800087e:	f7ff feb7 	bl	80005f0 <rfid_send_msg_to_pc>
			HAL_Delay(10);
 8000882:	200a      	movs	r0, #10
 8000884:	f000 fc5c 	bl	8001140 <HAL_Delay>
		}
		osDelay(10);
 8000888:	200a      	movs	r0, #10
 800088a:	f004 fcf7 	bl	800527c <osDelay>
		if(mfrc522_check(tags_code) == MI_OK)
 800088e:	e7ee      	b.n	800086e <rfid_thread_entry+0x12>
 8000890:	2000028c 	.word	0x2000028c

08000894 <control_thread_entry>:
	}
}

static void control_thread_entry(void *argument)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	control_device_init();
 800089c:	f000 f81e 	bl	80008dc <control_device_init>
	while(1)
	{
		control_wait_dma_from_pc();
 80008a0:	f000 f834 	bl	800090c <control_wait_dma_from_pc>
		switch (rfid_msg_id)
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <control_thread_entry+0x40>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b21      	cmp	r3, #33	; 0x21
 80008aa:	d000      	beq.n	80008ae <control_thread_entry+0x1a>
					led_green_on(true);
				}
				break;

			default:
				break;
 80008ac:	e011      	b.n	80008d2 <control_thread_entry+0x3e>
				if(control_value == 0)
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <control_thread_entry+0x44>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d106      	bne.n	80008c4 <control_thread_entry+0x30>
					led_red_on(true);
 80008b6:	2001      	movs	r0, #1
 80008b8:	f003 ffea 	bl	8004890 <led_red_on>
					led_green_on(false);
 80008bc:	2000      	movs	r0, #0
 80008be:	f003 ffb3 	bl	8004828 <led_green_on>
				break;
 80008c2:	e005      	b.n	80008d0 <control_thread_entry+0x3c>
					led_red_on(false);
 80008c4:	2000      	movs	r0, #0
 80008c6:	f003 ffe3 	bl	8004890 <led_red_on>
					led_green_on(true);
 80008ca:	2001      	movs	r0, #1
 80008cc:	f003 ffac 	bl	8004828 <led_green_on>
				break;
 80008d0:	bf00      	nop
		control_wait_dma_from_pc();
 80008d2:	e7e5      	b.n	80008a0 <control_thread_entry+0xc>
 80008d4:	20000291 	.word	0x20000291
 80008d8:	20000295 	.word	0x20000295

080008dc <control_device_init>:
		}
	}
}

static void control_device_init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	control_device_sem = osSemaphoreNew(1, 0, NULL);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	2001      	movs	r0, #1
 80008e6:	f004 fcf7 	bl	80052d8 <osSemaphoreNew>
 80008ea:	4602      	mov	r2, r0
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <control_device_init+0x28>)
 80008ee:	601a      	str	r2, [r3, #0]
	rfid_uart_rx_receive_string_dma(rfid_dma_data, 1);
 80008f0:	2101      	movs	r1, #1
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <control_device_init+0x2c>)
 80008f4:	f000 f848 	bl	8000988 <rfid_uart_rx_receive_string_dma>
	HAL_Delay(10);
 80008f8:	200a      	movs	r0, #10
 80008fa:	f000 fc21 	bl	8001140 <HAL_Delay>
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000288 	.word	0x20000288
 8000908:	20000294 	.word	0x20000294

0800090c <control_wait_dma_from_pc>:

static void control_wait_dma_from_pc(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	osSemaphoreAcquire(control_device_sem, osWaitForever);
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <control_wait_dma_from_pc+0x18>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f04f 31ff 	mov.w	r1, #4294967295
 8000918:	4618      	mov	r0, r3
 800091a:	f004 fd7b 	bl	8005414 <osSemaphoreAcquire>
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000288 	.word	0x20000288

08000928 <control_release_dma_from_pc>:

static void control_release_dma_from_pc(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	osSemaphoreRelease(control_device_sem);
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <control_release_dma_from_pc+0x14>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4618      	mov	r0, r3
 8000932:	f004 fdd5 	bl	80054e0 <osSemaphoreRelease>
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000288 	.word	0x20000288

08000940 <rfid_comm_init>:
* Input    : None
* Output   : None.
* Return   : None.
*******************************************************************************/
void rfid_comm_init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	rfid_gpio_init();
 8000944:	f000 f84c 	bl	80009e0 <rfid_gpio_init>
	rfid_uart_init();
 8000948:	f000 f830 	bl	80009ac <rfid_uart_init>
	rfid_uart_cfg.RxCpltCallback = rfid_receive_complete_callback;
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <rfid_comm_init+0x18>)
 800094e:	4a03      	ldr	r2, [pc, #12]	; (800095c <rfid_comm_init+0x1c>)
 8000950:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000000 	.word	0x20000000
 800095c:	080006d9 	.word	0x080006d9

08000960 <rfid_uart_tx_send_string>:
*            msg_size - size of input string
* Output   : None.
* Return   : None.
*******************************************************************************/
void rfid_uart_tx_send_string(uint8_t* str, uint16_t msg_size)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	460b      	mov	r3, r1
 800096a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&rfid_uart_cfg, str, msg_size, RFID_UART_TX_SEND_TIMEOUT);
 800096c:	887a      	ldrh	r2, [r7, #2]
 800096e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	4803      	ldr	r0, [pc, #12]	; (8000984 <rfid_uart_tx_send_string+0x24>)
 8000976:	f003 f8d5 	bl	8003b24 <HAL_UART_Transmit>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000000 	.word	0x20000000

08000988 <rfid_uart_rx_receive_string_dma>:
* Input    : None
* Output   : None.
* Return   : None.
*******************************************************************************/
void rfid_uart_rx_receive_string_dma(uint8_t *str, uint16_t msg_size)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	460b      	mov	r3, r1
 8000992:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_DMA(&rfid_uart_cfg, str, msg_size);
 8000994:	887b      	ldrh	r3, [r7, #2]
 8000996:	461a      	mov	r2, r3
 8000998:	6879      	ldr	r1, [r7, #4]
 800099a:	4803      	ldr	r0, [pc, #12]	; (80009a8 <rfid_uart_rx_receive_string_dma+0x20>)
 800099c:	f003 f955 	bl	8003c4a <HAL_UART_Receive_DMA>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000000 	.word	0x20000000

080009ac <rfid_uart_init>:
/******************************************************************************
* STATIC FUNCTIONS
*******************************************************************************/

static void rfid_uart_init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
   // Enable UART clock
	RFID_UART_CLK_ENABLE();
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <rfid_uart_init+0x2c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <rfid_uart_init+0x2c>)
 80009b8:	f043 0310 	orr.w	r3, r3, #16
 80009bc:	6453      	str	r3, [r2, #68]	; 0x44
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <rfid_uart_init+0x2c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	f003 0310 	and.w	r3, r3, #16
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  if(HAL_UART_Init(&rfid_uart_cfg) != HAL_OK)
 80009ca:	4804      	ldr	r0, [pc, #16]	; (80009dc <rfid_uart_init+0x30>)
 80009cc:	f003 f84c 	bl	8003a68 <HAL_UART_Init>
  {
	// print error log
  }
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800
 80009dc:	20000000 	.word	0x20000000

080009e0 <rfid_gpio_init>:
  // Disable UART clock
  RFID_UART_CLK_DISABLE();
}

static void rfid_gpio_init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0

  //---------------------------------------------------------------------------
  // Step 2: Enable peripherals and GPIO clock
  //---------------------------------------------------------------------------
  // Enable GPIO TX/RX clock
    RFID_UART_TX_CLK_ENABLE();
 80009e6:	4b48      	ldr	r3, [pc, #288]	; (8000b08 <rfid_gpio_init+0x128>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a47      	ldr	r2, [pc, #284]	; (8000b08 <rfid_gpio_init+0x128>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b45      	ldr	r3, [pc, #276]	; (8000b08 <rfid_gpio_init+0x128>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
	RFID_UART_RX_CLK_ENABLE();
 80009fe:	4b42      	ldr	r3, [pc, #264]	; (8000b08 <rfid_gpio_init+0x128>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a41      	ldr	r2, [pc, #260]	; (8000b08 <rfid_gpio_init+0x128>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b3f      	ldr	r3, [pc, #252]	; (8000b08 <rfid_gpio_init+0x128>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  //---------------------------------------------------------------------------
  // Step 3: Configure peripheral GPIO
  //---------------------------------------------------------------------------
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 030c 	add.w	r3, r7, #12
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]

  // TX pin
  GPIO_InitStruct.Pin = RFID_UART_TX_Pin;
 8000a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a34:	2302      	movs	r3, #2
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = RFID_UART_TX_AF_Pin;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RFID_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	4619      	mov	r1, r3
 8000a42:	4832      	ldr	r0, [pc, #200]	; (8000b0c <rfid_gpio_init+0x12c>)
 8000a44:	f001 f826 	bl	8001a94 <HAL_GPIO_Init>

  // RX pin
  GPIO_InitStruct.Pin = RFID_UART_RX_Pin;
 8000a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = RFID_UART_RX_AF_Pin;
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RFID_UART_RX_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	4619      	mov	r1, r3
 8000a64:	4829      	ldr	r0, [pc, #164]	; (8000b0c <rfid_gpio_init+0x12c>)
 8000a66:	f001 f815 	bl	8001a94 <HAL_GPIO_Init>

  // Configure DMA for receive data
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a6a:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <rfid_gpio_init+0x128>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a26      	ldr	r2, [pc, #152]	; (8000b08 <rfid_gpio_init+0x128>)
 8000a70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <rfid_gpio_init+0x128>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
  hdma_uart1_rx.Instance = DMA2_Stream2;
 8000a82:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <rfid_gpio_init+0x130>)
 8000a84:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <rfid_gpio_init+0x134>)
 8000a86:	601a      	str	r2, [r3, #0]
  hdma_uart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000a88:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <rfid_gpio_init+0x130>)
 8000a8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a8e:	605a      	str	r2, [r3, #4]
  hdma_uart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <rfid_gpio_init+0x130>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  hdma_uart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a96:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <rfid_gpio_init+0x130>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  hdma_uart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <rfid_gpio_init+0x130>)
 8000a9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aa2:	611a      	str	r2, [r3, #16]
  hdma_uart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <rfid_gpio_init+0x130>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  hdma_uart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <rfid_gpio_init+0x130>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  hdma_uart1_rx.Init.Mode = DMA_NORMAL;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <rfid_gpio_init+0x130>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  hdma_uart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <rfid_gpio_init+0x130>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  hdma_uart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <rfid_gpio_init+0x130>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DMA_Init(&hdma_uart1_rx) != HAL_OK)
 8000ac2:	4813      	ldr	r0, [pc, #76]	; (8000b10 <rfid_gpio_init+0x130>)
 8000ac4:	f000 fc70 	bl	80013a8 <HAL_DMA_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <rfid_gpio_init+0xf2>
  {
    Error_Handler();
 8000ace:	f000 f931 	bl	8000d34 <Error_Handler>
  }
  
 __HAL_LINKDMA(&rfid_uart_cfg, hdmarx, hdma_uart1_rx);
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <rfid_gpio_init+0x138>)
 8000ad4:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <rfid_gpio_init+0x130>)
 8000ad6:	671a      	str	r2, [r3, #112]	; 0x70
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <rfid_gpio_init+0x130>)
 8000ada:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <rfid_gpio_init+0x138>)
 8000adc:	639a      	str	r2, [r3, #56]	; 0x38

  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2105      	movs	r1, #5
 8000ae2:	203a      	movs	r0, #58	; 0x3a
 8000ae4:	f000 fc29 	bl	800133a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ae8:	203a      	movs	r0, #58	; 0x3a
 8000aea:	f000 fc42 	bl	8001372 <HAL_NVIC_EnableIRQ>

  // Enable NVIC USART
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	2025      	movs	r0, #37	; 0x25
 8000af4:	f000 fc21 	bl	800133a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000af8:	2025      	movs	r0, #37	; 0x25
 8000afa:	f000 fc3a 	bl	8001372 <HAL_NVIC_EnableIRQ>
}
 8000afe:	bf00      	nop
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020000 	.word	0x40020000
 8000b10:	20004bb0 	.word	0x20004bb0
 8000b14:	40026440 	.word	0x40026440
 8000b18:	20000000 	.word	0x20000000

08000b1c <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b20:	f000 fab1 	bl	8001086 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b24:	f000 f814 	bl	8000b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b28:	f000 f88c 	bl	8000c44 <MX_GPIO_Init>
  log_debug_init();
 8000b2c:	f003 ff14 	bl	8004958 <log_debug_init>
  led_init();
 8000b30:	f003 fe74 	bl	800481c <led_init>
  rfid_comm_init();
 8000b34:	f7ff ff04 	bl	8000940 <rfid_comm_init>

  /* USER CODE BEGIN 2 */
  rfid_thread_init();
 8000b38:	f7ff fd1c 	bl	8000574 <rfid_thread_init>
  control_thread_init();
 8000b3c:	f7ff fd38 	bl	80005b0 <control_thread_init>
  heart_beat_thread_init();
 8000b40:	f7ff fce6 	bl	8000510 <heart_beat_thread_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b44:	f004 fa8a 	bl	800505c <osKernelInitialize>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b48:	f004 fabc 	bl	80050c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <main+0x30>
	...

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b0b4      	sub	sp, #208	; 0xd0
 8000b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b5a:	2230      	movs	r2, #48	; 0x30
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f007 fdd1 	bl	8008706 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b64:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	2284      	movs	r2, #132	; 0x84
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f007 fdc2 	bl	8008706 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	4b2e      	ldr	r3, [pc, #184]	; (8000c3c <SystemClock_Config+0xec>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a2d      	ldr	r2, [pc, #180]	; (8000c3c <SystemClock_Config+0xec>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <SystemClock_Config+0xec>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b9a:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <SystemClock_Config+0xf0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ba2:	4a27      	ldr	r2, [pc, #156]	; (8000c40 <SystemClock_Config+0xf0>)
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <SystemClock_Config+0xf0>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc2:	2310      	movs	r3, #16
 8000bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 f922 	bl	8001e1c <HAL_RCC_OscConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000bde:	f000 f8a9 	bl	8000d34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be2:	230f      	movs	r3, #15
 8000be4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c00:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 fbac 	bl	8002364 <HAL_RCC_ClockConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c12:	f000 f88f 	bl	8000d34 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c16:	2340      	movs	r3, #64	; 0x40
 8000c18:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 fd96 	bl	8002754 <HAL_RCCEx_PeriphCLKConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000c2e:	f000 f881 	bl	8000d34 <Error_Handler>
  }
}
 8000c32:	bf00      	nop
 8000c34:	37d0      	adds	r7, #208	; 0xd0
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40007000 	.word	0x40007000

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b08b      	sub	sp, #44	; 0x2c
 8000c48:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b39      	ldr	r3, [pc, #228]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a38      	ldr	r2, [pc, #224]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b36      	ldr	r3, [pc, #216]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	4b33      	ldr	r3, [pc, #204]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a32      	ldr	r2, [pc, #200]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	623b      	str	r3, [r7, #32]
 8000c78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a2c      	ldr	r2, [pc, #176]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c80:	f043 0304 	orr.w	r3, r3, #4
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	61fb      	str	r3, [r7, #28]
 8000c90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c92:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a26      	ldr	r2, [pc, #152]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c98:	f043 0308 	orr.w	r3, r3, #8
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	61bb      	str	r3, [r7, #24]
 8000ca8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000caa:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a20      	ldr	r2, [pc, #128]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cb0:	f043 0310 	orr.w	r3, r3, #16
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0310 	and.w	r3, r3, #16
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a1a      	ldr	r2, [pc, #104]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cc8:	f043 0320 	orr.w	r3, r3, #32
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0320 	and.w	r3, r3, #32
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a08      	ldr	r2, [pc, #32]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
}
 8000d22:	bf00      	nop
 8000d24:	372c      	adds	r7, #44	; 0x2c
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800

08000d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_MspInit+0x44>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <HAL_MspInit+0x44>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_MspInit+0x44>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_MspInit+0x44>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_MspInit+0x44>)
 8000d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_MspInit+0x44>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800

08000d8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <HAL_SPI_MspInit+0x7c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d127      	bne.n	8000dfe <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <HAL_SPI_MspInit+0x80>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	4a16      	ldr	r2, [pc, #88]	; (8000e0c <HAL_SPI_MspInit+0x80>)
 8000db4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000db8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <HAL_SPI_MspInit+0x80>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_SPI_MspInit+0x80>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a10      	ldr	r2, [pc, #64]	; (8000e0c <HAL_SPI_MspInit+0x80>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_SPI_MspInit+0x80>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000dde:	23e0      	movs	r3, #224	; 0xe0
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dee:	2305      	movs	r3, #5
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <HAL_SPI_MspInit+0x84>)
 8000dfa:	f000 fe4b 	bl	8001a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	; 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40013000 	.word	0x40013000
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000

08000e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a17      	ldr	r2, [pc, #92]	; (8000e90 <HAL_UART_MspInit+0x7c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d128      	bne.n	8000e88 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e36:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <HAL_UART_MspInit+0x80>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a16      	ldr	r2, [pc, #88]	; (8000e94 <HAL_UART_MspInit+0x80>)
 8000e3c:	f043 0310 	orr.w	r3, r3, #16
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <HAL_UART_MspInit+0x80>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f003 0310 	and.w	r3, r3, #16
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <HAL_UART_MspInit+0x80>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a10      	ldr	r2, [pc, #64]	; (8000e94 <HAL_UART_MspInit+0x80>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <HAL_UART_MspInit+0x80>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e78:	2307      	movs	r3, #7
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <HAL_UART_MspInit+0x84>)
 8000e84:	f000 fe06 	bl	8001a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	; 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40011000 	.word	0x40011000
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020000 	.word	0x40020000

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <BusFault_Handler+0x4>

08000ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <UsageFault_Handler+0x4>

08000ec2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed4:	f000 f914 	bl	8001100 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ed8:	f006 fa9c 	bl	8007414 <xTaskGetSchedulerState>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d001      	beq.n	8000ee6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ee2:	f007 f969 	bl	80081b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart1_rx);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <DMA2_Stream2_IRQHandler+0x10>)
 8000ef2:	f000 fb67 	bl	80015c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20004bb0 	.word	0x20004bb0

08000f00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	e00a      	b.n	8000f28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f12:	f3af 8000 	nop.w
 8000f16:	4601      	mov	r1, r0
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	60ba      	str	r2, [r7, #8]
 8000f1e:	b2ca      	uxtb	r2, r1
 8000f20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3301      	adds	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	dbf0      	blt.n	8000f12 <_read+0x12>
	}

return len;
 8000f30:	687b      	ldr	r3, [r7, #4]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
	return -1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f62:	605a      	str	r2, [r3, #4]
	return 0;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <_isatty>:

int _isatty(int file)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
	return 1;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
	return 0;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fac:	4a14      	ldr	r2, [pc, #80]	; (8001000 <_sbrk+0x5c>)
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <_sbrk+0x60>)
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <_sbrk+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <_sbrk+0x64>)
 8000fc2:	4a12      	ldr	r2, [pc, #72]	; (800100c <_sbrk+0x68>)
 8000fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <_sbrk+0x64>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d207      	bcs.n	8000fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd4:	f007 fb62 	bl	800869c <__errno>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	230c      	movs	r3, #12
 8000fdc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	e009      	b.n	8000ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fea:	4b07      	ldr	r3, [pc, #28]	; (8001008 <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <_sbrk+0x64>)
 8000ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20050000 	.word	0x20050000
 8001004:	00000400 	.word	0x00000400
 8001008:	2000029c 	.word	0x2000029c
 800100c:	20004c58 	.word	0x20004c58

08001010 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <SystemInit+0x20>)
 8001016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101a:	4a05      	ldr	r2, [pc, #20]	; (8001030 <SystemInit+0x20>)
 800101c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001034:	f8df d034 	ldr.w	sp, [pc, #52]	; 800106c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800103a:	490e      	ldr	r1, [pc, #56]	; (8001074 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800103c:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0b      	ldr	r2, [pc, #44]	; (800107c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001050:	4c0b      	ldr	r4, [pc, #44]	; (8001080 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800105e:	f7ff ffd7 	bl	8001010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001062:	f007 fb21 	bl	80086a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001066:	f7ff fd59 	bl	8000b1c <main>
  bx  lr    
 800106a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800106c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001074:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8001078:	08009190 	.word	0x08009190
  ldr r2, =_sbss
 800107c:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8001080:	20004c58 	.word	0x20004c58

08001084 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001084:	e7fe      	b.n	8001084 <ADC_IRQHandler>

08001086 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108a:	2003      	movs	r0, #3
 800108c:	f000 f94a 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001090:	2000      	movs	r0, #0
 8001092:	f000 f805 	bl	80010a0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001096:	f7ff fe55 	bl	8000d44 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_InitTick+0x54>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_InitTick+0x58>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f965 	bl	800138e <HAL_SYSTICK_Config>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00e      	b.n	80010ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b0f      	cmp	r3, #15
 80010d2:	d80a      	bhi.n	80010ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d4:	2200      	movs	r2, #0
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f000 f92d 	bl	800133a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e0:	4a06      	ldr	r2, [pc, #24]	; (80010fc <HAL_InitTick+0x5c>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e000      	b.n	80010ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200000b0 	.word	0x200000b0
 80010f8:	200000b8 	.word	0x200000b8
 80010fc:	200000b4 	.word	0x200000b4

08001100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x20>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_IncTick+0x24>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a04      	ldr	r2, [pc, #16]	; (8001124 <HAL_IncTick+0x24>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	200000b8 	.word	0x200000b8
 8001124:	20004c10 	.word	0x20004c10

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <HAL_GetTick+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20004c10 	.word	0x20004c10

08001140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001148:	f7ff ffee 	bl	8001128 <HAL_GetTick>
 800114c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001158:	d005      	beq.n	8001166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_Delay+0x40>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4413      	add	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001166:	bf00      	nop
 8001168:	f7ff ffde 	bl	8001128 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	429a      	cmp	r2, r3
 8001176:	d8f7      	bhi.n	8001168 <HAL_Delay+0x28>
  {
  }
}
 8001178:	bf00      	nop
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200000b8 	.word	0x200000b8

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <__NVIC_SetPriorityGrouping+0x40>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00
 80011c8:	05fa0000 	.word	0x05fa0000

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0b      	blt.n	8001212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4907      	ldr	r1, [pc, #28]	; (8001220 <__NVIC_EnableIRQ+0x38>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2001      	movs	r0, #1
 800120a:	fa00 f202 	lsl.w	r2, r0, r2
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	210f      	movs	r1, #15
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f7ff ff8e 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff29 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff3e 	bl	80011cc <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff8e 	bl	8001278 <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5d 	bl	8001224 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff31 	bl	80011e8 <__NVIC_EnableIRQ>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffa2 	bl	80012e0 <SysTick_Config>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff feb8 	bl	8001128 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e099      	b.n	80014f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2202      	movs	r2, #2
 80013d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0201 	bic.w	r2, r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e4:	e00f      	b.n	8001406 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013e6:	f7ff fe9f 	bl	8001128 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b05      	cmp	r3, #5
 80013f2:	d908      	bls.n	8001406 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2220      	movs	r2, #32
 80013f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2203      	movs	r2, #3
 80013fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e078      	b.n	80014f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1e8      	bne.n	80013e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	4b38      	ldr	r3, [pc, #224]	; (8001500 <HAL_DMA_Init+0x158>)
 8001420:	4013      	ands	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001432:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800143e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	4313      	orrs	r3, r2
 8001456:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	2b04      	cmp	r3, #4
 800145e:	d107      	bne.n	8001470 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	4313      	orrs	r3, r2
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	4313      	orrs	r3, r2
 800146e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f023 0307 	bic.w	r3, r3, #7
 8001486:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	4313      	orrs	r3, r2
 8001490:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	2b04      	cmp	r3, #4
 8001498:	d117      	bne.n	80014ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00e      	beq.n	80014ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 fa77 	bl	80019a0 <DMA_CheckFifoParam>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d008      	beq.n	80014ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2240      	movs	r2, #64	; 0x40
 80014bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014c6:	2301      	movs	r3, #1
 80014c8:	e016      	b.n	80014f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 fa2e 	bl	8001934 <DMA_CalcBaseAndBitshift>
 80014d8:	4603      	mov	r3, r0
 80014da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e0:	223f      	movs	r2, #63	; 0x3f
 80014e2:	409a      	lsls	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	f010803f 	.word	0xf010803f

08001504 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001522:	2b01      	cmp	r3, #1
 8001524:	d101      	bne.n	800152a <HAL_DMA_Start_IT+0x26>
 8001526:	2302      	movs	r3, #2
 8001528:	e048      	b.n	80015bc <HAL_DMA_Start_IT+0xb8>
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b01      	cmp	r3, #1
 800153c:	d137      	bne.n	80015ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2202      	movs	r2, #2
 8001542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f000 f9c0 	bl	80018d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155c:	223f      	movs	r2, #63	; 0x3f
 800155e:	409a      	lsls	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0216 	orr.w	r2, r2, #22
 8001572:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001582:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	2b00      	cmp	r3, #0
 800158a:	d007      	beq.n	800159c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0208 	orr.w	r2, r2, #8
 800159a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e005      	b.n	80015ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015b6:	2302      	movs	r3, #2
 80015b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80015d0:	4b92      	ldr	r3, [pc, #584]	; (800181c <HAL_DMA_IRQHandler+0x258>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a92      	ldr	r2, [pc, #584]	; (8001820 <HAL_DMA_IRQHandler+0x25c>)
 80015d6:	fba2 2303 	umull	r2, r3, r2, r3
 80015da:	0a9b      	lsrs	r3, r3, #10
 80015dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ee:	2208      	movs	r2, #8
 80015f0:	409a      	lsls	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d01a      	beq.n	8001630 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d013      	beq.n	8001630 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0204 	bic.w	r2, r2, #4
 8001616:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161c:	2208      	movs	r2, #8
 800161e:	409a      	lsls	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001628:	f043 0201 	orr.w	r2, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001634:	2201      	movs	r2, #1
 8001636:	409a      	lsls	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d012      	beq.n	8001666 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00b      	beq.n	8001666 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001652:	2201      	movs	r2, #1
 8001654:	409a      	lsls	r2, r3
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165e:	f043 0202 	orr.w	r2, r3, #2
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166a:	2204      	movs	r2, #4
 800166c:	409a      	lsls	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4013      	ands	r3, r2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d012      	beq.n	800169c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00b      	beq.n	800169c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001688:	2204      	movs	r2, #4
 800168a:	409a      	lsls	r2, r3
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001694:	f043 0204 	orr.w	r2, r3, #4
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a0:	2210      	movs	r2, #16
 80016a2:	409a      	lsls	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d043      	beq.n	8001734 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d03c      	beq.n	8001734 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016be:	2210      	movs	r2, #16
 80016c0:	409a      	lsls	r2, r3
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d018      	beq.n	8001706 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d108      	bne.n	80016f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d024      	beq.n	8001734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	4798      	blx	r3
 80016f2:	e01f      	b.n	8001734 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d01b      	beq.n	8001734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	4798      	blx	r3
 8001704:	e016      	b.n	8001734 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001710:	2b00      	cmp	r3, #0
 8001712:	d107      	bne.n	8001724 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0208 	bic.w	r2, r2, #8
 8001722:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001738:	2220      	movs	r2, #32
 800173a:	409a      	lsls	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4013      	ands	r3, r2
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 808e 	beq.w	8001862 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0310 	and.w	r3, r3, #16
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 8086 	beq.w	8001862 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175a:	2220      	movs	r2, #32
 800175c:	409a      	lsls	r2, r3
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b05      	cmp	r3, #5
 800176c:	d136      	bne.n	80017dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0216 	bic.w	r2, r2, #22
 800177c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	695a      	ldr	r2, [r3, #20]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800178c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	2b00      	cmp	r3, #0
 8001794:	d103      	bne.n	800179e <HAL_DMA_IRQHandler+0x1da>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179a:	2b00      	cmp	r3, #0
 800179c:	d007      	beq.n	80017ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0208 	bic.w	r2, r2, #8
 80017ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b2:	223f      	movs	r2, #63	; 0x3f
 80017b4:	409a      	lsls	r2, r3
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d07d      	beq.n	80018ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	4798      	blx	r3
        }
        return;
 80017da:	e078      	b.n	80018ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d01c      	beq.n	8001824 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d108      	bne.n	800180a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d030      	beq.n	8001862 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	4798      	blx	r3
 8001808:	e02b      	b.n	8001862 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180e:	2b00      	cmp	r3, #0
 8001810:	d027      	beq.n	8001862 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	4798      	blx	r3
 800181a:	e022      	b.n	8001862 <HAL_DMA_IRQHandler+0x29e>
 800181c:	200000b0 	.word	0x200000b0
 8001820:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10f      	bne.n	8001852 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0210 	bic.w	r2, r2, #16
 8001840:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001866:	2b00      	cmp	r3, #0
 8001868:	d032      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d022      	beq.n	80018bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2205      	movs	r2, #5
 800187a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0201 	bic.w	r2, r2, #1
 800188c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	3301      	adds	r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	429a      	cmp	r2, r3
 8001898:	d307      	bcc.n	80018aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f2      	bne.n	800188e <HAL_DMA_IRQHandler+0x2ca>
 80018a8:	e000      	b.n	80018ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80018aa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	4798      	blx	r3
 80018cc:	e000      	b.n	80018d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80018ce:	bf00      	nop
    }
  }
}
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop

080018d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b40      	cmp	r3, #64	; 0x40
 8001904:	d108      	bne.n	8001918 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001916:	e007      	b.n	8001928 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	60da      	str	r2, [r3, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	3b10      	subs	r3, #16
 8001944:	4a13      	ldr	r2, [pc, #76]	; (8001994 <DMA_CalcBaseAndBitshift+0x60>)
 8001946:	fba2 2303 	umull	r2, r3, r2, r3
 800194a:	091b      	lsrs	r3, r3, #4
 800194c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800194e:	4a12      	ldr	r2, [pc, #72]	; (8001998 <DMA_CalcBaseAndBitshift+0x64>)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d908      	bls.n	8001974 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <DMA_CalcBaseAndBitshift+0x68>)
 800196a:	4013      	ands	r3, r2
 800196c:	1d1a      	adds	r2, r3, #4
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	659a      	str	r2, [r3, #88]	; 0x58
 8001972:	e006      	b.n	8001982 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <DMA_CalcBaseAndBitshift+0x68>)
 800197c:	4013      	ands	r3, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	aaaaaaab 	.word	0xaaaaaaab
 8001998:	08009114 	.word	0x08009114
 800199c:	fffffc00 	.word	0xfffffc00

080019a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d11f      	bne.n	80019fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d855      	bhi.n	8001a6c <DMA_CheckFifoParam+0xcc>
 80019c0:	a201      	add	r2, pc, #4	; (adr r2, 80019c8 <DMA_CheckFifoParam+0x28>)
 80019c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c6:	bf00      	nop
 80019c8:	080019d9 	.word	0x080019d9
 80019cc:	080019eb 	.word	0x080019eb
 80019d0:	080019d9 	.word	0x080019d9
 80019d4:	08001a6d 	.word	0x08001a6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d045      	beq.n	8001a70 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019e8:	e042      	b.n	8001a70 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019f2:	d13f      	bne.n	8001a74 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019f8:	e03c      	b.n	8001a74 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a02:	d121      	bne.n	8001a48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d836      	bhi.n	8001a78 <DMA_CheckFifoParam+0xd8>
 8001a0a:	a201      	add	r2, pc, #4	; (adr r2, 8001a10 <DMA_CheckFifoParam+0x70>)
 8001a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a10:	08001a21 	.word	0x08001a21
 8001a14:	08001a27 	.word	0x08001a27
 8001a18:	08001a21 	.word	0x08001a21
 8001a1c:	08001a39 	.word	0x08001a39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
      break;
 8001a24:	e02f      	b.n	8001a86 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d024      	beq.n	8001a7c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a36:	e021      	b.n	8001a7c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a40:	d11e      	bne.n	8001a80 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a46:	e01b      	b.n	8001a80 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d902      	bls.n	8001a54 <DMA_CheckFifoParam+0xb4>
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d003      	beq.n	8001a5a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a52:	e018      	b.n	8001a86 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
      break;
 8001a58:	e015      	b.n	8001a86 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00e      	beq.n	8001a84 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	73fb      	strb	r3, [r7, #15]
      break;
 8001a6a:	e00b      	b.n	8001a84 <DMA_CheckFifoParam+0xe4>
      break;
 8001a6c:	bf00      	nop
 8001a6e:	e00a      	b.n	8001a86 <DMA_CheckFifoParam+0xe6>
      break;
 8001a70:	bf00      	nop
 8001a72:	e008      	b.n	8001a86 <DMA_CheckFifoParam+0xe6>
      break;
 8001a74:	bf00      	nop
 8001a76:	e006      	b.n	8001a86 <DMA_CheckFifoParam+0xe6>
      break;
 8001a78:	bf00      	nop
 8001a7a:	e004      	b.n	8001a86 <DMA_CheckFifoParam+0xe6>
      break;
 8001a7c:	bf00      	nop
 8001a7e:	e002      	b.n	8001a86 <DMA_CheckFifoParam+0xe6>
      break;   
 8001a80:	bf00      	nop
 8001a82:	e000      	b.n	8001a86 <DMA_CheckFifoParam+0xe6>
      break;
 8001a84:	bf00      	nop
    }
  } 
  
  return status; 
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	; 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	e175      	b.n	8001da0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	f040 8164 	bne.w	8001d9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d00b      	beq.n	8001af2 <HAL_GPIO_Init+0x5e>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d007      	beq.n	8001af2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ae6:	2b11      	cmp	r3, #17
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b12      	cmp	r3, #18
 8001af0:	d130      	bne.n	8001b54 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b28:	2201      	movs	r2, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	f003 0201 	and.w	r2, r3, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x100>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b12      	cmp	r3, #18
 8001b92:	d123      	bne.n	8001bdc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	08da      	lsrs	r2, r3, #3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3208      	adds	r2, #8
 8001b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	220f      	movs	r2, #15
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	08da      	lsrs	r2, r3, #3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3208      	adds	r2, #8
 8001bd6:	69b9      	ldr	r1, [r7, #24]
 8001bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0203 	and.w	r2, r3, #3
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 80be 	beq.w	8001d9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1e:	4b65      	ldr	r3, [pc, #404]	; (8001db4 <HAL_GPIO_Init+0x320>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	4a64      	ldr	r2, [pc, #400]	; (8001db4 <HAL_GPIO_Init+0x320>)
 8001c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c28:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2a:	4b62      	ldr	r3, [pc, #392]	; (8001db4 <HAL_GPIO_Init+0x320>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c36:	4a60      	ldr	r2, [pc, #384]	; (8001db8 <HAL_GPIO_Init+0x324>)
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	220f      	movs	r2, #15
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a57      	ldr	r2, [pc, #348]	; (8001dbc <HAL_GPIO_Init+0x328>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d037      	beq.n	8001cd2 <HAL_GPIO_Init+0x23e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a56      	ldr	r2, [pc, #344]	; (8001dc0 <HAL_GPIO_Init+0x32c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d031      	beq.n	8001cce <HAL_GPIO_Init+0x23a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a55      	ldr	r2, [pc, #340]	; (8001dc4 <HAL_GPIO_Init+0x330>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d02b      	beq.n	8001cca <HAL_GPIO_Init+0x236>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a54      	ldr	r2, [pc, #336]	; (8001dc8 <HAL_GPIO_Init+0x334>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d025      	beq.n	8001cc6 <HAL_GPIO_Init+0x232>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a53      	ldr	r2, [pc, #332]	; (8001dcc <HAL_GPIO_Init+0x338>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d01f      	beq.n	8001cc2 <HAL_GPIO_Init+0x22e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a52      	ldr	r2, [pc, #328]	; (8001dd0 <HAL_GPIO_Init+0x33c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d019      	beq.n	8001cbe <HAL_GPIO_Init+0x22a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a51      	ldr	r2, [pc, #324]	; (8001dd4 <HAL_GPIO_Init+0x340>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d013      	beq.n	8001cba <HAL_GPIO_Init+0x226>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a50      	ldr	r2, [pc, #320]	; (8001dd8 <HAL_GPIO_Init+0x344>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00d      	beq.n	8001cb6 <HAL_GPIO_Init+0x222>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4f      	ldr	r2, [pc, #316]	; (8001ddc <HAL_GPIO_Init+0x348>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d007      	beq.n	8001cb2 <HAL_GPIO_Init+0x21e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4e      	ldr	r2, [pc, #312]	; (8001de0 <HAL_GPIO_Init+0x34c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_GPIO_Init+0x21a>
 8001caa:	2309      	movs	r3, #9
 8001cac:	e012      	b.n	8001cd4 <HAL_GPIO_Init+0x240>
 8001cae:	230a      	movs	r3, #10
 8001cb0:	e010      	b.n	8001cd4 <HAL_GPIO_Init+0x240>
 8001cb2:	2308      	movs	r3, #8
 8001cb4:	e00e      	b.n	8001cd4 <HAL_GPIO_Init+0x240>
 8001cb6:	2307      	movs	r3, #7
 8001cb8:	e00c      	b.n	8001cd4 <HAL_GPIO_Init+0x240>
 8001cba:	2306      	movs	r3, #6
 8001cbc:	e00a      	b.n	8001cd4 <HAL_GPIO_Init+0x240>
 8001cbe:	2305      	movs	r3, #5
 8001cc0:	e008      	b.n	8001cd4 <HAL_GPIO_Init+0x240>
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	e006      	b.n	8001cd4 <HAL_GPIO_Init+0x240>
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e004      	b.n	8001cd4 <HAL_GPIO_Init+0x240>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e002      	b.n	8001cd4 <HAL_GPIO_Init+0x240>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_GPIO_Init+0x240>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	69fa      	ldr	r2, [r7, #28]
 8001cd6:	f002 0203 	and.w	r2, r2, #3
 8001cda:	0092      	lsls	r2, r2, #2
 8001cdc:	4093      	lsls	r3, r2
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ce4:	4934      	ldr	r1, [pc, #208]	; (8001db8 <HAL_GPIO_Init+0x324>)
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	089b      	lsrs	r3, r3, #2
 8001cea:	3302      	adds	r3, #2
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf2:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <HAL_GPIO_Init+0x350>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d16:	4a33      	ldr	r2, [pc, #204]	; (8001de4 <HAL_GPIO_Init+0x350>)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d1c:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <HAL_GPIO_Init+0x350>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d40:	4a28      	ldr	r2, [pc, #160]	; (8001de4 <HAL_GPIO_Init+0x350>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d46:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <HAL_GPIO_Init+0x350>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d6a:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <HAL_GPIO_Init+0x350>)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <HAL_GPIO_Init+0x350>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d94:	4a13      	ldr	r2, [pc, #76]	; (8001de4 <HAL_GPIO_Init+0x350>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	2b0f      	cmp	r3, #15
 8001da4:	f67f ae86 	bls.w	8001ab4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001da8:	bf00      	nop
 8001daa:	3724      	adds	r7, #36	; 0x24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40013800 	.word	0x40013800
 8001dbc:	40020000 	.word	0x40020000
 8001dc0:	40020400 	.word	0x40020400
 8001dc4:	40020800 	.word	0x40020800
 8001dc8:	40020c00 	.word	0x40020c00
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40021400 	.word	0x40021400
 8001dd4:	40021800 	.word	0x40021800
 8001dd8:	40021c00 	.word	0x40021c00
 8001ddc:	40022000 	.word	0x40022000
 8001de0:	40022400 	.word	0x40022400
 8001de4:	40013c00 	.word	0x40013c00

08001de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
 8001df4:	4613      	mov	r3, r2
 8001df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df8:	787b      	ldrb	r3, [r7, #1]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e04:	e003      	b.n	8001e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	041a      	lsls	r2, r3, #16
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	619a      	str	r2, [r3, #24]
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e291      	b.n	8002356 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8087 	beq.w	8001f4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e40:	4b96      	ldr	r3, [pc, #600]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d00c      	beq.n	8001e66 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e4c:	4b93      	ldr	r3, [pc, #588]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d112      	bne.n	8001e7e <HAL_RCC_OscConfig+0x62>
 8001e58:	4b90      	ldr	r3, [pc, #576]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e64:	d10b      	bne.n	8001e7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e66:	4b8d      	ldr	r3, [pc, #564]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d06c      	beq.n	8001f4c <HAL_RCC_OscConfig+0x130>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d168      	bne.n	8001f4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e26b      	b.n	8002356 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x7a>
 8001e88:	4b84      	ldr	r3, [pc, #528]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a83      	ldr	r2, [pc, #524]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	e02e      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd8>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x9c>
 8001e9e:	4b7f      	ldr	r3, [pc, #508]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a7e      	ldr	r2, [pc, #504]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b7c      	ldr	r3, [pc, #496]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a7b      	ldr	r2, [pc, #492]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001eb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e01d      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0xc0>
 8001ec2:	4b76      	ldr	r3, [pc, #472]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a75      	ldr	r2, [pc, #468]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b73      	ldr	r3, [pc, #460]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a72      	ldr	r2, [pc, #456]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd8>
 8001edc:	4b6f      	ldr	r3, [pc, #444]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a6e      	ldr	r2, [pc, #440]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4b6c      	ldr	r3, [pc, #432]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a6b      	ldr	r2, [pc, #428]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d013      	beq.n	8001f24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7ff f914 	bl	8001128 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff f910 	bl	8001128 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e21f      	b.n	8002356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	4b61      	ldr	r3, [pc, #388]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0xe8>
 8001f22:	e014      	b.n	8001f4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7ff f900 	bl	8001128 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f2c:	f7ff f8fc 	bl	8001128 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e20b      	b.n	8002356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3e:	4b57      	ldr	r3, [pc, #348]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x110>
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d069      	beq.n	800202e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f5a:	4b50      	ldr	r3, [pc, #320]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00b      	beq.n	8001f7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f66:	4b4d      	ldr	r3, [pc, #308]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d11c      	bne.n	8001fac <HAL_RCC_OscConfig+0x190>
 8001f72:	4b4a      	ldr	r3, [pc, #296]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d116      	bne.n	8001fac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7e:	4b47      	ldr	r3, [pc, #284]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <HAL_RCC_OscConfig+0x17a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d001      	beq.n	8001f96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e1df      	b.n	8002356 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f96:	4b41      	ldr	r3, [pc, #260]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	493d      	ldr	r1, [pc, #244]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001faa:	e040      	b.n	800202e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d023      	beq.n	8001ffc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb4:	4b39      	ldr	r3, [pc, #228]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a38      	ldr	r2, [pc, #224]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7ff f8b2 	bl	8001128 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc8:	f7ff f8ae 	bl	8001128 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e1bd      	b.n	8002356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	4b30      	ldr	r3, [pc, #192]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe6:	4b2d      	ldr	r3, [pc, #180]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4929      	ldr	r1, [pc, #164]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]
 8001ffa:	e018      	b.n	800202e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffc:	4b27      	ldr	r3, [pc, #156]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a26      	ldr	r2, [pc, #152]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7ff f88e 	bl	8001128 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002010:	f7ff f88a 	bl	8001128 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e199      	b.n	8002356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	4b1e      	ldr	r3, [pc, #120]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d038      	beq.n	80020ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d019      	beq.n	8002076 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002042:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8002044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002046:	4a15      	ldr	r2, [pc, #84]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204e:	f7ff f86b 	bl	8001128 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002056:	f7ff f867 	bl	8001128 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e176      	b.n	8002356 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <HAL_RCC_OscConfig+0x280>)
 800206a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x23a>
 8002074:	e01a      	b.n	80020ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8002078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <HAL_RCC_OscConfig+0x280>)
 800207c:	f023 0301 	bic.w	r3, r3, #1
 8002080:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002082:	f7ff f851 	bl	8001128 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208a:	f7ff f84d 	bl	8001128 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d903      	bls.n	80020a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e15c      	b.n	8002356 <HAL_RCC_OscConfig+0x53a>
 800209c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a0:	4b91      	ldr	r3, [pc, #580]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 80020a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1ee      	bne.n	800208a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80a4 	beq.w	8002202 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ba:	4b8b      	ldr	r3, [pc, #556]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10d      	bne.n	80020e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	4b88      	ldr	r3, [pc, #544]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	4a87      	ldr	r2, [pc, #540]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d0:	6413      	str	r3, [r2, #64]	; 0x40
 80020d2:	4b85      	ldr	r3, [pc, #532]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020de:	2301      	movs	r3, #1
 80020e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e2:	4b82      	ldr	r3, [pc, #520]	; (80022ec <HAL_RCC_OscConfig+0x4d0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d118      	bne.n	8002120 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80020ee:	4b7f      	ldr	r3, [pc, #508]	; (80022ec <HAL_RCC_OscConfig+0x4d0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a7e      	ldr	r2, [pc, #504]	; (80022ec <HAL_RCC_OscConfig+0x4d0>)
 80020f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fa:	f7ff f815 	bl	8001128 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002102:	f7ff f811 	bl	8001128 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b64      	cmp	r3, #100	; 0x64
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e120      	b.n	8002356 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002114:	4b75      	ldr	r3, [pc, #468]	; (80022ec <HAL_RCC_OscConfig+0x4d0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d106      	bne.n	8002136 <HAL_RCC_OscConfig+0x31a>
 8002128:	4b6f      	ldr	r3, [pc, #444]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212c:	4a6e      	ldr	r2, [pc, #440]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6713      	str	r3, [r2, #112]	; 0x70
 8002134:	e02d      	b.n	8002192 <HAL_RCC_OscConfig+0x376>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0x33c>
 800213e:	4b6a      	ldr	r3, [pc, #424]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002142:	4a69      	ldr	r2, [pc, #420]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 8002144:	f023 0301 	bic.w	r3, r3, #1
 8002148:	6713      	str	r3, [r2, #112]	; 0x70
 800214a:	4b67      	ldr	r3, [pc, #412]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214e:	4a66      	ldr	r2, [pc, #408]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 8002150:	f023 0304 	bic.w	r3, r3, #4
 8002154:	6713      	str	r3, [r2, #112]	; 0x70
 8002156:	e01c      	b.n	8002192 <HAL_RCC_OscConfig+0x376>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b05      	cmp	r3, #5
 800215e:	d10c      	bne.n	800217a <HAL_RCC_OscConfig+0x35e>
 8002160:	4b61      	ldr	r3, [pc, #388]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 8002162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002164:	4a60      	ldr	r2, [pc, #384]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 8002166:	f043 0304 	orr.w	r3, r3, #4
 800216a:	6713      	str	r3, [r2, #112]	; 0x70
 800216c:	4b5e      	ldr	r3, [pc, #376]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002170:	4a5d      	ldr	r2, [pc, #372]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6713      	str	r3, [r2, #112]	; 0x70
 8002178:	e00b      	b.n	8002192 <HAL_RCC_OscConfig+0x376>
 800217a:	4b5b      	ldr	r3, [pc, #364]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217e:	4a5a      	ldr	r2, [pc, #360]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	6713      	str	r3, [r2, #112]	; 0x70
 8002186:	4b58      	ldr	r3, [pc, #352]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218a:	4a57      	ldr	r2, [pc, #348]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 800218c:	f023 0304 	bic.w	r3, r3, #4
 8002190:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d015      	beq.n	80021c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219a:	f7fe ffc5 	bl	8001128 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7fe ffc1 	bl	8001128 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e0ce      	b.n	8002356 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b8:	4b4b      	ldr	r3, [pc, #300]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 80021ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0ee      	beq.n	80021a2 <HAL_RCC_OscConfig+0x386>
 80021c4:	e014      	b.n	80021f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c6:	f7fe ffaf 	bl	8001128 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021cc:	e00a      	b.n	80021e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7fe ffab 	bl	8001128 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e0b8      	b.n	8002356 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e4:	4b40      	ldr	r3, [pc, #256]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1ee      	bne.n	80021ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021f0:	7dfb      	ldrb	r3, [r7, #23]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d105      	bne.n	8002202 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f6:	4b3c      	ldr	r3, [pc, #240]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	4a3b      	ldr	r2, [pc, #236]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 80021fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002200:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 80a4 	beq.w	8002354 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800220c:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d06b      	beq.n	80022f0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d149      	bne.n	80022b4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002220:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a30      	ldr	r2, [pc, #192]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 8002226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800222a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222c:	f7fe ff7c 	bl	8001128 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002234:	f7fe ff78 	bl	8001128 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e087      	b.n	8002356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002246:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69da      	ldr	r2, [r3, #28]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	019b      	lsls	r3, r3, #6
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	085b      	lsrs	r3, r3, #1
 800226a:	3b01      	subs	r3, #1
 800226c:	041b      	lsls	r3, r3, #16
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	061b      	lsls	r3, r3, #24
 8002276:	4313      	orrs	r3, r2
 8002278:	4a1b      	ldr	r2, [pc, #108]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 800227a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800227e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002280:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a18      	ldr	r2, [pc, #96]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 8002286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800228a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe ff4c 	bl	8001128 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe ff48 	bl	8001128 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e057      	b.n	8002356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x478>
 80022b2:	e04f      	b.n	8002354 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0b      	ldr	r2, [pc, #44]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 80022ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe ff32 	bl	8001128 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c8:	f7fe ff2e 	bl	8001128 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e03d      	b.n	8002356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022da:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x4ac>
 80022e6:	e035      	b.n	8002354 <HAL_RCC_OscConfig+0x538>
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_RCC_OscConfig+0x544>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d028      	beq.n	8002350 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d121      	bne.n	8002350 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d11a      	bne.n	8002350 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002320:	4013      	ands	r3, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002326:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002328:	4293      	cmp	r3, r2
 800232a:	d111      	bne.n	8002350 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002336:	085b      	lsrs	r3, r3, #1
 8002338:	3b01      	subs	r3, #1
 800233a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d107      	bne.n	8002350 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800

08002364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0d0      	b.n	800251e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800237c:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d910      	bls.n	80023ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b67      	ldr	r3, [pc, #412]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 020f 	bic.w	r2, r3, #15
 8002392:	4965      	ldr	r1, [pc, #404]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b63      	ldr	r3, [pc, #396]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0b8      	b.n	800251e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c4:	4b59      	ldr	r3, [pc, #356]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a58      	ldr	r2, [pc, #352]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80023ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023dc:	4b53      	ldr	r3, [pc, #332]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a52      	ldr	r2, [pc, #328]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80023e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e8:	4b50      	ldr	r3, [pc, #320]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	494d      	ldr	r1, [pc, #308]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d040      	beq.n	8002488 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d115      	bne.n	8002446 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e07f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002426:	4b41      	ldr	r3, [pc, #260]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e073      	b.n	800251e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002436:	4b3d      	ldr	r3, [pc, #244]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e06b      	b.n	800251e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002446:	4b39      	ldr	r3, [pc, #228]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f023 0203 	bic.w	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4936      	ldr	r1, [pc, #216]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002454:	4313      	orrs	r3, r2
 8002456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002458:	f7fe fe66 	bl	8001128 <HAL_GetTick>
 800245c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	e00a      	b.n	8002476 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002460:	f7fe fe62 	bl	8001128 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	; 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e053      	b.n	800251e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	4b2d      	ldr	r3, [pc, #180]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 020c 	and.w	r2, r3, #12
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	429a      	cmp	r2, r3
 8002486:	d1eb      	bne.n	8002460 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002488:	4b27      	ldr	r3, [pc, #156]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d210      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 020f 	bic.w	r2, r3, #15
 800249e:	4922      	ldr	r1, [pc, #136]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e032      	b.n	800251e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4916      	ldr	r1, [pc, #88]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	490e      	ldr	r1, [pc, #56]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024f6:	f000 f821 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80024fa:	4601      	mov	r1, r0
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <HAL_RCC_ClockConfig+0x1cc>)
 8002508:	5cd3      	ldrb	r3, [r2, r3]
 800250a:	fa21 f303 	lsr.w	r3, r1, r3
 800250e:	4a09      	ldr	r2, [pc, #36]	; (8002534 <HAL_RCC_ClockConfig+0x1d0>)
 8002510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_RCC_ClockConfig+0x1d4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fdc2 	bl	80010a0 <HAL_InitTick>

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023c00 	.word	0x40023c00
 800252c:	40023800 	.word	0x40023800
 8002530:	080090fc 	.word	0x080090fc
 8002534:	200000b0 	.word	0x200000b0
 8002538:	200000b4 	.word	0x200000b4

0800253c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800253c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	2300      	movs	r3, #0
 800254c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002552:	4b63      	ldr	r3, [pc, #396]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b04      	cmp	r3, #4
 800255c:	d007      	beq.n	800256e <HAL_RCC_GetSysClockFreq+0x32>
 800255e:	2b08      	cmp	r3, #8
 8002560:	d008      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x38>
 8002562:	2b00      	cmp	r3, #0
 8002564:	f040 80b4 	bne.w	80026d0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002568:	4b5e      	ldr	r3, [pc, #376]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800256a:	60bb      	str	r3, [r7, #8]
      break;
 800256c:	e0b3      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800256e:	4b5e      	ldr	r3, [pc, #376]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002570:	60bb      	str	r3, [r7, #8]
      break;
 8002572:	e0b0      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002574:	4b5a      	ldr	r3, [pc, #360]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800257c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800257e:	4b58      	ldr	r3, [pc, #352]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d04a      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800258a:	4b55      	ldr	r3, [pc, #340]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	099b      	lsrs	r3, r3, #6
 8002590:	f04f 0400 	mov.w	r4, #0
 8002594:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	ea03 0501 	and.w	r5, r3, r1
 80025a0:	ea04 0602 	and.w	r6, r4, r2
 80025a4:	4629      	mov	r1, r5
 80025a6:	4632      	mov	r2, r6
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	f04f 0400 	mov.w	r4, #0
 80025b0:	0154      	lsls	r4, r2, #5
 80025b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025b6:	014b      	lsls	r3, r1, #5
 80025b8:	4619      	mov	r1, r3
 80025ba:	4622      	mov	r2, r4
 80025bc:	1b49      	subs	r1, r1, r5
 80025be:	eb62 0206 	sbc.w	r2, r2, r6
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	f04f 0400 	mov.w	r4, #0
 80025ca:	0194      	lsls	r4, r2, #6
 80025cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025d0:	018b      	lsls	r3, r1, #6
 80025d2:	1a5b      	subs	r3, r3, r1
 80025d4:	eb64 0402 	sbc.w	r4, r4, r2
 80025d8:	f04f 0100 	mov.w	r1, #0
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	00e2      	lsls	r2, r4, #3
 80025e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025e6:	00d9      	lsls	r1, r3, #3
 80025e8:	460b      	mov	r3, r1
 80025ea:	4614      	mov	r4, r2
 80025ec:	195b      	adds	r3, r3, r5
 80025ee:	eb44 0406 	adc.w	r4, r4, r6
 80025f2:	f04f 0100 	mov.w	r1, #0
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	0262      	lsls	r2, r4, #9
 80025fc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002600:	0259      	lsls	r1, r3, #9
 8002602:	460b      	mov	r3, r1
 8002604:	4614      	mov	r4, r2
 8002606:	4618      	mov	r0, r3
 8002608:	4621      	mov	r1, r4
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f04f 0400 	mov.w	r4, #0
 8002610:	461a      	mov	r2, r3
 8002612:	4623      	mov	r3, r4
 8002614:	f7fd fdfc 	bl	8000210 <__aeabi_uldivmod>
 8002618:	4603      	mov	r3, r0
 800261a:	460c      	mov	r4, r1
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	e049      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002620:	4b2f      	ldr	r3, [pc, #188]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	099b      	lsrs	r3, r3, #6
 8002626:	f04f 0400 	mov.w	r4, #0
 800262a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	ea03 0501 	and.w	r5, r3, r1
 8002636:	ea04 0602 	and.w	r6, r4, r2
 800263a:	4629      	mov	r1, r5
 800263c:	4632      	mov	r2, r6
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	f04f 0400 	mov.w	r4, #0
 8002646:	0154      	lsls	r4, r2, #5
 8002648:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800264c:	014b      	lsls	r3, r1, #5
 800264e:	4619      	mov	r1, r3
 8002650:	4622      	mov	r2, r4
 8002652:	1b49      	subs	r1, r1, r5
 8002654:	eb62 0206 	sbc.w	r2, r2, r6
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	f04f 0400 	mov.w	r4, #0
 8002660:	0194      	lsls	r4, r2, #6
 8002662:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002666:	018b      	lsls	r3, r1, #6
 8002668:	1a5b      	subs	r3, r3, r1
 800266a:	eb64 0402 	sbc.w	r4, r4, r2
 800266e:	f04f 0100 	mov.w	r1, #0
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	00e2      	lsls	r2, r4, #3
 8002678:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800267c:	00d9      	lsls	r1, r3, #3
 800267e:	460b      	mov	r3, r1
 8002680:	4614      	mov	r4, r2
 8002682:	195b      	adds	r3, r3, r5
 8002684:	eb44 0406 	adc.w	r4, r4, r6
 8002688:	f04f 0100 	mov.w	r1, #0
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	02a2      	lsls	r2, r4, #10
 8002692:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002696:	0299      	lsls	r1, r3, #10
 8002698:	460b      	mov	r3, r1
 800269a:	4614      	mov	r4, r2
 800269c:	4618      	mov	r0, r3
 800269e:	4621      	mov	r1, r4
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f04f 0400 	mov.w	r4, #0
 80026a6:	461a      	mov	r2, r3
 80026a8:	4623      	mov	r3, r4
 80026aa:	f7fd fdb1 	bl	8000210 <__aeabi_uldivmod>
 80026ae:	4603      	mov	r3, r0
 80026b0:	460c      	mov	r4, r1
 80026b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026b4:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	0c1b      	lsrs	r3, r3, #16
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	3301      	adds	r3, #1
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026cc:	60bb      	str	r3, [r7, #8]
      break;
 80026ce:	e002      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026d2:	60bb      	str	r3, [r7, #8]
      break;
 80026d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026d6:	68bb      	ldr	r3, [r7, #8]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026e0:	40023800 	.word	0x40023800
 80026e4:	00f42400 	.word	0x00f42400
 80026e8:	007a1200 	.word	0x007a1200

080026ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <HAL_RCC_GetHCLKFreq+0x14>)
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	200000b0 	.word	0x200000b0

08002704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002708:	f7ff fff0 	bl	80026ec <HAL_RCC_GetHCLKFreq>
 800270c:	4601      	mov	r1, r0
 800270e:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	0a9b      	lsrs	r3, r3, #10
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	4a03      	ldr	r2, [pc, #12]	; (8002728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800271a:	5cd3      	ldrb	r3, [r2, r3]
 800271c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40023800 	.word	0x40023800
 8002728:	0800910c 	.word	0x0800910c

0800272c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002730:	f7ff ffdc 	bl	80026ec <HAL_RCC_GetHCLKFreq>
 8002734:	4601      	mov	r1, r0
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	0b5b      	lsrs	r3, r3, #13
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	4a03      	ldr	r2, [pc, #12]	; (8002750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002742:	5cd3      	ldrb	r3, [r2, r3]
 8002744:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002748:	4618      	mov	r0, r3
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40023800 	.word	0x40023800
 8002750:	0800910c 	.word	0x0800910c

08002754 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d012      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800277c:	4b69      	ldr	r3, [pc, #420]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a68      	ldr	r2, [pc, #416]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002782:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002786:	6093      	str	r3, [r2, #8]
 8002788:	4b66      	ldr	r3, [pc, #408]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002790:	4964      	ldr	r1, [pc, #400]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800279e:	2301      	movs	r3, #1
 80027a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d017      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027ae:	4b5d      	ldr	r3, [pc, #372]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027bc:	4959      	ldr	r1, [pc, #356]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027cc:	d101      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80027ce:	2301      	movs	r3, #1
 80027d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80027da:	2301      	movs	r3, #1
 80027dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d017      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027ea:	4b4e      	ldr	r3, [pc, #312]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	494a      	ldr	r1, [pc, #296]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002808:	d101      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800280a:	2301      	movs	r3, #1
 800280c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002816:	2301      	movs	r3, #1
 8002818:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002826:	2301      	movs	r3, #1
 8002828:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 808b 	beq.w	800294e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002838:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	4a39      	ldr	r2, [pc, #228]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800283e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002842:	6413      	str	r3, [r2, #64]	; 0x40
 8002844:	4b37      	ldr	r3, [pc, #220]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002850:	4b35      	ldr	r3, [pc, #212]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a34      	ldr	r2, [pc, #208]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800285c:	f7fe fc64 	bl	8001128 <HAL_GetTick>
 8002860:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002864:	f7fe fc60 	bl	8001128 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	; 0x64
 8002870:	d901      	bls.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e357      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002876:	4b2c      	ldr	r3, [pc, #176]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002882:	4b28      	ldr	r3, [pc, #160]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800288a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d035      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	429a      	cmp	r2, r3
 800289e:	d02e      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028a0:	4b20      	ldr	r3, [pc, #128]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028aa:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ae:	4a1d      	ldr	r2, [pc, #116]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028b6:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ba:	4a1a      	ldr	r2, [pc, #104]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80028c2:	4a18      	ldr	r2, [pc, #96]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028c8:	4b16      	ldr	r3, [pc, #88]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d114      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fc28 	bl	8001128 <HAL_GetTick>
 80028d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028da:	e00a      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028dc:	f7fe fc24 	bl	8001128 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e319      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f2:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0ee      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800290a:	d111      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800291a:	400b      	ands	r3, r1
 800291c:	4901      	ldr	r1, [pc, #4]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
 8002922:	e00b      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002924:	40023800 	.word	0x40023800
 8002928:	40007000 	.word	0x40007000
 800292c:	0ffffcff 	.word	0x0ffffcff
 8002930:	4bb1      	ldr	r3, [pc, #708]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4ab0      	ldr	r2, [pc, #704]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002936:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800293a:	6093      	str	r3, [r2, #8]
 800293c:	4bae      	ldr	r3, [pc, #696]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800293e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002948:	49ab      	ldr	r1, [pc, #684]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b00      	cmp	r3, #0
 8002958:	d010      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800295a:	4ba7      	ldr	r3, [pc, #668]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800295c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002960:	4aa5      	ldr	r2, [pc, #660]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002966:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800296a:	4ba3      	ldr	r3, [pc, #652]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800296c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002974:	49a0      	ldr	r1, [pc, #640]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002988:	4b9b      	ldr	r3, [pc, #620]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800298a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002996:	4998      	ldr	r1, [pc, #608]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029aa:	4b93      	ldr	r3, [pc, #588]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029b8:	498f      	ldr	r1, [pc, #572]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029cc:	4b8a      	ldr	r3, [pc, #552]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029da:	4987      	ldr	r1, [pc, #540]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029ee:	4b82      	ldr	r3, [pc, #520]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fc:	497e      	ldr	r1, [pc, #504]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00a      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a10:	4b79      	ldr	r3, [pc, #484]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a16:	f023 0203 	bic.w	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	4976      	ldr	r1, [pc, #472]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a32:	4b71      	ldr	r3, [pc, #452]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a38:	f023 020c 	bic.w	r2, r3, #12
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a40:	496d      	ldr	r1, [pc, #436]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00a      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a54:	4b68      	ldr	r3, [pc, #416]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a62:	4965      	ldr	r1, [pc, #404]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a76:	4b60      	ldr	r3, [pc, #384]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a84:	495c      	ldr	r1, [pc, #368]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a98:	4b57      	ldr	r3, [pc, #348]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa6:	4954      	ldr	r1, [pc, #336]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002aba:	4b4f      	ldr	r3, [pc, #316]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac8:	494b      	ldr	r1, [pc, #300]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002adc:	4b46      	ldr	r3, [pc, #280]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aea:	4943      	ldr	r1, [pc, #268]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002afe:	4b3e      	ldr	r3, [pc, #248]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0c:	493a      	ldr	r1, [pc, #232]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b20:	4b35      	ldr	r3, [pc, #212]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b2e:	4932      	ldr	r1, [pc, #200]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d011      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b42:	4b2d      	ldr	r3, [pc, #180]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b48:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b50:	4929      	ldr	r1, [pc, #164]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b60:	d101      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b62:	2301      	movs	r3, #1
 8002b64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b82:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b90:	4919      	ldr	r1, [pc, #100]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00b      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ba4:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002baa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bb4:	4910      	ldr	r1, [pc, #64]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d006      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80d9 	beq.w	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a08      	ldr	r2, [pc, #32]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bdc:	f7fe faa4 	bl	8001128 <HAL_GetTick>
 8002be0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002be2:	e00b      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002be4:	f7fe faa0 	bl	8001128 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b64      	cmp	r3, #100	; 0x64
 8002bf0:	d904      	bls.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e197      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bfc:	4b6c      	ldr	r3, [pc, #432]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1ed      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d021      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d11d      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c1c:	4b64      	ldr	r3, [pc, #400]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c22:	0c1b      	lsrs	r3, r3, #16
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c2a:	4b61      	ldr	r3, [pc, #388]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c30:	0e1b      	lsrs	r3, r3, #24
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	019a      	lsls	r2, r3, #6
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	431a      	orrs	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	061b      	lsls	r3, r3, #24
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	071b      	lsls	r3, r3, #28
 8002c50:	4957      	ldr	r1, [pc, #348]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d004      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c6c:	d00a      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d02e      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c82:	d129      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c84:	4b4a      	ldr	r3, [pc, #296]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c8a:	0c1b      	lsrs	r3, r3, #16
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c92:	4b47      	ldr	r3, [pc, #284]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c98:	0f1b      	lsrs	r3, r3, #28
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	019a      	lsls	r2, r3, #6
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	041b      	lsls	r3, r3, #16
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	061b      	lsls	r3, r3, #24
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	071b      	lsls	r3, r3, #28
 8002cb8:	493d      	ldr	r1, [pc, #244]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002cc0:	4b3b      	ldr	r3, [pc, #236]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc6:	f023 021f 	bic.w	r2, r3, #31
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	4937      	ldr	r1, [pc, #220]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d01d      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ce4:	4b32      	ldr	r3, [pc, #200]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cea:	0e1b      	lsrs	r3, r3, #24
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cf2:	4b2f      	ldr	r3, [pc, #188]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf8:	0f1b      	lsrs	r3, r3, #28
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	019a      	lsls	r2, r3, #6
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	041b      	lsls	r3, r3, #16
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	431a      	orrs	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	071b      	lsls	r3, r3, #28
 8002d18:	4925      	ldr	r1, [pc, #148]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d011      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	019a      	lsls	r2, r3, #6
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	041b      	lsls	r3, r3, #16
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	061b      	lsls	r3, r3, #24
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	071b      	lsls	r3, r3, #28
 8002d48:	4919      	ldr	r1, [pc, #100]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d50:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a16      	ldr	r2, [pc, #88]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d5c:	f7fe f9e4 	bl	8001128 <HAL_GetTick>
 8002d60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d64:	f7fe f9e0 	bl	8001128 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	; 0x64
 8002d70:	d901      	bls.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e0d7      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d76:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	f040 80cd 	bne.w	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a08      	ldr	r2, [pc, #32]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d96:	f7fe f9c7 	bl	8001128 <HAL_GetTick>
 8002d9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d9c:	e00a      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d9e:	f7fe f9c3 	bl	8001128 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b64      	cmp	r3, #100	; 0x64
 8002daa:	d903      	bls.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e0ba      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002db0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002db4:	4b5e      	ldr	r3, [pc, #376]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc0:	d0ed      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d02e      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d12a      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002dea:	4b51      	ldr	r3, [pc, #324]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	0c1b      	lsrs	r3, r3, #16
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002df8:	4b4d      	ldr	r3, [pc, #308]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	0f1b      	lsrs	r3, r3, #28
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	019a      	lsls	r2, r3, #6
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	041b      	lsls	r3, r3, #16
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	061b      	lsls	r3, r3, #24
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	071b      	lsls	r3, r3, #28
 8002e1e:	4944      	ldr	r1, [pc, #272]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e26:	4b42      	ldr	r3, [pc, #264]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	3b01      	subs	r3, #1
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	493d      	ldr	r1, [pc, #244]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d022      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e54:	d11d      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e56:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5c:	0e1b      	lsrs	r3, r3, #24
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e64:	4b32      	ldr	r3, [pc, #200]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	0f1b      	lsrs	r3, r3, #28
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	019a      	lsls	r2, r3, #6
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	041b      	lsls	r3, r3, #16
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	061b      	lsls	r3, r3, #24
 8002e84:	431a      	orrs	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	071b      	lsls	r3, r3, #28
 8002e8a:	4929      	ldr	r1, [pc, #164]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d028      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e9e:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea4:	0e1b      	lsrs	r3, r3, #24
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002eac:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	0c1b      	lsrs	r3, r3, #16
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	019a      	lsls	r2, r3, #6
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	041b      	lsls	r3, r3, #16
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	061b      	lsls	r3, r3, #24
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	071b      	lsls	r3, r3, #28
 8002ed2:	4917      	ldr	r1, [pc, #92]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002eda:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ee0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	4911      	ldr	r1, [pc, #68]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0e      	ldr	r2, [pc, #56]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002efc:	f7fe f914 	bl	8001128 <HAL_GetTick>
 8002f00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f04:	f7fe f910 	bl	8001128 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	; 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e007      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f22:	d1ef      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3720      	adds	r7, #32
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800

08002f34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e09d      	b.n	8003082 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d108      	bne.n	8002f60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f56:	d009      	beq.n	8002f6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	61da      	str	r2, [r3, #28]
 8002f5e:	e005      	b.n	8002f6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fd ff00 	bl	8000d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fac:	d902      	bls.n	8002fb4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	e002      	b.n	8002fba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fb8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002fc2:	d007      	beq.n	8002fd4 <HAL_SPI_Init+0xa0>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fcc:	d002      	beq.n	8002fd4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003016:	ea42 0103 	orr.w	r1, r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	0c1b      	lsrs	r3, r3, #16
 8003030:	f003 0204 	and.w	r2, r3, #4
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003050:	ea42 0103 	orr.w	r1, r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69da      	ldr	r2, [r3, #28]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003070:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b088      	sub	sp, #32
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	603b      	str	r3, [r7, #0]
 8003096:	4613      	mov	r3, r2
 8003098:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_SPI_Transmit+0x22>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e158      	b.n	800335e <HAL_SPI_Transmit+0x2d4>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030b4:	f7fe f838 	bl	8001128 <HAL_GetTick>
 80030b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d002      	beq.n	80030d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80030ca:	2302      	movs	r3, #2
 80030cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030ce:	e13d      	b.n	800334c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <HAL_SPI_Transmit+0x52>
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030e0:	e134      	b.n	800334c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2203      	movs	r2, #3
 80030e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	88fa      	ldrh	r2, [r7, #6]
 80030fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	88fa      	ldrh	r2, [r7, #6]
 8003100:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800312c:	d10f      	bne.n	800314e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800313c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800314c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003158:	2b40      	cmp	r3, #64	; 0x40
 800315a:	d007      	beq.n	800316c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800316a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003174:	d94b      	bls.n	800320e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HAL_SPI_Transmit+0xfa>
 800317e:	8afb      	ldrh	r3, [r7, #22]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d13e      	bne.n	8003202 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003188:	881a      	ldrh	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003194:	1c9a      	adds	r2, r3, #2
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031a8:	e02b      	b.n	8003202 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d112      	bne.n	80031de <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031bc:	881a      	ldrh	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c8:	1c9a      	adds	r2, r3, #2
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031dc:	e011      	b.n	8003202 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031de:	f7fd ffa3 	bl	8001128 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d803      	bhi.n	80031f6 <HAL_SPI_Transmit+0x16c>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d102      	bne.n	80031fc <HAL_SPI_Transmit+0x172>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d102      	bne.n	8003202 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003200:	e0a4      	b.n	800334c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1ce      	bne.n	80031aa <HAL_SPI_Transmit+0x120>
 800320c:	e07c      	b.n	8003308 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <HAL_SPI_Transmit+0x192>
 8003216:	8afb      	ldrh	r3, [r7, #22]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d170      	bne.n	80032fe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b01      	cmp	r3, #1
 8003224:	d912      	bls.n	800324c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	881a      	ldrh	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003236:	1c9a      	adds	r2, r3, #2
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003240:	b29b      	uxth	r3, r3
 8003242:	3b02      	subs	r3, #2
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	87da      	strh	r2, [r3, #62]	; 0x3e
 800324a:	e058      	b.n	80032fe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	330c      	adds	r3, #12
 8003256:	7812      	ldrb	r2, [r2, #0]
 8003258:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003272:	e044      	b.n	80032fe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b02      	cmp	r3, #2
 8003280:	d12b      	bne.n	80032da <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	d912      	bls.n	80032b2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	881a      	ldrh	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	1c9a      	adds	r2, r3, #2
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b02      	subs	r3, #2
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032b0:	e025      	b.n	80032fe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	330c      	adds	r3, #12
 80032bc:	7812      	ldrb	r2, [r2, #0]
 80032be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032d8:	e011      	b.n	80032fe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032da:	f7fd ff25 	bl	8001128 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d803      	bhi.n	80032f2 <HAL_SPI_Transmit+0x268>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d102      	bne.n	80032f8 <HAL_SPI_Transmit+0x26e>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d102      	bne.n	80032fe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032fc:	e026      	b.n	800334c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1b5      	bne.n	8003274 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	6839      	ldr	r1, [r7, #0]
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 fb65 	bl	80039dc <SPI_EndRxTxTransaction>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2220      	movs	r2, #32
 800331c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10a      	bne.n	800333c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003326:	2300      	movs	r3, #0
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	77fb      	strb	r3, [r7, #31]
 8003348:	e000      	b.n	800334c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800334a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800335c:	7ffb      	ldrb	r3, [r7, #31]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b08a      	sub	sp, #40	; 0x28
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003374:	2301      	movs	r3, #1
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_SPI_TransmitReceive+0x26>
 8003388:	2302      	movs	r3, #2
 800338a:	e1fb      	b.n	8003784 <HAL_SPI_TransmitReceive+0x41e>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003394:	f7fd fec8 	bl	8001128 <HAL_GetTick>
 8003398:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033a0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80033a8:	887b      	ldrh	r3, [r7, #2]
 80033aa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80033ac:	887b      	ldrh	r3, [r7, #2]
 80033ae:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033b0:	7efb      	ldrb	r3, [r7, #27]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d00e      	beq.n	80033d4 <HAL_SPI_TransmitReceive+0x6e>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033bc:	d106      	bne.n	80033cc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d102      	bne.n	80033cc <HAL_SPI_TransmitReceive+0x66>
 80033c6:	7efb      	ldrb	r3, [r7, #27]
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d003      	beq.n	80033d4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80033cc:	2302      	movs	r3, #2
 80033ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80033d2:	e1cd      	b.n	8003770 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_SPI_TransmitReceive+0x80>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_SPI_TransmitReceive+0x80>
 80033e0:	887b      	ldrh	r3, [r7, #2]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d103      	bne.n	80033ee <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80033ec:	e1c0      	b.n	8003770 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d003      	beq.n	8003402 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2205      	movs	r2, #5
 80033fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	887a      	ldrh	r2, [r7, #2]
 8003412:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	887a      	ldrh	r2, [r7, #2]
 800341a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	887a      	ldrh	r2, [r7, #2]
 8003428:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	887a      	ldrh	r2, [r7, #2]
 800342e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003444:	d802      	bhi.n	800344c <HAL_SPI_TransmitReceive+0xe6>
 8003446:	8a3b      	ldrh	r3, [r7, #16]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d908      	bls.n	800345e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800345a:	605a      	str	r2, [r3, #4]
 800345c:	e007      	b.n	800346e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800346c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003478:	2b40      	cmp	r3, #64	; 0x40
 800347a:	d007      	beq.n	800348c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800348a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003494:	d97c      	bls.n	8003590 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <HAL_SPI_TransmitReceive+0x13e>
 800349e:	8a7b      	ldrh	r3, [r7, #18]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d169      	bne.n	8003578 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	881a      	ldrh	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b4:	1c9a      	adds	r2, r3, #2
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034c8:	e056      	b.n	8003578 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d11b      	bne.n	8003510 <HAL_SPI_TransmitReceive+0x1aa>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d016      	beq.n	8003510 <HAL_SPI_TransmitReceive+0x1aa>
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d113      	bne.n	8003510 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	881a      	ldrh	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f8:	1c9a      	adds	r2, r3, #2
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b01      	cmp	r3, #1
 800351c:	d11c      	bne.n	8003558 <HAL_SPI_TransmitReceive+0x1f2>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003524:	b29b      	uxth	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d016      	beq.n	8003558 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	b292      	uxth	r2, r2
 8003536:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	1c9a      	adds	r2, r3, #2
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003554:	2301      	movs	r3, #1
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003558:	f7fd fde6 	bl	8001128 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003564:	429a      	cmp	r2, r3
 8003566:	d807      	bhi.n	8003578 <HAL_SPI_TransmitReceive+0x212>
 8003568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356e:	d003      	beq.n	8003578 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003576:	e0fb      	b.n	8003770 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1a3      	bne.n	80034ca <HAL_SPI_TransmitReceive+0x164>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d19d      	bne.n	80034ca <HAL_SPI_TransmitReceive+0x164>
 800358e:	e0df      	b.n	8003750 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_SPI_TransmitReceive+0x23a>
 8003598:	8a7b      	ldrh	r3, [r7, #18]
 800359a:	2b01      	cmp	r3, #1
 800359c:	f040 80cb 	bne.w	8003736 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d912      	bls.n	80035d0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	881a      	ldrh	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	1c9a      	adds	r2, r3, #2
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b02      	subs	r3, #2
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035ce:	e0b2      	b.n	8003736 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	330c      	adds	r3, #12
 80035da:	7812      	ldrb	r2, [r2, #0]
 80035dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035f6:	e09e      	b.n	8003736 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b02      	cmp	r3, #2
 8003604:	d134      	bne.n	8003670 <HAL_SPI_TransmitReceive+0x30a>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d02f      	beq.n	8003670 <HAL_SPI_TransmitReceive+0x30a>
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	2b01      	cmp	r3, #1
 8003614:	d12c      	bne.n	8003670 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d912      	bls.n	8003646 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003624:	881a      	ldrh	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003630:	1c9a      	adds	r2, r3, #2
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b02      	subs	r3, #2
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003644:	e012      	b.n	800366c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	330c      	adds	r3, #12
 8003650:	7812      	ldrb	r2, [r2, #0]
 8003652:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b01      	cmp	r3, #1
 800367c:	d148      	bne.n	8003710 <HAL_SPI_TransmitReceive+0x3aa>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d042      	beq.n	8003710 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b01      	cmp	r3, #1
 8003694:	d923      	bls.n	80036de <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	b292      	uxth	r2, r2
 80036a2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	1c9a      	adds	r2, r3, #2
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b02      	subs	r3, #2
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d81f      	bhi.n	800370c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	e016      	b.n	800370c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f103 020c 	add.w	r2, r3, #12
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	7812      	ldrb	r2, [r2, #0]
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800370c:	2301      	movs	r3, #1
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003710:	f7fd fd0a 	bl	8001128 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800371c:	429a      	cmp	r2, r3
 800371e:	d803      	bhi.n	8003728 <HAL_SPI_TransmitReceive+0x3c2>
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003726:	d102      	bne.n	800372e <HAL_SPI_TransmitReceive+0x3c8>
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	2b00      	cmp	r3, #0
 800372c:	d103      	bne.n	8003736 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003734:	e01c      	b.n	8003770 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	f47f af5b 	bne.w	80035f8 <HAL_SPI_TransmitReceive+0x292>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	f47f af54 	bne.w	80035f8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f941 	bl	80039dc <SPI_EndRxTxTransaction>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d006      	beq.n	800376e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	661a      	str	r2, [r3, #96]	; 0x60
 800376c:	e000      	b.n	8003770 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800376e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003780:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003784:	4618      	mov	r0, r3
 8003786:	3728      	adds	r7, #40	; 0x28
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800379a:	b2db      	uxtb	r3, r3
}
 800379c:	4618      	mov	r0, r3
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037b8:	f7fd fcb6 	bl	8001128 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	4413      	add	r3, r2
 80037c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037c8:	f7fd fcae 	bl	8001128 <HAL_GetTick>
 80037cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037ce:	4b39      	ldr	r3, [pc, #228]	; (80038b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	015b      	lsls	r3, r3, #5
 80037d4:	0d1b      	lsrs	r3, r3, #20
 80037d6:	69fa      	ldr	r2, [r7, #28]
 80037d8:	fb02 f303 	mul.w	r3, r2, r3
 80037dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037de:	e054      	b.n	800388a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e6:	d050      	beq.n	800388a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037e8:	f7fd fc9e 	bl	8001128 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d902      	bls.n	80037fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d13d      	bne.n	800387a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800380c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003816:	d111      	bne.n	800383c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003820:	d004      	beq.n	800382c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800382a:	d107      	bne.n	800383c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800383a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003844:	d10f      	bne.n	8003866 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003864:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e017      	b.n	80038aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	3b01      	subs	r3, #1
 8003888:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4013      	ands	r3, r2
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	429a      	cmp	r2, r3
 8003898:	bf0c      	ite	eq
 800389a:	2301      	moveq	r3, #1
 800389c:	2300      	movne	r3, #0
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d19b      	bne.n	80037e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3720      	adds	r7, #32
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	200000b0 	.word	0x200000b0

080038b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80038c6:	f7fd fc2f 	bl	8001128 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	4413      	add	r3, r2
 80038d4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038d6:	f7fd fc27 	bl	8001128 <HAL_GetTick>
 80038da:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80038dc:	4b3e      	ldr	r3, [pc, #248]	; (80039d8 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	00da      	lsls	r2, r3, #3
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	0d1b      	lsrs	r3, r3, #20
 80038ec:	69fa      	ldr	r2, [r7, #28]
 80038ee:	fb02 f303 	mul.w	r3, r2, r3
 80038f2:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80038f4:	e062      	b.n	80039bc <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80038fc:	d109      	bne.n	8003912 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d106      	bne.n	8003912 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	330c      	adds	r3, #12
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003910:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003918:	d050      	beq.n	80039bc <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800391a:	f7fd fc05 	bl	8001128 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	429a      	cmp	r2, r3
 8003928:	d902      	bls.n	8003930 <SPI_WaitFifoStateUntilTimeout+0x78>
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d13d      	bne.n	80039ac <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800393e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003948:	d111      	bne.n	800396e <SPI_WaitFifoStateUntilTimeout+0xb6>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003952:	d004      	beq.n	800395e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395c:	d107      	bne.n	800396e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800396c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003976:	d10f      	bne.n	8003998 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003996:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e010      	b.n	80039ce <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	4013      	ands	r3, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d194      	bne.n	80038f6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3720      	adds	r7, #32
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	200000b0 	.word	0x200000b0

080039dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f7ff ff5f 	bl	80038b8 <SPI_WaitFifoStateUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d007      	beq.n	8003a10 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a04:	f043 0220 	orr.w	r2, r3, #32
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e027      	b.n	8003a60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2200      	movs	r2, #0
 8003a18:	2180      	movs	r1, #128	; 0x80
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f7ff fec4 	bl	80037a8 <SPI_WaitFlagStateUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2a:	f043 0220 	orr.w	r2, r3, #32
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e014      	b.n	8003a60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f7ff ff38 	bl	80038b8 <SPI_WaitFifoStateUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d007      	beq.n	8003a5e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a52:	f043 0220 	orr.w	r2, r3, #32
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e000      	b.n	8003a60 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e04e      	b.n	8003b18 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d114      	bne.n	8003aac <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f976 	bl	8003d7c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d103      	bne.n	8003aa2 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a20      	ldr	r2, [pc, #128]	; (8003b20 <HAL_UART_Init+0xb8>)
 8003a9e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2224      	movs	r2, #36	; 0x24
 8003ab0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0201 	bic.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f99a 	bl	8003dfc <UART_SetConfig>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e022      	b.n	8003b18 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fbee 	bl	80042bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003afe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fc75 	bl	8004400 <UART_CheckIdleState>
 8003b16:	4603      	mov	r3, r0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	08000e15 	.word	0x08000e15

08003b24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	; 0x28
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	f040 8081 	bne.w	8003c40 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_UART_Transmit+0x26>
 8003b44:	88fb      	ldrh	r3, [r7, #6]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e079      	b.n	8003c42 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_UART_Transmit+0x38>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e072      	b.n	8003c42 <HAL_UART_Transmit+0x11e>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2221      	movs	r2, #33	; 0x21
 8003b70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b72:	f7fd fad9 	bl	8001128 <HAL_GetTick>
 8003b76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	88fa      	ldrh	r2, [r7, #6]
 8003b7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	88fa      	ldrh	r2, [r7, #6]
 8003b84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b90:	d108      	bne.n	8003ba4 <HAL_UART_Transmit+0x80>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d104      	bne.n	8003ba4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	e003      	b.n	8003bac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003bb4:	e02c      	b.n	8003c10 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2180      	movs	r1, #128	; 0x80
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 fc50 	bl	8004466 <UART_WaitOnFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e038      	b.n	8003c42 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10b      	bne.n	8003bee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003be4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	3302      	adds	r3, #2
 8003bea:	61bb      	str	r3, [r7, #24]
 8003bec:	e007      	b.n	8003bfe <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	781a      	ldrb	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1cc      	bne.n	8003bb6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2200      	movs	r2, #0
 8003c24:	2140      	movs	r1, #64	; 0x40
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 fc1d 	bl	8004466 <UART_WaitOnFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e005      	b.n	8003c42 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	e000      	b.n	8003c42 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003c40:	2302      	movs	r3, #2
  }
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3720      	adds	r7, #32
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	4613      	mov	r3, r2
 8003c56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d12c      	bne.n	8003cba <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_UART_Receive_DMA+0x22>
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e025      	b.n	8003cbc <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_UART_Receive_DMA+0x34>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e01e      	b.n	8003cbc <HAL_UART_Receive_DMA+0x72>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003ca8:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003caa:	88fb      	ldrh	r3, [r7, #6]
 8003cac:	461a      	mov	r2, r3
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 fc55 	bl	8004560 <UART_Start_Receive_DMA>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	e000      	b.n	8003cbc <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003cba:	2302      	movs	r3, #2
  }
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a14      	ldr	r2, [pc, #80]	; (8003dd8 <UART_InitCallbacksToDefault+0x5c>)
 8003d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a13      	ldr	r2, [pc, #76]	; (8003ddc <UART_InitCallbacksToDefault+0x60>)
 8003d90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a12      	ldr	r2, [pc, #72]	; (8003de0 <UART_InitCallbacksToDefault+0x64>)
 8003d98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a11      	ldr	r2, [pc, #68]	; (8003de4 <UART_InitCallbacksToDefault+0x68>)
 8003da0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a10      	ldr	r2, [pc, #64]	; (8003de8 <UART_InitCallbacksToDefault+0x6c>)
 8003da8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a0f      	ldr	r2, [pc, #60]	; (8003dec <UART_InitCallbacksToDefault+0x70>)
 8003db0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a0e      	ldr	r2, [pc, #56]	; (8003df0 <UART_InitCallbacksToDefault+0x74>)
 8003db8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a0d      	ldr	r2, [pc, #52]	; (8003df4 <UART_InitCallbacksToDefault+0x78>)
 8003dc0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a0c      	ldr	r2, [pc, #48]	; (8003df8 <UART_InitCallbacksToDefault+0x7c>)
 8003dc8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	08003cd9 	.word	0x08003cd9
 8003ddc:	08003cc5 	.word	0x08003cc5
 8003de0:	08003d01 	.word	0x08003d01
 8003de4:	08003ced 	.word	0x08003ced
 8003de8:	08003d15 	.word	0x08003d15
 8003dec:	08003d29 	.word	0x08003d29
 8003df0:	08003d3d 	.word	0x08003d3d
 8003df4:	08003d51 	.word	0x08003d51
 8003df8:	08003d65 	.word	0x08003d65

08003dfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4bb1      	ldr	r3, [pc, #708]	; (80040ec <UART_SetConfig+0x2f0>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	6979      	ldr	r1, [r7, #20]
 8003e30:	430b      	orrs	r3, r1
 8003e32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a9f      	ldr	r2, [pc, #636]	; (80040f0 <UART_SetConfig+0x2f4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d121      	bne.n	8003ebc <UART_SetConfig+0xc0>
 8003e78:	4b9e      	ldr	r3, [pc, #632]	; (80040f4 <UART_SetConfig+0x2f8>)
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d816      	bhi.n	8003eb4 <UART_SetConfig+0xb8>
 8003e86:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <UART_SetConfig+0x90>)
 8003e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8c:	08003e9d 	.word	0x08003e9d
 8003e90:	08003ea9 	.word	0x08003ea9
 8003e94:	08003ea3 	.word	0x08003ea3
 8003e98:	08003eaf 	.word	0x08003eaf
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	77fb      	strb	r3, [r7, #31]
 8003ea0:	e151      	b.n	8004146 <UART_SetConfig+0x34a>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	77fb      	strb	r3, [r7, #31]
 8003ea6:	e14e      	b.n	8004146 <UART_SetConfig+0x34a>
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	77fb      	strb	r3, [r7, #31]
 8003eac:	e14b      	b.n	8004146 <UART_SetConfig+0x34a>
 8003eae:	2308      	movs	r3, #8
 8003eb0:	77fb      	strb	r3, [r7, #31]
 8003eb2:	e148      	b.n	8004146 <UART_SetConfig+0x34a>
 8003eb4:	2310      	movs	r3, #16
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	bf00      	nop
 8003eba:	e144      	b.n	8004146 <UART_SetConfig+0x34a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a8d      	ldr	r2, [pc, #564]	; (80040f8 <UART_SetConfig+0x2fc>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d134      	bne.n	8003f30 <UART_SetConfig+0x134>
 8003ec6:	4b8b      	ldr	r3, [pc, #556]	; (80040f4 <UART_SetConfig+0x2f8>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ecc:	f003 030c 	and.w	r3, r3, #12
 8003ed0:	2b0c      	cmp	r3, #12
 8003ed2:	d829      	bhi.n	8003f28 <UART_SetConfig+0x12c>
 8003ed4:	a201      	add	r2, pc, #4	; (adr r2, 8003edc <UART_SetConfig+0xe0>)
 8003ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eda:	bf00      	nop
 8003edc:	08003f11 	.word	0x08003f11
 8003ee0:	08003f29 	.word	0x08003f29
 8003ee4:	08003f29 	.word	0x08003f29
 8003ee8:	08003f29 	.word	0x08003f29
 8003eec:	08003f1d 	.word	0x08003f1d
 8003ef0:	08003f29 	.word	0x08003f29
 8003ef4:	08003f29 	.word	0x08003f29
 8003ef8:	08003f29 	.word	0x08003f29
 8003efc:	08003f17 	.word	0x08003f17
 8003f00:	08003f29 	.word	0x08003f29
 8003f04:	08003f29 	.word	0x08003f29
 8003f08:	08003f29 	.word	0x08003f29
 8003f0c:	08003f23 	.word	0x08003f23
 8003f10:	2300      	movs	r3, #0
 8003f12:	77fb      	strb	r3, [r7, #31]
 8003f14:	e117      	b.n	8004146 <UART_SetConfig+0x34a>
 8003f16:	2302      	movs	r3, #2
 8003f18:	77fb      	strb	r3, [r7, #31]
 8003f1a:	e114      	b.n	8004146 <UART_SetConfig+0x34a>
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	77fb      	strb	r3, [r7, #31]
 8003f20:	e111      	b.n	8004146 <UART_SetConfig+0x34a>
 8003f22:	2308      	movs	r3, #8
 8003f24:	77fb      	strb	r3, [r7, #31]
 8003f26:	e10e      	b.n	8004146 <UART_SetConfig+0x34a>
 8003f28:	2310      	movs	r3, #16
 8003f2a:	77fb      	strb	r3, [r7, #31]
 8003f2c:	bf00      	nop
 8003f2e:	e10a      	b.n	8004146 <UART_SetConfig+0x34a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a71      	ldr	r2, [pc, #452]	; (80040fc <UART_SetConfig+0x300>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d120      	bne.n	8003f7c <UART_SetConfig+0x180>
 8003f3a:	4b6e      	ldr	r3, [pc, #440]	; (80040f4 <UART_SetConfig+0x2f8>)
 8003f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d00f      	beq.n	8003f68 <UART_SetConfig+0x16c>
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d802      	bhi.n	8003f52 <UART_SetConfig+0x156>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <UART_SetConfig+0x160>
 8003f50:	e010      	b.n	8003f74 <UART_SetConfig+0x178>
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d005      	beq.n	8003f62 <UART_SetConfig+0x166>
 8003f56:	2b30      	cmp	r3, #48	; 0x30
 8003f58:	d009      	beq.n	8003f6e <UART_SetConfig+0x172>
 8003f5a:	e00b      	b.n	8003f74 <UART_SetConfig+0x178>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	77fb      	strb	r3, [r7, #31]
 8003f60:	e0f1      	b.n	8004146 <UART_SetConfig+0x34a>
 8003f62:	2302      	movs	r3, #2
 8003f64:	77fb      	strb	r3, [r7, #31]
 8003f66:	e0ee      	b.n	8004146 <UART_SetConfig+0x34a>
 8003f68:	2304      	movs	r3, #4
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	e0eb      	b.n	8004146 <UART_SetConfig+0x34a>
 8003f6e:	2308      	movs	r3, #8
 8003f70:	77fb      	strb	r3, [r7, #31]
 8003f72:	e0e8      	b.n	8004146 <UART_SetConfig+0x34a>
 8003f74:	2310      	movs	r3, #16
 8003f76:	77fb      	strb	r3, [r7, #31]
 8003f78:	bf00      	nop
 8003f7a:	e0e4      	b.n	8004146 <UART_SetConfig+0x34a>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a5f      	ldr	r2, [pc, #380]	; (8004100 <UART_SetConfig+0x304>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d120      	bne.n	8003fc8 <UART_SetConfig+0x1cc>
 8003f86:	4b5b      	ldr	r3, [pc, #364]	; (80040f4 <UART_SetConfig+0x2f8>)
 8003f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f90:	2b40      	cmp	r3, #64	; 0x40
 8003f92:	d00f      	beq.n	8003fb4 <UART_SetConfig+0x1b8>
 8003f94:	2b40      	cmp	r3, #64	; 0x40
 8003f96:	d802      	bhi.n	8003f9e <UART_SetConfig+0x1a2>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <UART_SetConfig+0x1ac>
 8003f9c:	e010      	b.n	8003fc0 <UART_SetConfig+0x1c4>
 8003f9e:	2b80      	cmp	r3, #128	; 0x80
 8003fa0:	d005      	beq.n	8003fae <UART_SetConfig+0x1b2>
 8003fa2:	2bc0      	cmp	r3, #192	; 0xc0
 8003fa4:	d009      	beq.n	8003fba <UART_SetConfig+0x1be>
 8003fa6:	e00b      	b.n	8003fc0 <UART_SetConfig+0x1c4>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	77fb      	strb	r3, [r7, #31]
 8003fac:	e0cb      	b.n	8004146 <UART_SetConfig+0x34a>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	77fb      	strb	r3, [r7, #31]
 8003fb2:	e0c8      	b.n	8004146 <UART_SetConfig+0x34a>
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	e0c5      	b.n	8004146 <UART_SetConfig+0x34a>
 8003fba:	2308      	movs	r3, #8
 8003fbc:	77fb      	strb	r3, [r7, #31]
 8003fbe:	e0c2      	b.n	8004146 <UART_SetConfig+0x34a>
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	bf00      	nop
 8003fc6:	e0be      	b.n	8004146 <UART_SetConfig+0x34a>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a4d      	ldr	r2, [pc, #308]	; (8004104 <UART_SetConfig+0x308>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d124      	bne.n	800401c <UART_SetConfig+0x220>
 8003fd2:	4b48      	ldr	r3, [pc, #288]	; (80040f4 <UART_SetConfig+0x2f8>)
 8003fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe0:	d012      	beq.n	8004008 <UART_SetConfig+0x20c>
 8003fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe6:	d802      	bhi.n	8003fee <UART_SetConfig+0x1f2>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d007      	beq.n	8003ffc <UART_SetConfig+0x200>
 8003fec:	e012      	b.n	8004014 <UART_SetConfig+0x218>
 8003fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff2:	d006      	beq.n	8004002 <UART_SetConfig+0x206>
 8003ff4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ff8:	d009      	beq.n	800400e <UART_SetConfig+0x212>
 8003ffa:	e00b      	b.n	8004014 <UART_SetConfig+0x218>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	77fb      	strb	r3, [r7, #31]
 8004000:	e0a1      	b.n	8004146 <UART_SetConfig+0x34a>
 8004002:	2302      	movs	r3, #2
 8004004:	77fb      	strb	r3, [r7, #31]
 8004006:	e09e      	b.n	8004146 <UART_SetConfig+0x34a>
 8004008:	2304      	movs	r3, #4
 800400a:	77fb      	strb	r3, [r7, #31]
 800400c:	e09b      	b.n	8004146 <UART_SetConfig+0x34a>
 800400e:	2308      	movs	r3, #8
 8004010:	77fb      	strb	r3, [r7, #31]
 8004012:	e098      	b.n	8004146 <UART_SetConfig+0x34a>
 8004014:	2310      	movs	r3, #16
 8004016:	77fb      	strb	r3, [r7, #31]
 8004018:	bf00      	nop
 800401a:	e094      	b.n	8004146 <UART_SetConfig+0x34a>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a39      	ldr	r2, [pc, #228]	; (8004108 <UART_SetConfig+0x30c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d124      	bne.n	8004070 <UART_SetConfig+0x274>
 8004026:	4b33      	ldr	r3, [pc, #204]	; (80040f4 <UART_SetConfig+0x2f8>)
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004034:	d012      	beq.n	800405c <UART_SetConfig+0x260>
 8004036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403a:	d802      	bhi.n	8004042 <UART_SetConfig+0x246>
 800403c:	2b00      	cmp	r3, #0
 800403e:	d007      	beq.n	8004050 <UART_SetConfig+0x254>
 8004040:	e012      	b.n	8004068 <UART_SetConfig+0x26c>
 8004042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004046:	d006      	beq.n	8004056 <UART_SetConfig+0x25a>
 8004048:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800404c:	d009      	beq.n	8004062 <UART_SetConfig+0x266>
 800404e:	e00b      	b.n	8004068 <UART_SetConfig+0x26c>
 8004050:	2301      	movs	r3, #1
 8004052:	77fb      	strb	r3, [r7, #31]
 8004054:	e077      	b.n	8004146 <UART_SetConfig+0x34a>
 8004056:	2302      	movs	r3, #2
 8004058:	77fb      	strb	r3, [r7, #31]
 800405a:	e074      	b.n	8004146 <UART_SetConfig+0x34a>
 800405c:	2304      	movs	r3, #4
 800405e:	77fb      	strb	r3, [r7, #31]
 8004060:	e071      	b.n	8004146 <UART_SetConfig+0x34a>
 8004062:	2308      	movs	r3, #8
 8004064:	77fb      	strb	r3, [r7, #31]
 8004066:	e06e      	b.n	8004146 <UART_SetConfig+0x34a>
 8004068:	2310      	movs	r3, #16
 800406a:	77fb      	strb	r3, [r7, #31]
 800406c:	bf00      	nop
 800406e:	e06a      	b.n	8004146 <UART_SetConfig+0x34a>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a25      	ldr	r2, [pc, #148]	; (800410c <UART_SetConfig+0x310>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d124      	bne.n	80040c4 <UART_SetConfig+0x2c8>
 800407a:	4b1e      	ldr	r3, [pc, #120]	; (80040f4 <UART_SetConfig+0x2f8>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004088:	d012      	beq.n	80040b0 <UART_SetConfig+0x2b4>
 800408a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408e:	d802      	bhi.n	8004096 <UART_SetConfig+0x29a>
 8004090:	2b00      	cmp	r3, #0
 8004092:	d007      	beq.n	80040a4 <UART_SetConfig+0x2a8>
 8004094:	e012      	b.n	80040bc <UART_SetConfig+0x2c0>
 8004096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409a:	d006      	beq.n	80040aa <UART_SetConfig+0x2ae>
 800409c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040a0:	d009      	beq.n	80040b6 <UART_SetConfig+0x2ba>
 80040a2:	e00b      	b.n	80040bc <UART_SetConfig+0x2c0>
 80040a4:	2300      	movs	r3, #0
 80040a6:	77fb      	strb	r3, [r7, #31]
 80040a8:	e04d      	b.n	8004146 <UART_SetConfig+0x34a>
 80040aa:	2302      	movs	r3, #2
 80040ac:	77fb      	strb	r3, [r7, #31]
 80040ae:	e04a      	b.n	8004146 <UART_SetConfig+0x34a>
 80040b0:	2304      	movs	r3, #4
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	e047      	b.n	8004146 <UART_SetConfig+0x34a>
 80040b6:	2308      	movs	r3, #8
 80040b8:	77fb      	strb	r3, [r7, #31]
 80040ba:	e044      	b.n	8004146 <UART_SetConfig+0x34a>
 80040bc:	2310      	movs	r3, #16
 80040be:	77fb      	strb	r3, [r7, #31]
 80040c0:	bf00      	nop
 80040c2:	e040      	b.n	8004146 <UART_SetConfig+0x34a>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a11      	ldr	r2, [pc, #68]	; (8004110 <UART_SetConfig+0x314>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d139      	bne.n	8004142 <UART_SetConfig+0x346>
 80040ce:	4b09      	ldr	r3, [pc, #36]	; (80040f4 <UART_SetConfig+0x2f8>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040dc:	d027      	beq.n	800412e <UART_SetConfig+0x332>
 80040de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040e2:	d817      	bhi.n	8004114 <UART_SetConfig+0x318>
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d01c      	beq.n	8004122 <UART_SetConfig+0x326>
 80040e8:	e027      	b.n	800413a <UART_SetConfig+0x33e>
 80040ea:	bf00      	nop
 80040ec:	efff69f3 	.word	0xefff69f3
 80040f0:	40011000 	.word	0x40011000
 80040f4:	40023800 	.word	0x40023800
 80040f8:	40004400 	.word	0x40004400
 80040fc:	40004800 	.word	0x40004800
 8004100:	40004c00 	.word	0x40004c00
 8004104:	40005000 	.word	0x40005000
 8004108:	40011400 	.word	0x40011400
 800410c:	40007800 	.word	0x40007800
 8004110:	40007c00 	.word	0x40007c00
 8004114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004118:	d006      	beq.n	8004128 <UART_SetConfig+0x32c>
 800411a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800411e:	d009      	beq.n	8004134 <UART_SetConfig+0x338>
 8004120:	e00b      	b.n	800413a <UART_SetConfig+0x33e>
 8004122:	2300      	movs	r3, #0
 8004124:	77fb      	strb	r3, [r7, #31]
 8004126:	e00e      	b.n	8004146 <UART_SetConfig+0x34a>
 8004128:	2302      	movs	r3, #2
 800412a:	77fb      	strb	r3, [r7, #31]
 800412c:	e00b      	b.n	8004146 <UART_SetConfig+0x34a>
 800412e:	2304      	movs	r3, #4
 8004130:	77fb      	strb	r3, [r7, #31]
 8004132:	e008      	b.n	8004146 <UART_SetConfig+0x34a>
 8004134:	2308      	movs	r3, #8
 8004136:	77fb      	strb	r3, [r7, #31]
 8004138:	e005      	b.n	8004146 <UART_SetConfig+0x34a>
 800413a:	2310      	movs	r3, #16
 800413c:	77fb      	strb	r3, [r7, #31]
 800413e:	bf00      	nop
 8004140:	e001      	b.n	8004146 <UART_SetConfig+0x34a>
 8004142:	2310      	movs	r3, #16
 8004144:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414e:	d15b      	bne.n	8004208 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8004150:	7ffb      	ldrb	r3, [r7, #31]
 8004152:	2b08      	cmp	r3, #8
 8004154:	d827      	bhi.n	80041a6 <UART_SetConfig+0x3aa>
 8004156:	a201      	add	r2, pc, #4	; (adr r2, 800415c <UART_SetConfig+0x360>)
 8004158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415c:	08004181 	.word	0x08004181
 8004160:	08004189 	.word	0x08004189
 8004164:	08004191 	.word	0x08004191
 8004168:	080041a7 	.word	0x080041a7
 800416c:	08004197 	.word	0x08004197
 8004170:	080041a7 	.word	0x080041a7
 8004174:	080041a7 	.word	0x080041a7
 8004178:	080041a7 	.word	0x080041a7
 800417c:	0800419f 	.word	0x0800419f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004180:	f7fe fac0 	bl	8002704 <HAL_RCC_GetPCLK1Freq>
 8004184:	61b8      	str	r0, [r7, #24]
        break;
 8004186:	e013      	b.n	80041b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004188:	f7fe fad0 	bl	800272c <HAL_RCC_GetPCLK2Freq>
 800418c:	61b8      	str	r0, [r7, #24]
        break;
 800418e:	e00f      	b.n	80041b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004190:	4b49      	ldr	r3, [pc, #292]	; (80042b8 <UART_SetConfig+0x4bc>)
 8004192:	61bb      	str	r3, [r7, #24]
        break;
 8004194:	e00c      	b.n	80041b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004196:	f7fe f9d1 	bl	800253c <HAL_RCC_GetSysClockFreq>
 800419a:	61b8      	str	r0, [r7, #24]
        break;
 800419c:	e008      	b.n	80041b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800419e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041a2:	61bb      	str	r3, [r7, #24]
        break;
 80041a4:	e004      	b.n	80041b0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	77bb      	strb	r3, [r7, #30]
        break;
 80041ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d074      	beq.n	80042a0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	005a      	lsls	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	441a      	add	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b0f      	cmp	r3, #15
 80041d2:	d916      	bls.n	8004202 <UART_SetConfig+0x406>
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041da:	d212      	bcs.n	8004202 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	f023 030f 	bic.w	r3, r3, #15
 80041e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	085b      	lsrs	r3, r3, #1
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	89fb      	ldrh	r3, [r7, #14]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	89fa      	ldrh	r2, [r7, #14]
 80041fe:	60da      	str	r2, [r3, #12]
 8004200:	e04e      	b.n	80042a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	77bb      	strb	r3, [r7, #30]
 8004206:	e04b      	b.n	80042a0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004208:	7ffb      	ldrb	r3, [r7, #31]
 800420a:	2b08      	cmp	r3, #8
 800420c:	d827      	bhi.n	800425e <UART_SetConfig+0x462>
 800420e:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <UART_SetConfig+0x418>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	08004239 	.word	0x08004239
 8004218:	08004241 	.word	0x08004241
 800421c:	08004249 	.word	0x08004249
 8004220:	0800425f 	.word	0x0800425f
 8004224:	0800424f 	.word	0x0800424f
 8004228:	0800425f 	.word	0x0800425f
 800422c:	0800425f 	.word	0x0800425f
 8004230:	0800425f 	.word	0x0800425f
 8004234:	08004257 	.word	0x08004257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004238:	f7fe fa64 	bl	8002704 <HAL_RCC_GetPCLK1Freq>
 800423c:	61b8      	str	r0, [r7, #24]
        break;
 800423e:	e013      	b.n	8004268 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004240:	f7fe fa74 	bl	800272c <HAL_RCC_GetPCLK2Freq>
 8004244:	61b8      	str	r0, [r7, #24]
        break;
 8004246:	e00f      	b.n	8004268 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004248:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <UART_SetConfig+0x4bc>)
 800424a:	61bb      	str	r3, [r7, #24]
        break;
 800424c:	e00c      	b.n	8004268 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424e:	f7fe f975 	bl	800253c <HAL_RCC_GetSysClockFreq>
 8004252:	61b8      	str	r0, [r7, #24]
        break;
 8004254:	e008      	b.n	8004268 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800425a:	61bb      	str	r3, [r7, #24]
        break;
 800425c:	e004      	b.n	8004268 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	77bb      	strb	r3, [r7, #30]
        break;
 8004266:	bf00      	nop
    }

    if (pclk != 0U)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d018      	beq.n	80042a0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	085a      	lsrs	r2, r3, #1
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	441a      	add	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004280:	b29b      	uxth	r3, r3
 8004282:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	2b0f      	cmp	r3, #15
 8004288:	d908      	bls.n	800429c <UART_SetConfig+0x4a0>
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004290:	d204      	bcs.n	800429c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	60da      	str	r2, [r3, #12]
 800429a:	e001      	b.n	80042a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80042ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3720      	adds	r7, #32
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	00f42400 	.word	0x00f42400

080042bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01a      	beq.n	80043d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ba:	d10a      	bne.n	80043d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	605a      	str	r2, [r3, #4]
  }
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af02      	add	r7, sp, #8
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004410:	f7fc fe8a 	bl	8001128 <HAL_GetTick>
 8004414:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b08      	cmp	r3, #8
 8004422:	d10e      	bne.n	8004442 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004424:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f817 	bl	8004466 <UART_WaitOnFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e00d      	b.n	800445e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	603b      	str	r3, [r7, #0]
 8004472:	4613      	mov	r3, r2
 8004474:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004476:	e05e      	b.n	8004536 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447e:	d05a      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004480:	f7fc fe52 	bl	8001128 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	429a      	cmp	r2, r3
 800448e:	d302      	bcc.n	8004496 <UART_WaitOnFlagUntilTimeout+0x30>
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d11b      	bne.n	80044ce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2220      	movs	r2, #32
 80044c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e043      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d02c      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ea:	d124      	bne.n	8004536 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004504:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0201 	bic.w	r2, r2, #1
 8004514:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e00f      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69da      	ldr	r2, [r3, #28]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4013      	ands	r3, r2
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	429a      	cmp	r2, r3
 8004544:	bf0c      	ite	eq
 8004546:	2301      	moveq	r3, #1
 8004548:	2300      	movne	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	429a      	cmp	r2, r3
 8004552:	d091      	beq.n	8004478 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	4613      	mov	r3, r2
 800456c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	88fa      	ldrh	r2, [r7, #6]
 8004578:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2222      	movs	r2, #34	; 0x22
 8004588:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458e:	2b00      	cmp	r3, #0
 8004590:	d02b      	beq.n	80045ea <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	4a25      	ldr	r2, [pc, #148]	; (800462c <UART_Start_Receive_DMA+0xcc>)
 8004598:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	4a24      	ldr	r2, [pc, #144]	; (8004630 <UART_Start_Receive_DMA+0xd0>)
 80045a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	4a23      	ldr	r2, [pc, #140]	; (8004634 <UART_Start_Receive_DMA+0xd4>)
 80045a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	2200      	movs	r2, #0
 80045b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3324      	adds	r3, #36	; 0x24
 80045bc:	4619      	mov	r1, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c2:	461a      	mov	r2, r3
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	f7fc ff9d 	bl	8001504 <HAL_DMA_Start_IT>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00c      	beq.n	80045ea <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2210      	movs	r2, #16
 80045d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e01c      	b.n	8004624 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004600:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0201 	orr.w	r2, r2, #1
 8004610:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004620:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	080046c1 	.word	0x080046c1
 8004630:	0800475d 	.word	0x0800475d
 8004634:	0800479d 	.word	0x0800479d

08004638 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800464e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2220      	movs	r2, #32
 8004654:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004678:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0201 	bic.w	r2, r2, #1
 8004688:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800468e:	2b01      	cmp	r3, #1
 8004690:	d107      	bne.n	80046a2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0210 	bic.w	r2, r2, #16
 80046a0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2220      	movs	r2, #32
 80046a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d6:	d02a      	beq.n	800472e <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046ee:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0201 	bic.w	r2, r2, #1
 80046fe:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800470e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471a:	2b01      	cmp	r3, #1
 800471c:	d107      	bne.n	800472e <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0210 	bic.w	r2, r2, #16
 800472c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004732:	2b01      	cmp	r3, #1
 8004734:	d109      	bne.n	800474a <UART_DMAReceiveCplt+0x8a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8004742:	4611      	mov	r1, r2
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004748:	e004      	b.n	8004754 <UART_DMAReceiveCplt+0x94>
    huart->RxCpltCallback(huart);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	4798      	blx	r3
}
 8004754:	bf00      	nop
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476e:	2b01      	cmp	r3, #1
 8004770:	d10b      	bne.n	800478a <UART_DMARxHalfCplt+0x2e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 800477e:	0852      	lsrs	r2, r2, #1
 8004780:	b292      	uxth	r2, r2
 8004782:	4611      	mov	r1, r2
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004788:	e004      	b.n	8004794 <UART_DMARxHalfCplt+0x38>
    huart->RxHalfCpltCallback(huart);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	4798      	blx	r3
}
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c0:	2b80      	cmp	r3, #128	; 0x80
 80047c2:	d109      	bne.n	80047d8 <UART_DMAError+0x3c>
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b21      	cmp	r3, #33	; 0x21
 80047c8:	d106      	bne.n	80047d8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80047d2:	6978      	ldr	r0, [r7, #20]
 80047d4:	f7ff ff30 	bl	8004638 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e2:	2b40      	cmp	r3, #64	; 0x40
 80047e4:	d109      	bne.n	80047fa <UART_DMAError+0x5e>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b22      	cmp	r3, #34	; 0x22
 80047ea:	d106      	bne.n	80047fa <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80047f4:	6978      	ldr	r0, [r7, #20]
 80047f6:	f7ff ff34 	bl	8004662 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004800:	f043 0210 	orr.w	r2, r3, #16
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004810:	6978      	ldr	r0, [r7, #20]
 8004812:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004814:	bf00      	nop
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <led_init>:

/******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/
void led_init(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
    led_gpio_init();
 8004820:	f000 f852 	bl	80048c8 <led_gpio_init>
}
 8004824:	bf00      	nop
 8004826:	bd80      	pop	{r7, pc}

08004828 <led_green_on>:
    led_gpio_deinit();
}


void led_green_on(bool en)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	4603      	mov	r3, r0
 8004830:	71fb      	strb	r3, [r7, #7]
    if(en)
 8004832:	79fb      	ldrb	r3, [r7, #7]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <led_green_on+0x1c>
    {
        HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8004838:	2201      	movs	r2, #1
 800483a:	2101      	movs	r1, #1
 800483c:	4806      	ldr	r0, [pc, #24]	; (8004858 <led_green_on+0x30>)
 800483e:	f7fd fad3 	bl	8001de8 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
    }
}
 8004842:	e004      	b.n	800484e <led_green_on+0x26>
        HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8004844:	2200      	movs	r2, #0
 8004846:	2101      	movs	r1, #1
 8004848:	4803      	ldr	r0, [pc, #12]	; (8004858 <led_green_on+0x30>)
 800484a:	f7fd facd 	bl	8001de8 <HAL_GPIO_WritePin>
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40020400 	.word	0x40020400

0800485c <led_blue_on>:

void led_blue_on(bool en)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	71fb      	strb	r3, [r7, #7]
    if(en)
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d005      	beq.n	8004878 <led_blue_on+0x1c>
    {
        HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800486c:	2201      	movs	r2, #1
 800486e:	2180      	movs	r1, #128	; 0x80
 8004870:	4806      	ldr	r0, [pc, #24]	; (800488c <led_blue_on+0x30>)
 8004872:	f7fd fab9 	bl	8001de8 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
    }
}
 8004876:	e004      	b.n	8004882 <led_blue_on+0x26>
        HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8004878:	2200      	movs	r2, #0
 800487a:	2180      	movs	r1, #128	; 0x80
 800487c:	4803      	ldr	r0, [pc, #12]	; (800488c <led_blue_on+0x30>)
 800487e:	f7fd fab3 	bl	8001de8 <HAL_GPIO_WritePin>
}
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40020400 	.word	0x40020400

08004890 <led_red_on>:

void led_red_on(bool en)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	71fb      	strb	r3, [r7, #7]
    if(en)
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d006      	beq.n	80048ae <led_red_on+0x1e>
    {
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80048a0:	2201      	movs	r2, #1
 80048a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048a6:	4807      	ldr	r0, [pc, #28]	; (80048c4 <led_red_on+0x34>)
 80048a8:	f7fd fa9e 	bl	8001de8 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
    }
}
 80048ac:	e005      	b.n	80048ba <led_red_on+0x2a>
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80048ae:	2200      	movs	r2, #0
 80048b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048b4:	4803      	ldr	r0, [pc, #12]	; (80048c4 <led_red_on+0x34>)
 80048b6:	f7fd fa97 	bl	8001de8 <HAL_GPIO_WritePin>
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40020400 	.word	0x40020400

080048c8 <led_gpio_init>:

/******************************************************************************
* STATIC FUNCTIONS
*******************************************************************************/
static void led_gpio_init(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ce:	1d3b      	adds	r3, r7, #4
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	605a      	str	r2, [r3, #4]
 80048d6:	609a      	str	r2, [r3, #8]
 80048d8:	60da      	str	r2, [r3, #12]
 80048da:	611a      	str	r2, [r3, #16]

  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80048dc:	2200      	movs	r2, #0
 80048de:	2101      	movs	r1, #1
 80048e0:	481c      	ldr	r0, [pc, #112]	; (8004954 <led_gpio_init+0x8c>)
 80048e2:	f7fd fa81 	bl	8001de8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80048e6:	2200      	movs	r2, #0
 80048e8:	2180      	movs	r1, #128	; 0x80
 80048ea:	481a      	ldr	r0, [pc, #104]	; (8004954 <led_gpio_init+0x8c>)
 80048ec:	f7fd fa7c 	bl	8001de8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80048f0:	2200      	movs	r2, #0
 80048f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048f6:	4817      	ldr	r0, [pc, #92]	; (8004954 <led_gpio_init+0x8c>)
 80048f8:	f7fd fa76 	bl	8001de8 <HAL_GPIO_WritePin>

  // GREEN pin
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80048fc:	2301      	movs	r3, #1
 80048fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004900:	2301      	movs	r3, #1
 8004902:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004908:	2302      	movs	r3, #2
 800490a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800490c:	1d3b      	adds	r3, r7, #4
 800490e:	4619      	mov	r1, r3
 8004910:	4810      	ldr	r0, [pc, #64]	; (8004954 <led_gpio_init+0x8c>)
 8004912:	f7fd f8bf 	bl	8001a94 <HAL_GPIO_Init>

  // BLUE pin
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8004916:	2380      	movs	r3, #128	; 0x80
 8004918:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800491a:	2301      	movs	r3, #1
 800491c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004922:	2302      	movs	r3, #2
 8004924:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8004926:	1d3b      	adds	r3, r7, #4
 8004928:	4619      	mov	r1, r3
 800492a:	480a      	ldr	r0, [pc, #40]	; (8004954 <led_gpio_init+0x8c>)
 800492c:	f7fd f8b2 	bl	8001a94 <HAL_GPIO_Init>

  // RED pin
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8004930:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004934:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004936:	2301      	movs	r3, #1
 8004938:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800493e:	2302      	movs	r3, #2
 8004940:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8004942:	1d3b      	adds	r3, r7, #4
 8004944:	4619      	mov	r1, r3
 8004946:	4803      	ldr	r0, [pc, #12]	; (8004954 <led_gpio_init+0x8c>)
 8004948:	f7fd f8a4 	bl	8001a94 <HAL_GPIO_Init>

}
 800494c:	bf00      	nop
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40020400 	.word	0x40020400

08004958 <log_debug_init>:
* Input    : None.
* Output   : None.
* Return   : None.
*******************************************************************************/
void log_debug_init(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af00      	add	r7, sp, #0
#if (LOG_DEBUG_EN)
  GPIO_InitTypeDef gpio_init;
  // enable clock uart and gpio
  DEBUG_UART_CLK_EN();
 800495e:	4b1a      	ldr	r3, [pc, #104]	; (80049c8 <log_debug_init+0x70>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	4a19      	ldr	r2, [pc, #100]	; (80049c8 <log_debug_init+0x70>)
 8004964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004968:	6413      	str	r3, [r2, #64]	; 0x40
 800496a:	4b17      	ldr	r3, [pc, #92]	; (80049c8 <log_debug_init+0x70>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	68bb      	ldr	r3, [r7, #8]
  DEBUG_UART_GPIO_CLK_EN();
 8004976:	4b14      	ldr	r3, [pc, #80]	; (80049c8 <log_debug_init+0x70>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	4a13      	ldr	r2, [pc, #76]	; (80049c8 <log_debug_init+0x70>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	6313      	str	r3, [r2, #48]	; 0x30
 8004982:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <log_debug_init+0x70>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	607b      	str	r3, [r7, #4]
 800498c:	687b      	ldr	r3, [r7, #4]

  if(HAL_UART_Init(&uart_log_debug) != HAL_OK)
 800498e:	480f      	ldr	r0, [pc, #60]	; (80049cc <log_debug_init+0x74>)
 8004990:	f7ff f86a 	bl	8003a68 <HAL_UART_Init>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <log_debug_init+0x46>
  {
    Error_Handler();
 800499a:	f7fc f9cb 	bl	8000d34 <Error_Handler>
  }

  gpio_init.Mode      = GPIO_MODE_AF_PP;
 800499e:	2302      	movs	r3, #2
 80049a0:	613b      	str	r3, [r7, #16]
  gpio_init.Pull      = GPIO_NOPULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
  gpio_init.Pin       = LOG_DEBUG_UART_TX_PIN;
 80049a6:	2304      	movs	r3, #4
 80049a8:	60fb      	str	r3, [r7, #12]
  gpio_init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80049aa:	2301      	movs	r3, #1
 80049ac:	61bb      	str	r3, [r7, #24]
  gpio_init.Alternate = GPIO_AF7_USART2;
 80049ae:	2307      	movs	r3, #7
 80049b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LOG_DEBUG_UART_TX_PORT, &gpio_init);
 80049b2:	f107 030c 	add.w	r3, r7, #12
 80049b6:	4619      	mov	r1, r3
 80049b8:	4805      	ldr	r0, [pc, #20]	; (80049d0 <log_debug_init+0x78>)
 80049ba:	f7fd f86b 	bl	8001a94 <HAL_GPIO_Init>

#endif
}
 80049be:	bf00      	nop
 80049c0:	3720      	adds	r7, #32
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40023800 	.word	0x40023800
 80049cc:	200000bc 	.word	0x200000bc
 80049d0:	40020000 	.word	0x40020000

080049d4 <_write>:

#if (LOG_DEBUG_EN)
  #if defined(__GNUC__)
  int _write(int fd, char * ptr, int len)
  {
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&uart_log_debug, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	f04f 33ff 	mov.w	r3, #4294967295
 80049e8:	68b9      	ldr	r1, [r7, #8]
 80049ea:	4804      	ldr	r0, [pc, #16]	; (80049fc <_write+0x28>)
 80049ec:	f7ff f89a 	bl	8003b24 <HAL_UART_Transmit>
    return len;
 80049f0:	687b      	ldr	r3, [r7, #4]
  }
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	200000bc 	.word	0x200000bc

08004a00 <mfrc522_init>:
* Input    : None.
* Output   : None.
* Return   : None.
*******************************************************************************/
void mfrc522_init(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  mfrc522_spi_init();
 8004a04:	f000 fa0c 	bl	8004e20 <mfrc522_spi_init>
  mfrc522_gpio_init();
 8004a08:	f000 fa8a 	bl	8004f20 <mfrc522_gpio_init>
  mfrc522_setup();
 8004a0c:	f000 fa28 	bl	8004e60 <mfrc522_setup>
}
 8004a10:	bf00      	nop
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <mfrc522_power_en>:
* 				   - false: disable
* Output   : None.
* Return   : None.
*******************************************************************************/
void mfrc522_power_en(bool en)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	71fb      	strb	r3, [r7, #7]
	if(en)
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00d      	beq.n	8004a40 <mfrc522_power_en+0x2c>
	{
	  HAL_GPIO_WritePin(MFRC522_POWER_EN_GPIO_Port, MFRC522_POWER_EN_Pin, GPIO_PIN_RESET);
 8004a24:	2200      	movs	r2, #0
 8004a26:	2110      	movs	r1, #16
 8004a28:	480b      	ldr	r0, [pc, #44]	; (8004a58 <mfrc522_power_en+0x44>)
 8004a2a:	f7fd f9dd 	bl	8001de8 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8004a2e:	2001      	movs	r0, #1
 8004a30:	f7fc fb86 	bl	8001140 <HAL_Delay>
	  HAL_GPIO_WritePin(MFRC522_POWER_EN_GPIO_Port, MFRC522_POWER_EN_Pin, GPIO_PIN_SET);
 8004a34:	2201      	movs	r2, #1
 8004a36:	2110      	movs	r1, #16
 8004a38:	4807      	ldr	r0, [pc, #28]	; (8004a58 <mfrc522_power_en+0x44>)
 8004a3a:	f7fd f9d5 	bl	8001de8 <HAL_GPIO_WritePin>
	else
	{
	  HAL_GPIO_WritePin(MFRC522_POWER_EN_GPIO_Port, MFRC522_POWER_EN_Pin, GPIO_PIN_RESET);
	  HAL_Delay(1);
	}
}
 8004a3e:	e007      	b.n	8004a50 <mfrc522_power_en+0x3c>
	  HAL_GPIO_WritePin(MFRC522_POWER_EN_GPIO_Port, MFRC522_POWER_EN_Pin, GPIO_PIN_RESET);
 8004a40:	2200      	movs	r2, #0
 8004a42:	2110      	movs	r1, #16
 8004a44:	4804      	ldr	r0, [pc, #16]	; (8004a58 <mfrc522_power_en+0x44>)
 8004a46:	f7fd f9cf 	bl	8001de8 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8004a4a:	2001      	movs	r0, #1
 8004a4c:	f7fc fb78 	bl	8001140 <HAL_Delay>
}
 8004a50:	bf00      	nop
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40020800 	.word	0x40020800

08004a5c <mfrc522_check>:

uint8_t mfrc522_check(uint8_t* id) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = mfrc522_request(PICC_REQIDL, id);							// Find cards, return card type
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	2026      	movs	r0, #38	; 0x26
 8004a68:	f000 f80f 	bl	8004a8a <mfrc522_request>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = mfrc522_anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d104      	bne.n	8004a80 <mfrc522_check+0x24>
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f8fb 	bl	8004c72 <mfrc522_anticoll>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	73fb      	strb	r3, [r7, #15]
//	mfrc522_halt();																					// Command card into hibernation
	return status;
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <mfrc522_request>:
	}
	return MI_OK;
}


uint8_t mfrc522_request(uint8_t reqMode, uint8_t* TagType) {
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b086      	sub	sp, #24
 8004a8e:	af02      	add	r7, sp, #8
 8004a90:	4603      	mov	r3, r0
 8004a92:	6039      	str	r1, [r7, #0]
 8004a94:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t backBits;																			// The received data bits

	write_regs(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8004a96:	2107      	movs	r1, #7
 8004a98:	200d      	movs	r0, #13
 8004a9a:	f000 f94f 	bl	8004d3c <write_regs>
	TagType[0] = reqMode;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	79fa      	ldrb	r2, [r7, #7]
 8004aa2:	701a      	strb	r2, [r3, #0]
	status = mfrc522_to_card(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8004aa4:	f107 030c 	add.w	r3, r7, #12
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2201      	movs	r2, #1
 8004aae:	6839      	ldr	r1, [r7, #0]
 8004ab0:	200c      	movs	r0, #12
 8004ab2:	f000 f80f 	bl	8004ad4 <mfrc522_to_card>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d102      	bne.n	8004ac6 <mfrc522_request+0x3c>
 8004ac0:	89bb      	ldrh	r3, [r7, #12]
 8004ac2:	2b10      	cmp	r3, #16
 8004ac4:	d001      	beq.n	8004aca <mfrc522_request+0x40>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	73fb      	strb	r3, [r7, #15]
	return status;
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <mfrc522_to_card>:

uint8_t mfrc522_to_card(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8004ad4:	b590      	push	{r4, r7, lr}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	607b      	str	r3, [r7, #4]
 8004ade:	4603      	mov	r3, r0
 8004ae0:	73fb      	strb	r3, [r7, #15]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8004aea:	2300      	movs	r3, #0
 8004aec:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8004aee:	2300      	movs	r3, #0
 8004af0:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
 8004af4:	2b0c      	cmp	r3, #12
 8004af6:	d007      	beq.n	8004b08 <mfrc522_to_card+0x34>
 8004af8:	2b0e      	cmp	r3, #14
 8004afa:	d000      	beq.n	8004afe <mfrc522_to_card+0x2a>
			irqEn = 0x77;
			waitIRq = 0x30;
			break;
		}
		default:
		break;
 8004afc:	e009      	b.n	8004b12 <mfrc522_to_card+0x3e>
			irqEn = 0x12;
 8004afe:	2312      	movs	r3, #18
 8004b00:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8004b02:	2310      	movs	r3, #16
 8004b04:	757b      	strb	r3, [r7, #21]
			break;
 8004b06:	e004      	b.n	8004b12 <mfrc522_to_card+0x3e>
			irqEn = 0x77;
 8004b08:	2377      	movs	r3, #119	; 0x77
 8004b0a:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8004b0c:	2330      	movs	r3, #48	; 0x30
 8004b0e:	757b      	strb	r3, [r7, #21]
			break;
 8004b10:	bf00      	nop
	}

	write_regs(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8004b12:	7dbb      	ldrb	r3, [r7, #22]
 8004b14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	2002      	movs	r0, #2
 8004b1e:	f000 f90d 	bl	8004d3c <write_regs>
	mfrc522_clear_data(MFRC522_REG_COMM_IRQ, 0x80);
 8004b22:	2180      	movs	r1, #128	; 0x80
 8004b24:	2004      	movs	r0, #4
 8004b26:	f000 f9dd 	bl	8004ee4 <mfrc522_clear_data>
	mfrc522_set_data(MFRC522_REG_FIFO_LEVEL, 0x80);
 8004b2a:	2180      	movs	r1, #128	; 0x80
 8004b2c:	200a      	movs	r0, #10
 8004b2e:	f000 f9bf 	bl	8004eb0 <mfrc522_set_data>
	write_regs(MFRC522_REG_COMMAND, PCD_IDLE);
 8004b32:	2100      	movs	r1, #0
 8004b34:	2001      	movs	r0, #1
 8004b36:	f000 f901 	bl	8004d3c <write_regs>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) write_regs(MFRC522_REG_FIFO_DATA, sendData[i]);
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	827b      	strh	r3, [r7, #18]
 8004b3e:	e00a      	b.n	8004b56 <mfrc522_to_card+0x82>
 8004b40:	8a7b      	ldrh	r3, [r7, #18]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	4413      	add	r3, r2
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	4619      	mov	r1, r3
 8004b4a:	2009      	movs	r0, #9
 8004b4c:	f000 f8f6 	bl	8004d3c <write_regs>
 8004b50:	8a7b      	ldrh	r3, [r7, #18]
 8004b52:	3301      	adds	r3, #1
 8004b54:	827b      	strh	r3, [r7, #18]
 8004b56:	7bbb      	ldrb	r3, [r7, #14]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	8a7a      	ldrh	r2, [r7, #18]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d3ef      	bcc.n	8004b40 <mfrc522_to_card+0x6c>

	// Execute the command
	write_regs(MFRC522_REG_COMMAND, command);
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	4619      	mov	r1, r3
 8004b64:	2001      	movs	r0, #1
 8004b66:	f000 f8e9 	bl	8004d3c <write_regs>
	if (command == PCD_TRANSCEIVE) mfrc522_set_data(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	2b0c      	cmp	r3, #12
 8004b6e:	d103      	bne.n	8004b78 <mfrc522_to_card+0xa4>
 8004b70:	2180      	movs	r1, #128	; 0x80
 8004b72:	200d      	movs	r0, #13
 8004b74:	f000 f99c 	bl	8004eb0 <mfrc522_set_data>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8004b78:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004b7c:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = read_regs(MFRC522_REG_COMM_IRQ);
 8004b7e:	2004      	movs	r0, #4
 8004b80:	f000 f914 	bl	8004dac <read_regs>
 8004b84:	4603      	mov	r3, r0
 8004b86:	753b      	strb	r3, [r7, #20]
		i--;
 8004b88:	8a7b      	ldrh	r3, [r7, #18]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8004b8e:	8a7b      	ldrh	r3, [r7, #18]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <mfrc522_to_card+0xd6>
 8004b94:	7d3b      	ldrb	r3, [r7, #20]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d105      	bne.n	8004baa <mfrc522_to_card+0xd6>
 8004b9e:	7d3a      	ldrb	r2, [r7, #20]
 8004ba0:	7d7b      	ldrb	r3, [r7, #21]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0e9      	beq.n	8004b7e <mfrc522_to_card+0xaa>

	mfrc522_clear_data(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8004baa:	2180      	movs	r1, #128	; 0x80
 8004bac:	200d      	movs	r0, #13
 8004bae:	f000 f999 	bl	8004ee4 <mfrc522_clear_data>

	if (i != 0)  {
 8004bb2:	8a7b      	ldrh	r3, [r7, #18]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d057      	beq.n	8004c68 <mfrc522_to_card+0x194>
		if (!(read_regs(MFRC522_REG_ERROR) & 0x1B)) {
 8004bb8:	2006      	movs	r0, #6
 8004bba:	f000 f8f7 	bl	8004dac <read_regs>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f003 031b 	and.w	r3, r3, #27
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d14d      	bne.n	8004c64 <mfrc522_to_card+0x190>
			status = MI_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8004bcc:	7d3a      	ldrb	r2, [r7, #20]
 8004bce:	7dbb      	ldrb	r3, [r7, #22]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <mfrc522_to_card+0x10c>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	2b0c      	cmp	r3, #12
 8004be4:	d140      	bne.n	8004c68 <mfrc522_to_card+0x194>
				n = read_regs(MFRC522_REG_FIFO_LEVEL);
 8004be6:	200a      	movs	r0, #10
 8004be8:	f000 f8e0 	bl	8004dac <read_regs>
 8004bec:	4603      	mov	r3, r0
 8004bee:	753b      	strb	r3, [r7, #20]
				lastBits = read_regs(MFRC522_REG_CONTROL) & 0x07;
 8004bf0:	200c      	movs	r0, #12
 8004bf2:	f000 f8db 	bl	8004dac <read_regs>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8004bfe:	7c7b      	ldrb	r3, [r7, #17]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00b      	beq.n	8004c1c <mfrc522_to_card+0x148>
 8004c04:	7d3b      	ldrb	r3, [r7, #20]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	7c7b      	ldrb	r3, [r7, #17]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	4413      	add	r3, r2
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c18:	801a      	strh	r2, [r3, #0]
 8004c1a:	e005      	b.n	8004c28 <mfrc522_to_card+0x154>
 8004c1c:	7d3b      	ldrb	r3, [r7, #20]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8004c28:	7d3b      	ldrb	r3, [r7, #20]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <mfrc522_to_card+0x15e>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8004c32:	7d3b      	ldrb	r3, [r7, #20]
 8004c34:	2b10      	cmp	r3, #16
 8004c36:	d901      	bls.n	8004c3c <mfrc522_to_card+0x168>
 8004c38:	2310      	movs	r3, #16
 8004c3a:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = read_regs(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	827b      	strh	r3, [r7, #18]
 8004c40:	e00a      	b.n	8004c58 <mfrc522_to_card+0x184>
 8004c42:	8a7b      	ldrh	r3, [r7, #18]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	18d4      	adds	r4, r2, r3
 8004c48:	2009      	movs	r0, #9
 8004c4a:	f000 f8af 	bl	8004dac <read_regs>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	7023      	strb	r3, [r4, #0]
 8004c52:	8a7b      	ldrh	r3, [r7, #18]
 8004c54:	3301      	adds	r3, #1
 8004c56:	827b      	strh	r3, [r7, #18]
 8004c58:	7d3b      	ldrb	r3, [r7, #20]
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	8a7a      	ldrh	r2, [r7, #18]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d3ef      	bcc.n	8004c42 <mfrc522_to_card+0x16e>
 8004c62:	e001      	b.n	8004c68 <mfrc522_to_card+0x194>
			}
		} else status = MI_ERR;
 8004c64:	2302      	movs	r3, #2
 8004c66:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8004c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	371c      	adds	r7, #28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd90      	pop	{r4, r7, pc}

08004c72 <mfrc522_anticoll>:

uint8_t mfrc522_anticoll(uint8_t* serNum) {
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b086      	sub	sp, #24
 8004c76:	af02      	add	r7, sp, #8
 8004c78:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	write_regs(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8004c7e:	2100      	movs	r1, #0
 8004c80:	200d      	movs	r0, #13
 8004c82:	f000 f85b 	bl	8004d3c <write_regs>
	serNum[0] = PICC_ANTICOLL;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2293      	movs	r2, #147	; 0x93
 8004c8a:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	2220      	movs	r2, #32
 8004c92:	701a      	strb	r2, [r3, #0]
	status = mfrc522_to_card(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8004c94:	f107 030a 	add.w	r3, r7, #10
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	200c      	movs	r0, #12
 8004ca2:	f7ff ff17 	bl	8004ad4 <mfrc522_to_card>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d118      	bne.n	8004ce2 <mfrc522_anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	73bb      	strb	r3, [r7, #14]
 8004cb4:	e009      	b.n	8004cca <mfrc522_anticoll+0x58>
 8004cb6:	7bbb      	ldrb	r3, [r7, #14]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	4413      	add	r3, r2
 8004cbc:	781a      	ldrb	r2, [r3, #0]
 8004cbe:	7b7b      	ldrb	r3, [r7, #13]
 8004cc0:	4053      	eors	r3, r2
 8004cc2:	737b      	strb	r3, [r7, #13]
 8004cc4:	7bbb      	ldrb	r3, [r7, #14]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	73bb      	strb	r3, [r7, #14]
 8004cca:	7bbb      	ldrb	r3, [r7, #14]
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d9f2      	bls.n	8004cb6 <mfrc522_anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8004cd0:	7bbb      	ldrb	r3, [r7, #14]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	7b7a      	ldrb	r2, [r7, #13]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d001      	beq.n	8004ce2 <mfrc522_anticoll+0x70>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <mfrc522_reset>:
	}
	return status;
}


void mfrc522_reset(void) {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
	write_regs(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8004cf0:	210f      	movs	r1, #15
 8004cf2:	2001      	movs	r0, #1
 8004cf4:	f000 f822 	bl	8004d3c <write_regs>
}
 8004cf8:	bf00      	nop
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <mfrc522_antenna_on>:

/******************************************************************************
* STATIC FUNCTIONS
*******************************************************************************/
static void mfrc522_antenna_on(bool en)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	4603      	mov	r3, r0
 8004d04:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	if(en)
 8004d06:	79fb      	ldrb	r3, [r7, #7]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00e      	beq.n	8004d2a <mfrc522_antenna_on+0x2e>
	{
		temp = read_regs(MFRC522_REG_TX_CONTROL);
 8004d0c:	2014      	movs	r0, #20
 8004d0e:	f000 f84d 	bl	8004dac <read_regs>
 8004d12:	4603      	mov	r3, r0
 8004d14:	73fb      	strb	r3, [r7, #15]
		if (!(temp & 0x03)) mfrc522_set_data(MFRC522_REG_TX_CONTROL, 0x03);
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d108      	bne.n	8004d32 <mfrc522_antenna_on+0x36>
 8004d20:	2103      	movs	r1, #3
 8004d22:	2014      	movs	r0, #20
 8004d24:	f000 f8c4 	bl	8004eb0 <mfrc522_set_data>
	}
	else
	{
		mfrc522_clear_data(MFRC522_REG_TX_CONTROL, 0x03);
	}
}
 8004d28:	e003      	b.n	8004d32 <mfrc522_antenna_on+0x36>
		mfrc522_clear_data(MFRC522_REG_TX_CONTROL, 0x03);
 8004d2a:	2103      	movs	r1, #3
 8004d2c:	2014      	movs	r0, #20
 8004d2e:	f000 f8d9 	bl	8004ee4 <mfrc522_clear_data>
}
 8004d32:	bf00      	nop
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <write_regs>:

static void write_regs(uint8_t reg, uint8_t value)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	4603      	mov	r3, r0
 8004d44:	460a      	mov	r2, r1
 8004d46:	71fb      	strb	r3, [r7, #7]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2];
  // format addr
  tx_buff[0] = ((reg << 1) & 0x7E) ;
 8004d4c:	79fb      	ldrb	r3, [r7, #7]
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	733b      	strb	r3, [r7, #12]
  tx_buff[1] = value;
 8004d5a:	79bb      	ldrb	r3, [r7, #6]
 8004d5c:	737b      	strb	r3, [r7, #13]

  while(HAL_SPI_GetState(&mfrc522_spi_cfg) != HAL_SPI_STATE_READY);
 8004d5e:	bf00      	nop
 8004d60:	4810      	ldr	r0, [pc, #64]	; (8004da4 <write_regs+0x68>)
 8004d62:	f7fe fd13 	bl	800378c <HAL_SPI_GetState>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d1f9      	bne.n	8004d60 <write_regs+0x24>
  MFRC522_CS_LOW();
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2110      	movs	r1, #16
 8004d70:	480d      	ldr	r0, [pc, #52]	; (8004da8 <write_regs+0x6c>)
 8004d72:	f7fd f839 	bl	8001de8 <HAL_GPIO_WritePin>
  if(HAL_SPI_Transmit(&mfrc522_spi_cfg, tx_buff, sizeof(tx_buff), MFRC522_TRANSMISSION_TIMEOUT) != HAL_OK)
 8004d76:	f107 010c 	add.w	r1, r7, #12
 8004d7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d7e:	2202      	movs	r2, #2
 8004d80:	4808      	ldr	r0, [pc, #32]	; (8004da4 <write_regs+0x68>)
 8004d82:	f7fe f982 	bl	800308a <HAL_SPI_Transmit>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <write_regs+0x54>
  {
	Error_Handler();
 8004d8c:	f7fb ffd2 	bl	8000d34 <Error_Handler>
  }
  MFRC522_CS_HIGH();
 8004d90:	2201      	movs	r2, #1
 8004d92:	2110      	movs	r1, #16
 8004d94:	4804      	ldr	r0, [pc, #16]	; (8004da8 <write_regs+0x6c>)
 8004d96:	f7fd f827 	bl	8001de8 <HAL_GPIO_WritePin>
}
 8004d9a:	bf00      	nop
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	2000016c 	.word	0x2000016c
 8004da8:	40020000 	.word	0x40020000

08004dac <read_regs>:

static uint8_t read_regs(uint8_t reg)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	4603      	mov	r3, r0
 8004db4:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[1];
  uint8_t rx_buff[2];
  // format addr
  tx_buff[0] = (((reg << 1) & 0x7E) | (0x80)) ;
 8004db6:	79fb      	ldrb	r3, [r7, #7]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	b25b      	sxtb	r3, r3
 8004dbc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004dc0:	b25b      	sxtb	r3, r3
 8004dc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dc6:	b25b      	sxtb	r3, r3
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	733b      	strb	r3, [r7, #12]

  while(HAL_SPI_GetState(&mfrc522_spi_cfg) != HAL_SPI_STATE_READY);
 8004dcc:	bf00      	nop
 8004dce:	4812      	ldr	r0, [pc, #72]	; (8004e18 <read_regs+0x6c>)
 8004dd0:	f7fe fcdc 	bl	800378c <HAL_SPI_GetState>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d1f9      	bne.n	8004dce <read_regs+0x22>
  MFRC522_CS_LOW();
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2110      	movs	r1, #16
 8004dde:	480f      	ldr	r0, [pc, #60]	; (8004e1c <read_regs+0x70>)
 8004de0:	f7fd f802 	bl	8001de8 <HAL_GPIO_WritePin>
  if(HAL_SPI_TransmitReceive(&mfrc522_spi_cfg, tx_buff, rx_buff, 3, MFRC522_TRANSMISSION_TIMEOUT) != HAL_OK)
 8004de4:	f107 0208 	add.w	r2, r7, #8
 8004de8:	f107 010c 	add.w	r1, r7, #12
 8004dec:	f241 3388 	movw	r3, #5000	; 0x1388
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	2303      	movs	r3, #3
 8004df4:	4808      	ldr	r0, [pc, #32]	; (8004e18 <read_regs+0x6c>)
 8004df6:	f7fe fab6 	bl	8003366 <HAL_SPI_TransmitReceive>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <read_regs+0x58>
  {
	Error_Handler();
 8004e00:	f7fb ff98 	bl	8000d34 <Error_Handler>
  }
  MFRC522_CS_HIGH();
 8004e04:	2201      	movs	r2, #1
 8004e06:	2110      	movs	r1, #16
 8004e08:	4804      	ldr	r0, [pc, #16]	; (8004e1c <read_regs+0x70>)
 8004e0a:	f7fc ffed 	bl	8001de8 <HAL_GPIO_WritePin>

  return rx_buff[1];
 8004e0e:	7a7b      	ldrb	r3, [r7, #9]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	2000016c 	.word	0x2000016c
 8004e1c:	40020000 	.word	0x40020000

08004e20 <mfrc522_spi_init>:

static void mfrc522_spi_init(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
  // Enable SPI clock
   MFRC522_SPI_CLK_ENABLE();
 8004e26:	4b0c      	ldr	r3, [pc, #48]	; (8004e58 <mfrc522_spi_init+0x38>)
 8004e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2a:	4a0b      	ldr	r2, [pc, #44]	; (8004e58 <mfrc522_spi_init+0x38>)
 8004e2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e30:	6453      	str	r3, [r2, #68]	; 0x44
 8004e32:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <mfrc522_spi_init+0x38>)
 8004e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e3a:	607b      	str	r3, [r7, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
  if(HAL_SPI_Init(&mfrc522_spi_cfg) != HAL_OK)
 8004e3e:	4807      	ldr	r0, [pc, #28]	; (8004e5c <mfrc522_spi_init+0x3c>)
 8004e40:	f7fe f878 	bl	8002f34 <HAL_SPI_Init>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <mfrc522_spi_init+0x2e>
  {
	// print error log
	Error_Handler();
 8004e4a:	f7fb ff73 	bl	8000d34 <Error_Handler>
  }
}
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	2000016c 	.word	0x2000016c

08004e60 <mfrc522_setup>:
  MFRC522_SPI_CLK_DISABLE();
}


static void mfrc522_setup(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
	mfrc522_power_en(true);
 8004e64:	2001      	movs	r0, #1
 8004e66:	f7ff fdd5 	bl	8004a14 <mfrc522_power_en>

	mfrc522_reset();
 8004e6a:	f7ff ff3f 	bl	8004cec <mfrc522_reset>
	write_regs(MFRC522_REG_T_MODE, 0x8D);
 8004e6e:	218d      	movs	r1, #141	; 0x8d
 8004e70:	202a      	movs	r0, #42	; 0x2a
 8004e72:	f7ff ff63 	bl	8004d3c <write_regs>
	write_regs(MFRC522_REG_T_PRESCALER, 0x3E);
 8004e76:	213e      	movs	r1, #62	; 0x3e
 8004e78:	202b      	movs	r0, #43	; 0x2b
 8004e7a:	f7ff ff5f 	bl	8004d3c <write_regs>
	write_regs(MFRC522_REG_T_RELOAD_L, 30);
 8004e7e:	211e      	movs	r1, #30
 8004e80:	202d      	movs	r0, #45	; 0x2d
 8004e82:	f7ff ff5b 	bl	8004d3c <write_regs>
	write_regs(MFRC522_REG_T_RELOAD_H, 0);
 8004e86:	2100      	movs	r1, #0
 8004e88:	202c      	movs	r0, #44	; 0x2c
 8004e8a:	f7ff ff57 	bl	8004d3c <write_regs>
	write_regs(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain
 8004e8e:	2170      	movs	r1, #112	; 0x70
 8004e90:	2026      	movs	r0, #38	; 0x26
 8004e92:	f7ff ff53 	bl	8004d3c <write_regs>
	write_regs(MFRC522_REG_TX_AUTO, 0x40);
 8004e96:	2140      	movs	r1, #64	; 0x40
 8004e98:	2015      	movs	r0, #21
 8004e9a:	f7ff ff4f 	bl	8004d3c <write_regs>
	write_regs(MFRC522_REG_MODE, 0x3D);
 8004e9e:	213d      	movs	r1, #61	; 0x3d
 8004ea0:	2011      	movs	r0, #17
 8004ea2:	f7ff ff4b 	bl	8004d3c <write_regs>
	mfrc522_antenna_on(true);
 8004ea6:	2001      	movs	r0, #1
 8004ea8:	f7ff ff28 	bl	8004cfc <mfrc522_antenna_on>

}
 8004eac:	bf00      	nop
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <mfrc522_set_data>:

static void mfrc522_set_data(uint8_t reg, uint8_t mask)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	460a      	mov	r2, r1
 8004eba:	71fb      	strb	r3, [r7, #7]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	71bb      	strb	r3, [r7, #6]
	write_regs(reg, read_regs(reg) | mask);
 8004ec0:	79fb      	ldrb	r3, [r7, #7]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff ff72 	bl	8004dac <read_regs>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	461a      	mov	r2, r3
 8004ecc:	79bb      	ldrb	r3, [r7, #6]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	79fb      	ldrb	r3, [r7, #7]
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff ff30 	bl	8004d3c <write_regs>
}
 8004edc:	bf00      	nop
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <mfrc522_clear_data>:

static void mfrc522_clear_data(uint8_t reg, uint8_t mask)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	4603      	mov	r3, r0
 8004eec:	460a      	mov	r2, r1
 8004eee:	71fb      	strb	r3, [r7, #7]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	71bb      	strb	r3, [r7, #6]
	write_regs(reg, read_regs(reg) & (~mask));
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff ff58 	bl	8004dac <read_regs>
 8004efc:	4603      	mov	r3, r0
 8004efe:	b25a      	sxtb	r2, r3
 8004f00:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004f04:	43db      	mvns	r3, r3
 8004f06:	b25b      	sxtb	r3, r3
 8004f08:	4013      	ands	r3, r2
 8004f0a:	b25b      	sxtb	r3, r3
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	79fb      	ldrb	r3, [r7, #7]
 8004f10:	4611      	mov	r1, r2
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff ff12 	bl	8004d3c <write_regs>
}
 8004f18:	bf00      	nop
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <mfrc522_gpio_init>:

static void mfrc522_gpio_init(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08a      	sub	sp, #40	; 0x28
 8004f24:	af00      	add	r7, sp, #0

  //---------------------------------------------------------------------------
  // Step 2: Enable peripherals and GPIO clock
  //---------------------------------------------------------------------------
  // Enable GPIO TX/RX clock
  MFRC522_SPI_CS_CLK_ENABLE();
 8004f26:	4b46      	ldr	r3, [pc, #280]	; (8005040 <mfrc522_gpio_init+0x120>)
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	4a45      	ldr	r2, [pc, #276]	; (8005040 <mfrc522_gpio_init+0x120>)
 8004f2c:	f043 0301 	orr.w	r3, r3, #1
 8004f30:	6313      	str	r3, [r2, #48]	; 0x30
 8004f32:	4b43      	ldr	r3, [pc, #268]	; (8005040 <mfrc522_gpio_init+0x120>)
 8004f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	693b      	ldr	r3, [r7, #16]
  MFRC522_SPI_CLK_CLK_ENABLE();
 8004f3e:	4b40      	ldr	r3, [pc, #256]	; (8005040 <mfrc522_gpio_init+0x120>)
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	4a3f      	ldr	r2, [pc, #252]	; (8005040 <mfrc522_gpio_init+0x120>)
 8004f44:	f043 0301 	orr.w	r3, r3, #1
 8004f48:	6313      	str	r3, [r2, #48]	; 0x30
 8004f4a:	4b3d      	ldr	r3, [pc, #244]	; (8005040 <mfrc522_gpio_init+0x120>)
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
  MFRC522_SPI_MOSI_CLK_ENABLE();
 8004f56:	4b3a      	ldr	r3, [pc, #232]	; (8005040 <mfrc522_gpio_init+0x120>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	4a39      	ldr	r2, [pc, #228]	; (8005040 <mfrc522_gpio_init+0x120>)
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	6313      	str	r3, [r2, #48]	; 0x30
 8004f62:	4b37      	ldr	r3, [pc, #220]	; (8005040 <mfrc522_gpio_init+0x120>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	60bb      	str	r3, [r7, #8]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
  MFRC522_SPI_MISO_CLK_ENABLE();
 8004f6e:	4b34      	ldr	r3, [pc, #208]	; (8005040 <mfrc522_gpio_init+0x120>)
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	4a33      	ldr	r2, [pc, #204]	; (8005040 <mfrc522_gpio_init+0x120>)
 8004f74:	f043 0301 	orr.w	r3, r3, #1
 8004f78:	6313      	str	r3, [r2, #48]	; 0x30
 8004f7a:	4b31      	ldr	r3, [pc, #196]	; (8005040 <mfrc522_gpio_init+0x120>)
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	607b      	str	r3, [r7, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]

  //---------------------------------------------------------------------------
  // Step 3: Configure peripheral GPIO
  //---------------------------------------------------------------------------
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f86:	f107 0314 	add.w	r3, r7, #20
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	605a      	str	r2, [r3, #4]
 8004f90:	609a      	str	r2, [r3, #8]
 8004f92:	60da      	str	r2, [r3, #12]
 8004f94:	611a      	str	r2, [r3, #16]
  HAL_GPIO_WritePin(MFRC522_SPI_CS_GPIO_Port, MFRC522_SPI_CS_Pin, GPIO_PIN_SET);
 8004f96:	2201      	movs	r2, #1
 8004f98:	2110      	movs	r1, #16
 8004f9a:	482a      	ldr	r0, [pc, #168]	; (8005044 <mfrc522_gpio_init+0x124>)
 8004f9c:	f7fc ff24 	bl	8001de8 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = MFRC522_SPI_MOSI_Pin;
 8004fa0:	2380      	movs	r3, #128	; 0x80
 8004fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004fac:	2302      	movs	r3, #2
 8004fae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004fb0:	2305      	movs	r3, #5
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFRC522_SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8004fb4:	f107 0314 	add.w	r3, r7, #20
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4822      	ldr	r0, [pc, #136]	; (8005044 <mfrc522_gpio_init+0x124>)
 8004fbc:	f7fc fd6a 	bl	8001a94 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = MFRC522_SPI_MISO_Pin;
 8004fc0:	2340      	movs	r3, #64	; 0x40
 8004fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004fcc:	2302      	movs	r3, #2
 8004fce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004fd0:	2305      	movs	r3, #5
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFRC522_SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8004fd4:	f107 0314 	add.w	r3, r7, #20
 8004fd8:	4619      	mov	r1, r3
 8004fda:	481a      	ldr	r0, [pc, #104]	; (8005044 <mfrc522_gpio_init+0x124>)
 8004fdc:	f7fc fd5a 	bl	8001a94 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = MFRC522_SPI_CLK_Pin;
 8004fe0:	2320      	movs	r3, #32
 8004fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004fec:	2302      	movs	r3, #2
 8004fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004ff0:	2305      	movs	r3, #5
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFRC522_SPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8004ff4:	f107 0314 	add.w	r3, r7, #20
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4812      	ldr	r0, [pc, #72]	; (8005044 <mfrc522_gpio_init+0x124>)
 8004ffc:	f7fc fd4a 	bl	8001a94 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = MFRC522_SPI_CS_Pin;
 8005000:	2310      	movs	r3, #16
 8005002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005004:	2301      	movs	r3, #1
 8005006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005008:	2300      	movs	r3, #0
 800500a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800500c:	2302      	movs	r3, #2
 800500e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MFRC522_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8005010:	f107 0314 	add.w	r3, r7, #20
 8005014:	4619      	mov	r1, r3
 8005016:	480b      	ldr	r0, [pc, #44]	; (8005044 <mfrc522_gpio_init+0x124>)
 8005018:	f7fc fd3c 	bl	8001a94 <HAL_GPIO_Init>

  // Configure MFRC522 POWER EN Pin
  GPIO_InitStruct.Pin = MFRC522_POWER_EN_Pin;
 800501c:	2310      	movs	r3, #16
 800501e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005020:	2301      	movs	r3, #1
 8005022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005024:	2301      	movs	r3, #1
 8005026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005028:	2302      	movs	r3, #2
 800502a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MFRC522_POWER_EN_GPIO_Port, &GPIO_InitStruct);
 800502c:	f107 0314 	add.w	r3, r7, #20
 8005030:	4619      	mov	r1, r3
 8005032:	4805      	ldr	r0, [pc, #20]	; (8005048 <mfrc522_gpio_init+0x128>)
 8005034:	f7fc fd2e 	bl	8001a94 <HAL_GPIO_Init>

}
 8005038:	bf00      	nop
 800503a:	3728      	adds	r7, #40	; 0x28
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40023800 	.word	0x40023800
 8005044:	40020000 	.word	0x40020000
 8005048:	40020800 	.word	0x40020800

0800504c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005050:	bf00      	nop
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
	...

0800505c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005062:	f3ef 8305 	mrs	r3, IPSR
 8005066:	60bb      	str	r3, [r7, #8]
  return(result);
 8005068:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10f      	bne.n	800508e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800506e:	f3ef 8310 	mrs	r3, PRIMASK
 8005072:	607b      	str	r3, [r7, #4]
  return(result);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d105      	bne.n	8005086 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800507a:	f3ef 8311 	mrs	r3, BASEPRI
 800507e:	603b      	str	r3, [r7, #0]
  return(result);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <osKernelInitialize+0x3a>
 8005086:	4b0e      	ldr	r3, [pc, #56]	; (80050c0 <osKernelInitialize+0x64>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d103      	bne.n	8005096 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800508e:	f06f 0305 	mvn.w	r3, #5
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e00c      	b.n	80050b0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005096:	4b0a      	ldr	r3, [pc, #40]	; (80050c0 <osKernelInitialize+0x64>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d105      	bne.n	80050aa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800509e:	4b08      	ldr	r3, [pc, #32]	; (80050c0 <osKernelInitialize+0x64>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	e002      	b.n	80050b0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80050aa:	f04f 33ff 	mov.w	r3, #4294967295
 80050ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80050b0:	68fb      	ldr	r3, [r7, #12]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	200002a0 	.word	0x200002a0

080050c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050ca:	f3ef 8305 	mrs	r3, IPSR
 80050ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80050d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10f      	bne.n	80050f6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050d6:	f3ef 8310 	mrs	r3, PRIMASK
 80050da:	607b      	str	r3, [r7, #4]
  return(result);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d105      	bne.n	80050ee <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80050e2:	f3ef 8311 	mrs	r3, BASEPRI
 80050e6:	603b      	str	r3, [r7, #0]
  return(result);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d007      	beq.n	80050fe <osKernelStart+0x3a>
 80050ee:	4b0f      	ldr	r3, [pc, #60]	; (800512c <osKernelStart+0x68>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d103      	bne.n	80050fe <osKernelStart+0x3a>
    stat = osErrorISR;
 80050f6:	f06f 0305 	mvn.w	r3, #5
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	e010      	b.n	8005120 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80050fe:	4b0b      	ldr	r3, [pc, #44]	; (800512c <osKernelStart+0x68>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d109      	bne.n	800511a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005106:	f7ff ffa1 	bl	800504c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800510a:	4b08      	ldr	r3, [pc, #32]	; (800512c <osKernelStart+0x68>)
 800510c:	2202      	movs	r2, #2
 800510e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005110:	f001 fd34 	bl	8006b7c <vTaskStartScheduler>
      stat = osOK;
 8005114:	2300      	movs	r3, #0
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	e002      	b.n	8005120 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800511a:	f04f 33ff 	mov.w	r3, #4294967295
 800511e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005120:	68fb      	ldr	r3, [r7, #12]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	200002a0 	.word	0x200002a0

08005130 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005130:	b580      	push	{r7, lr}
 8005132:	b090      	sub	sp, #64	; 0x40
 8005134:	af04      	add	r7, sp, #16
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005140:	f3ef 8305 	mrs	r3, IPSR
 8005144:	61fb      	str	r3, [r7, #28]
  return(result);
 8005146:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005148:	2b00      	cmp	r3, #0
 800514a:	f040 808f 	bne.w	800526c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800514e:	f3ef 8310 	mrs	r3, PRIMASK
 8005152:	61bb      	str	r3, [r7, #24]
  return(result);
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d105      	bne.n	8005166 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800515a:	f3ef 8311 	mrs	r3, BASEPRI
 800515e:	617b      	str	r3, [r7, #20]
  return(result);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <osThreadNew+0x3e>
 8005166:	4b44      	ldr	r3, [pc, #272]	; (8005278 <osThreadNew+0x148>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b02      	cmp	r3, #2
 800516c:	d07e      	beq.n	800526c <osThreadNew+0x13c>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d07b      	beq.n	800526c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005174:	2380      	movs	r3, #128	; 0x80
 8005176:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005178:	2318      	movs	r3, #24
 800517a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800517c:	2300      	movs	r3, #0
 800517e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005180:	f04f 33ff 	mov.w	r3, #4294967295
 8005184:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d045      	beq.n	8005218 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <osThreadNew+0x6a>
        name = attr->name;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d008      	beq.n	80051c0 <osThreadNew+0x90>
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	2b38      	cmp	r3, #56	; 0x38
 80051b2:	d805      	bhi.n	80051c0 <osThreadNew+0x90>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <osThreadNew+0x94>
        return (NULL);
 80051c0:	2300      	movs	r3, #0
 80051c2:	e054      	b.n	800526e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	089b      	lsrs	r3, r3, #2
 80051d2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00e      	beq.n	80051fa <osThreadNew+0xca>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	2b5b      	cmp	r3, #91	; 0x5b
 80051e2:	d90a      	bls.n	80051fa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d006      	beq.n	80051fa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <osThreadNew+0xca>
        mem = 1;
 80051f4:	2301      	movs	r3, #1
 80051f6:	623b      	str	r3, [r7, #32]
 80051f8:	e010      	b.n	800521c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10c      	bne.n	800521c <osThreadNew+0xec>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d108      	bne.n	800521c <osThreadNew+0xec>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d104      	bne.n	800521c <osThreadNew+0xec>
          mem = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	623b      	str	r3, [r7, #32]
 8005216:	e001      	b.n	800521c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005218:	2300      	movs	r3, #0
 800521a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d110      	bne.n	8005244 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800522a:	9202      	str	r2, [sp, #8]
 800522c:	9301      	str	r3, [sp, #4]
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f001 fac3 	bl	80067c4 <xTaskCreateStatic>
 800523e:	4603      	mov	r3, r0
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	e013      	b.n	800526c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d110      	bne.n	800526c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524c:	b29a      	uxth	r2, r3
 800524e:	f107 0310 	add.w	r3, r7, #16
 8005252:	9301      	str	r3, [sp, #4]
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f001 fb11 	bl	8006884 <xTaskCreate>
 8005262:	4603      	mov	r3, r0
 8005264:	2b01      	cmp	r3, #1
 8005266:	d001      	beq.n	800526c <osThreadNew+0x13c>
          hTask = NULL;
 8005268:	2300      	movs	r3, #0
 800526a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800526c:	693b      	ldr	r3, [r7, #16]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3730      	adds	r7, #48	; 0x30
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	200002a0 	.word	0x200002a0

0800527c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005284:	f3ef 8305 	mrs	r3, IPSR
 8005288:	613b      	str	r3, [r7, #16]
  return(result);
 800528a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10f      	bne.n	80052b0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005290:	f3ef 8310 	mrs	r3, PRIMASK
 8005294:	60fb      	str	r3, [r7, #12]
  return(result);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d105      	bne.n	80052a8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800529c:	f3ef 8311 	mrs	r3, BASEPRI
 80052a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d007      	beq.n	80052b8 <osDelay+0x3c>
 80052a8:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <osDelay+0x58>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d103      	bne.n	80052b8 <osDelay+0x3c>
    stat = osErrorISR;
 80052b0:	f06f 0305 	mvn.w	r3, #5
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	e007      	b.n	80052c8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d002      	beq.n	80052c8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f001 fc24 	bl	8006b10 <vTaskDelay>
    }
  }

  return (stat);
 80052c8:	697b      	ldr	r3, [r7, #20]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	200002a0 	.word	0x200002a0

080052d8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08c      	sub	sp, #48	; 0x30
 80052dc:	af02      	add	r7, sp, #8
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80052e4:	2300      	movs	r3, #0
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052e8:	f3ef 8305 	mrs	r3, IPSR
 80052ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80052ee:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f040 8087 	bne.w	8005404 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052f6:	f3ef 8310 	mrs	r3, PRIMASK
 80052fa:	617b      	str	r3, [r7, #20]
  return(result);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d105      	bne.n	800530e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005302:	f3ef 8311 	mrs	r3, BASEPRI
 8005306:	613b      	str	r3, [r7, #16]
  return(result);
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <osSemaphoreNew+0x3e>
 800530e:	4b40      	ldr	r3, [pc, #256]	; (8005410 <osSemaphoreNew+0x138>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b02      	cmp	r3, #2
 8005314:	d076      	beq.n	8005404 <osSemaphoreNew+0x12c>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d073      	beq.n	8005404 <osSemaphoreNew+0x12c>
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	429a      	cmp	r2, r3
 8005322:	d86f      	bhi.n	8005404 <osSemaphoreNew+0x12c>
    mem = -1;
 8005324:	f04f 33ff 	mov.w	r3, #4294967295
 8005328:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d015      	beq.n	800535c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d006      	beq.n	8005346 <osSemaphoreNew+0x6e>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	2b4f      	cmp	r3, #79	; 0x4f
 800533e:	d902      	bls.n	8005346 <osSemaphoreNew+0x6e>
        mem = 1;
 8005340:	2301      	movs	r3, #1
 8005342:	623b      	str	r3, [r7, #32]
 8005344:	e00c      	b.n	8005360 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d108      	bne.n	8005360 <osSemaphoreNew+0x88>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d104      	bne.n	8005360 <osSemaphoreNew+0x88>
          mem = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	623b      	str	r3, [r7, #32]
 800535a:	e001      	b.n	8005360 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005366:	d04d      	beq.n	8005404 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d129      	bne.n	80053c2 <osSemaphoreNew+0xea>
        if (mem == 1) {
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d10b      	bne.n	800538c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	2303      	movs	r3, #3
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	4613      	mov	r3, r2
 800537e:	2200      	movs	r2, #0
 8005380:	2100      	movs	r1, #0
 8005382:	2001      	movs	r0, #1
 8005384:	f000 fa56 	bl	8005834 <xQueueGenericCreateStatic>
 8005388:	6278      	str	r0, [r7, #36]	; 0x24
 800538a:	e005      	b.n	8005398 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800538c:	2203      	movs	r2, #3
 800538e:	2100      	movs	r1, #0
 8005390:	2001      	movs	r0, #1
 8005392:	f000 facc 	bl	800592e <xQueueGenericCreate>
 8005396:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	2b00      	cmp	r3, #0
 800539c:	d022      	beq.n	80053e4 <osSemaphoreNew+0x10c>
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01f      	beq.n	80053e4 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80053a4:	2300      	movs	r3, #0
 80053a6:	2200      	movs	r2, #0
 80053a8:	2100      	movs	r1, #0
 80053aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053ac:	f000 fb92 	bl	8005ad4 <xQueueGenericSend>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d016      	beq.n	80053e4 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80053b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053b8:	f001 f831 	bl	800641e <vQueueDelete>
            hSemaphore = NULL;
 80053bc:	2300      	movs	r3, #0
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
 80053c0:	e010      	b.n	80053e4 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d108      	bne.n	80053da <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	461a      	mov	r2, r3
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 fb10 	bl	80059f6 <xQueueCreateCountingSemaphoreStatic>
 80053d6:	6278      	str	r0, [r7, #36]	; 0x24
 80053d8:	e004      	b.n	80053e4 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80053da:	68b9      	ldr	r1, [r7, #8]
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 fb43 	bl	8005a68 <xQueueCreateCountingSemaphore>
 80053e2:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00c      	beq.n	8005404 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <osSemaphoreNew+0x120>
          name = attr->name;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	61fb      	str	r3, [r7, #28]
 80053f6:	e001      	b.n	80053fc <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80053fc:	69f9      	ldr	r1, [r7, #28]
 80053fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005400:	f001 f95a 	bl	80066b8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005406:	4618      	mov	r0, r3
 8005408:	3728      	adds	r7, #40	; 0x28
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	200002a0 	.word	0x200002a0

08005414 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005422:	2300      	movs	r3, #0
 8005424:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d103      	bne.n	8005434 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800542c:	f06f 0303 	mvn.w	r3, #3
 8005430:	61fb      	str	r3, [r7, #28]
 8005432:	e04b      	b.n	80054cc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005434:	f3ef 8305 	mrs	r3, IPSR
 8005438:	617b      	str	r3, [r7, #20]
  return(result);
 800543a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10f      	bne.n	8005460 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005440:	f3ef 8310 	mrs	r3, PRIMASK
 8005444:	613b      	str	r3, [r7, #16]
  return(result);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d105      	bne.n	8005458 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800544c:	f3ef 8311 	mrs	r3, BASEPRI
 8005450:	60fb      	str	r3, [r7, #12]
  return(result);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d026      	beq.n	80054a6 <osSemaphoreAcquire+0x92>
 8005458:	4b1f      	ldr	r3, [pc, #124]	; (80054d8 <osSemaphoreAcquire+0xc4>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b02      	cmp	r3, #2
 800545e:	d122      	bne.n	80054a6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8005466:	f06f 0303 	mvn.w	r3, #3
 800546a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800546c:	e02d      	b.n	80054ca <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800546e:	2300      	movs	r3, #0
 8005470:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005472:	f107 0308 	add.w	r3, r7, #8
 8005476:	461a      	mov	r2, r3
 8005478:	2100      	movs	r1, #0
 800547a:	69b8      	ldr	r0, [r7, #24]
 800547c:	f000 ff4c 	bl	8006318 <xQueueReceiveFromISR>
 8005480:	4603      	mov	r3, r0
 8005482:	2b01      	cmp	r3, #1
 8005484:	d003      	beq.n	800548e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8005486:	f06f 0302 	mvn.w	r3, #2
 800548a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800548c:	e01d      	b.n	80054ca <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01a      	beq.n	80054ca <osSemaphoreAcquire+0xb6>
 8005494:	4b11      	ldr	r3, [pc, #68]	; (80054dc <osSemaphoreAcquire+0xc8>)
 8005496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80054a4:	e011      	b.n	80054ca <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80054a6:	6839      	ldr	r1, [r7, #0]
 80054a8:	69b8      	ldr	r0, [r7, #24]
 80054aa:	f000 fe25 	bl	80060f8 <xQueueSemaphoreTake>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d00b      	beq.n	80054cc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80054ba:	f06f 0301 	mvn.w	r3, #1
 80054be:	61fb      	str	r3, [r7, #28]
 80054c0:	e004      	b.n	80054cc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80054c2:	f06f 0302 	mvn.w	r3, #2
 80054c6:	61fb      	str	r3, [r7, #28]
 80054c8:	e000      	b.n	80054cc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80054ca:	bf00      	nop
      }
    }
  }

  return (stat);
 80054cc:	69fb      	ldr	r3, [r7, #28]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3720      	adds	r7, #32
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	200002a0 	.word	0x200002a0
 80054dc:	e000ed04 	.word	0xe000ed04

080054e0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d103      	bne.n	80054fe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80054f6:	f06f 0303 	mvn.w	r3, #3
 80054fa:	61fb      	str	r3, [r7, #28]
 80054fc:	e03e      	b.n	800557c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054fe:	f3ef 8305 	mrs	r3, IPSR
 8005502:	617b      	str	r3, [r7, #20]
  return(result);
 8005504:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10f      	bne.n	800552a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800550a:	f3ef 8310 	mrs	r3, PRIMASK
 800550e:	613b      	str	r3, [r7, #16]
  return(result);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d105      	bne.n	8005522 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005516:	f3ef 8311 	mrs	r3, BASEPRI
 800551a:	60fb      	str	r3, [r7, #12]
  return(result);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d01e      	beq.n	8005560 <osSemaphoreRelease+0x80>
 8005522:	4b19      	ldr	r3, [pc, #100]	; (8005588 <osSemaphoreRelease+0xa8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b02      	cmp	r3, #2
 8005528:	d11a      	bne.n	8005560 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800552a:	2300      	movs	r3, #0
 800552c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800552e:	f107 0308 	add.w	r3, r7, #8
 8005532:	4619      	mov	r1, r3
 8005534:	69b8      	ldr	r0, [r7, #24]
 8005536:	f000 fc6b 	bl	8005e10 <xQueueGiveFromISR>
 800553a:	4603      	mov	r3, r0
 800553c:	2b01      	cmp	r3, #1
 800553e:	d003      	beq.n	8005548 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005540:	f06f 0302 	mvn.w	r3, #2
 8005544:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005546:	e018      	b.n	800557a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d015      	beq.n	800557a <osSemaphoreRelease+0x9a>
 800554e:	4b0f      	ldr	r3, [pc, #60]	; (800558c <osSemaphoreRelease+0xac>)
 8005550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800555e:	e00c      	b.n	800557a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005560:	2300      	movs	r3, #0
 8005562:	2200      	movs	r2, #0
 8005564:	2100      	movs	r1, #0
 8005566:	69b8      	ldr	r0, [r7, #24]
 8005568:	f000 fab4 	bl	8005ad4 <xQueueGenericSend>
 800556c:	4603      	mov	r3, r0
 800556e:	2b01      	cmp	r3, #1
 8005570:	d004      	beq.n	800557c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8005572:	f06f 0302 	mvn.w	r3, #2
 8005576:	61fb      	str	r3, [r7, #28]
 8005578:	e000      	b.n	800557c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800557a:	bf00      	nop
    }
  }

  return (stat);
 800557c:	69fb      	ldr	r3, [r7, #28]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3720      	adds	r7, #32
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	200002a0 	.word	0x200002a0
 800558c:	e000ed04 	.word	0xe000ed04

08005590 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4a07      	ldr	r2, [pc, #28]	; (80055bc <vApplicationGetIdleTaskMemory+0x2c>)
 80055a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	4a06      	ldr	r2, [pc, #24]	; (80055c0 <vApplicationGetIdleTaskMemory+0x30>)
 80055a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2280      	movs	r2, #128	; 0x80
 80055ac:	601a      	str	r2, [r3, #0]
}
 80055ae:	bf00      	nop
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	200002a4 	.word	0x200002a4
 80055c0:	20000300 	.word	0x20000300

080055c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4a07      	ldr	r2, [pc, #28]	; (80055f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80055d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	4a06      	ldr	r2, [pc, #24]	; (80055f4 <vApplicationGetTimerTaskMemory+0x30>)
 80055da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055e2:	601a      	str	r2, [r3, #0]
}
 80055e4:	bf00      	nop
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	20000500 	.word	0x20000500
 80055f4:	2000055c 	.word	0x2000055c

080055f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f103 0208 	add.w	r2, r3, #8
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f04f 32ff 	mov.w	r2, #4294967295
 8005610:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f103 0208 	add.w	r2, r3, #8
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f103 0208 	add.w	r2, r3, #8
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	601a      	str	r2, [r3, #0]
}
 800568e:	bf00      	nop
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800569a:	b480      	push	{r7}
 800569c:	b085      	sub	sp, #20
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b0:	d103      	bne.n	80056ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	e00c      	b.n	80056d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3308      	adds	r3, #8
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	e002      	b.n	80056c8 <vListInsert+0x2e>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d2f6      	bcs.n	80056c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	1c5a      	adds	r2, r3, #1
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	601a      	str	r2, [r3, #0]
}
 8005700:	bf00      	nop
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6892      	ldr	r2, [r2, #8]
 8005722:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6852      	ldr	r2, [r2, #4]
 800572c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	429a      	cmp	r2, r3
 8005736:	d103      	bne.n	8005740 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	1e5a      	subs	r2, r3, #1
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10b      	bne.n	800578c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	b672      	cpsid	i
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	b662      	cpsie	i
 8005788:	60bb      	str	r3, [r7, #8]
 800578a:	e7fe      	b.n	800578a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800578c:	f002 fc84 	bl	8008098 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005798:	68f9      	ldr	r1, [r7, #12]
 800579a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800579c:	fb01 f303 	mul.w	r3, r1, r3
 80057a0:	441a      	add	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057bc:	3b01      	subs	r3, #1
 80057be:	68f9      	ldr	r1, [r7, #12]
 80057c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057c2:	fb01 f303 	mul.w	r3, r1, r3
 80057c6:	441a      	add	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	22ff      	movs	r2, #255	; 0xff
 80057d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	22ff      	movs	r2, #255	; 0xff
 80057d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d114      	bne.n	800580c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d01a      	beq.n	8005820 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3310      	adds	r3, #16
 80057ee:	4618      	mov	r0, r3
 80057f0:	f001 fc52 	bl	8007098 <xTaskRemoveFromEventList>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d012      	beq.n	8005820 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80057fa:	4b0d      	ldr	r3, [pc, #52]	; (8005830 <xQueueGenericReset+0xd0>)
 80057fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	e009      	b.n	8005820 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	3310      	adds	r3, #16
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff fef1 	bl	80055f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3324      	adds	r3, #36	; 0x24
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff feec 	bl	80055f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005820:	f002 fc6c 	bl	80080fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005824:	2301      	movs	r3, #1
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	e000ed04 	.word	0xe000ed04

08005834 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005834:	b580      	push	{r7, lr}
 8005836:	b08e      	sub	sp, #56	; 0x38
 8005838:	af02      	add	r7, sp, #8
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10b      	bne.n	8005860 <xQueueGenericCreateStatic+0x2c>
 8005848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584c:	b672      	cpsid	i
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	b662      	cpsie	i
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28
 800585e:	e7fe      	b.n	800585e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10b      	bne.n	800587e <xQueueGenericCreateStatic+0x4a>
 8005866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586a:	b672      	cpsid	i
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	b662      	cpsie	i
 800587a:	627b      	str	r3, [r7, #36]	; 0x24
 800587c:	e7fe      	b.n	800587c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <xQueueGenericCreateStatic+0x56>
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <xQueueGenericCreateStatic+0x5a>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <xQueueGenericCreateStatic+0x5c>
 800588e:	2300      	movs	r3, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10b      	bne.n	80058ac <xQueueGenericCreateStatic+0x78>
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	b672      	cpsid	i
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	b662      	cpsie	i
 80058a8:	623b      	str	r3, [r7, #32]
 80058aa:	e7fe      	b.n	80058aa <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <xQueueGenericCreateStatic+0x84>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <xQueueGenericCreateStatic+0x88>
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <xQueueGenericCreateStatic+0x8a>
 80058bc:	2300      	movs	r3, #0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10b      	bne.n	80058da <xQueueGenericCreateStatic+0xa6>
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	b672      	cpsid	i
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	b662      	cpsie	i
 80058d6:	61fb      	str	r3, [r7, #28]
 80058d8:	e7fe      	b.n	80058d8 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058da:	2350      	movs	r3, #80	; 0x50
 80058dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2b50      	cmp	r3, #80	; 0x50
 80058e2:	d00b      	beq.n	80058fc <xQueueGenericCreateStatic+0xc8>
 80058e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e8:	b672      	cpsid	i
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	b662      	cpsie	i
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	e7fe      	b.n	80058fa <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80058fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00d      	beq.n	8005924 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005910:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	4613      	mov	r3, r2
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	68b9      	ldr	r1, [r7, #8]
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 f846 	bl	80059b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005926:	4618      	mov	r0, r3
 8005928:	3730      	adds	r7, #48	; 0x30
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800592e:	b580      	push	{r7, lr}
 8005930:	b08a      	sub	sp, #40	; 0x28
 8005932:	af02      	add	r7, sp, #8
 8005934:	60f8      	str	r0, [r7, #12]
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	4613      	mov	r3, r2
 800593a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10b      	bne.n	800595a <xQueueGenericCreate+0x2c>
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	b672      	cpsid	i
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	b662      	cpsie	i
 8005956:	613b      	str	r3, [r7, #16]
 8005958:	e7fe      	b.n	8005958 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d102      	bne.n	8005966 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005960:	2300      	movs	r3, #0
 8005962:	61fb      	str	r3, [r7, #28]
 8005964:	e004      	b.n	8005970 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	fb02 f303 	mul.w	r3, r2, r3
 800596e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	3350      	adds	r3, #80	; 0x50
 8005974:	4618      	mov	r0, r3
 8005976:	f002 fcb1 	bl	80082dc <pvPortMalloc>
 800597a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d011      	beq.n	80059a6 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	3350      	adds	r3, #80	; 0x50
 800598a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005994:	79fa      	ldrb	r2, [r7, #7]
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	4613      	mov	r3, r2
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	68b9      	ldr	r1, [r7, #8]
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 f805 	bl	80059b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059a6:	69bb      	ldr	r3, [r7, #24]
	}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3720      	adds	r7, #32
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d103      	bne.n	80059cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	e002      	b.n	80059d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059de:	2101      	movs	r1, #1
 80059e0:	69b8      	ldr	r0, [r7, #24]
 80059e2:	f7ff febd 	bl	8005760 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	78fa      	ldrb	r2, [r7, #3]
 80059ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b08a      	sub	sp, #40	; 0x28
 80059fa:	af02      	add	r7, sp, #8
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10b      	bne.n	8005a20 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8005a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0c:	b672      	cpsid	i
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	b662      	cpsie	i
 8005a1c:	61bb      	str	r3, [r7, #24]
 8005a1e:	e7fe      	b.n	8005a1e <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d90b      	bls.n	8005a40 <xQueueCreateCountingSemaphoreStatic+0x4a>
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	b672      	cpsid	i
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	b662      	cpsie	i
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	e7fe      	b.n	8005a3e <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005a40:	2302      	movs	r3, #2
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	2100      	movs	r1, #0
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f7ff fef2 	bl	8005834 <xQueueGenericCreateStatic>
 8005a50:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005a5e:	69fb      	ldr	r3, [r7, #28]
	}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3720      	adds	r7, #32
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10b      	bne.n	8005a90 <xQueueCreateCountingSemaphore+0x28>
 8005a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7c:	b672      	cpsid	i
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	b662      	cpsie	i
 8005a8c:	613b      	str	r3, [r7, #16]
 8005a8e:	e7fe      	b.n	8005a8e <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d90b      	bls.n	8005ab0 <xQueueCreateCountingSemaphore+0x48>
 8005a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9c:	b672      	cpsid	i
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	b662      	cpsie	i
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	e7fe      	b.n	8005aae <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7ff ff3a 	bl	800592e <xQueueGenericCreate>
 8005aba:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005ac8:	697b      	ldr	r3, [r7, #20]
	}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b08e      	sub	sp, #56	; 0x38
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10b      	bne.n	8005b08 <xQueueGenericSend+0x34>
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	b672      	cpsid	i
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	b662      	cpsie	i
 8005b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b06:	e7fe      	b.n	8005b06 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d103      	bne.n	8005b16 <xQueueGenericSend+0x42>
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <xQueueGenericSend+0x46>
 8005b16:	2301      	movs	r3, #1
 8005b18:	e000      	b.n	8005b1c <xQueueGenericSend+0x48>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10b      	bne.n	8005b38 <xQueueGenericSend+0x64>
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	b672      	cpsid	i
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	b662      	cpsie	i
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
 8005b36:	e7fe      	b.n	8005b36 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d103      	bne.n	8005b46 <xQueueGenericSend+0x72>
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <xQueueGenericSend+0x76>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <xQueueGenericSend+0x78>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10b      	bne.n	8005b68 <xQueueGenericSend+0x94>
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	b672      	cpsid	i
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	b662      	cpsie	i
 8005b64:	623b      	str	r3, [r7, #32]
 8005b66:	e7fe      	b.n	8005b66 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b68:	f001 fc54 	bl	8007414 <xTaskGetSchedulerState>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d102      	bne.n	8005b78 <xQueueGenericSend+0xa4>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <xQueueGenericSend+0xa8>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e000      	b.n	8005b7e <xQueueGenericSend+0xaa>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10b      	bne.n	8005b9a <xQueueGenericSend+0xc6>
 8005b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b86:	b672      	cpsid	i
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	b662      	cpsie	i
 8005b96:	61fb      	str	r3, [r7, #28]
 8005b98:	e7fe      	b.n	8005b98 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b9a:	f002 fa7d 	bl	8008098 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d302      	bcc.n	8005bb0 <xQueueGenericSend+0xdc>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d129      	bne.n	8005c04 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bb6:	f000 fc6e 	bl	8006496 <prvCopyDataToQueue>
 8005bba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d010      	beq.n	8005be6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	3324      	adds	r3, #36	; 0x24
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f001 fa65 	bl	8007098 <xTaskRemoveFromEventList>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d013      	beq.n	8005bfc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005bd4:	4b3f      	ldr	r3, [pc, #252]	; (8005cd4 <xQueueGenericSend+0x200>)
 8005bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	e00a      	b.n	8005bfc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d007      	beq.n	8005bfc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005bec:	4b39      	ldr	r3, [pc, #228]	; (8005cd4 <xQueueGenericSend+0x200>)
 8005bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005bfc:	f002 fa7e 	bl	80080fc <vPortExitCritical>
				return pdPASS;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e063      	b.n	8005ccc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d103      	bne.n	8005c12 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c0a:	f002 fa77 	bl	80080fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	e05c      	b.n	8005ccc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d106      	bne.n	8005c26 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c18:	f107 0314 	add.w	r3, r7, #20
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f001 fa9f 	bl	8007160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c22:	2301      	movs	r3, #1
 8005c24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c26:	f002 fa69 	bl	80080fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c2a:	f001 f80f 	bl	8006c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c2e:	f002 fa33 	bl	8008098 <vPortEnterCritical>
 8005c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c38:	b25b      	sxtb	r3, r3
 8005c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3e:	d103      	bne.n	8005c48 <xQueueGenericSend+0x174>
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c4e:	b25b      	sxtb	r3, r3
 8005c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c54:	d103      	bne.n	8005c5e <xQueueGenericSend+0x18a>
 8005c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c5e:	f002 fa4d 	bl	80080fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c62:	1d3a      	adds	r2, r7, #4
 8005c64:	f107 0314 	add.w	r3, r7, #20
 8005c68:	4611      	mov	r1, r2
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f001 fa8e 	bl	800718c <xTaskCheckForTimeOut>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d124      	bne.n	8005cc0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c78:	f000 fd05 	bl	8006686 <prvIsQueueFull>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d018      	beq.n	8005cb4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	3310      	adds	r3, #16
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	4611      	mov	r1, r2
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f001 f9b2 	bl	8006ff4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c92:	f000 fc90 	bl	80065b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c96:	f000 ffe7 	bl	8006c68 <xTaskResumeAll>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f47f af7c 	bne.w	8005b9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005ca2:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <xQueueGenericSend+0x200>)
 8005ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	e772      	b.n	8005b9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cb6:	f000 fc7e 	bl	80065b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cba:	f000 ffd5 	bl	8006c68 <xTaskResumeAll>
 8005cbe:	e76c      	b.n	8005b9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cc2:	f000 fc78 	bl	80065b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cc6:	f000 ffcf 	bl	8006c68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005cca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3738      	adds	r7, #56	; 0x38
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	e000ed04 	.word	0xe000ed04

08005cd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08e      	sub	sp, #56	; 0x38
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
 8005ce4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10b      	bne.n	8005d08 <xQueueGenericSendFromISR+0x30>
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	b672      	cpsid	i
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	b662      	cpsie	i
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
 8005d06:	e7fe      	b.n	8005d06 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d103      	bne.n	8005d16 <xQueueGenericSendFromISR+0x3e>
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <xQueueGenericSendFromISR+0x42>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <xQueueGenericSendFromISR+0x44>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10b      	bne.n	8005d38 <xQueueGenericSendFromISR+0x60>
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	b672      	cpsid	i
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	b662      	cpsie	i
 8005d34:	623b      	str	r3, [r7, #32]
 8005d36:	e7fe      	b.n	8005d36 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d103      	bne.n	8005d46 <xQueueGenericSendFromISR+0x6e>
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d101      	bne.n	8005d4a <xQueueGenericSendFromISR+0x72>
 8005d46:	2301      	movs	r3, #1
 8005d48:	e000      	b.n	8005d4c <xQueueGenericSendFromISR+0x74>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10b      	bne.n	8005d68 <xQueueGenericSendFromISR+0x90>
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	b672      	cpsid	i
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	b662      	cpsie	i
 8005d64:	61fb      	str	r3, [r7, #28]
 8005d66:	e7fe      	b.n	8005d66 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d68:	f002 fa76 	bl	8008258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d6c:	f3ef 8211 	mrs	r2, BASEPRI
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	b672      	cpsid	i
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	b662      	cpsie	i
 8005d84:	61ba      	str	r2, [r7, #24]
 8005d86:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d88:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d302      	bcc.n	8005d9e <xQueueGenericSendFromISR+0xc6>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d12c      	bne.n	8005df8 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005da4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dae:	f000 fb72 	bl	8006496 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005db2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dba:	d112      	bne.n	8005de2 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d016      	beq.n	8005df2 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc6:	3324      	adds	r3, #36	; 0x24
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f001 f965 	bl	8007098 <xTaskRemoveFromEventList>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00e      	beq.n	8005df2 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00b      	beq.n	8005df2 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	e007      	b.n	8005df2 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005de2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005de6:	3301      	adds	r3, #1
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	b25a      	sxtb	r2, r3
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005df2:	2301      	movs	r3, #1
 8005df4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005df6:	e001      	b.n	8005dfc <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8005dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3738      	adds	r7, #56	; 0x38
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08e      	sub	sp, #56	; 0x38
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10b      	bne.n	8005e3c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e28:	b672      	cpsid	i
 8005e2a:	f383 8811 	msr	BASEPRI, r3
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	b662      	cpsie	i
 8005e38:	623b      	str	r3, [r7, #32]
 8005e3a:	e7fe      	b.n	8005e3a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00b      	beq.n	8005e5c <xQueueGiveFromISR+0x4c>
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	b672      	cpsid	i
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	b662      	cpsie	i
 8005e58:	61fb      	str	r3, [r7, #28]
 8005e5a:	e7fe      	b.n	8005e5a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d103      	bne.n	8005e6c <xQueueGiveFromISR+0x5c>
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <xQueueGiveFromISR+0x60>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e000      	b.n	8005e72 <xQueueGiveFromISR+0x62>
 8005e70:	2300      	movs	r3, #0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10b      	bne.n	8005e8e <xQueueGiveFromISR+0x7e>
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	b672      	cpsid	i
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	b662      	cpsie	i
 8005e8a:	61bb      	str	r3, [r7, #24]
 8005e8c:	e7fe      	b.n	8005e8c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e8e:	f002 f9e3 	bl	8008258 <vPortValidateInterruptPriority>
	__asm volatile
 8005e92:	f3ef 8211 	mrs	r2, BASEPRI
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	b672      	cpsid	i
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	b662      	cpsie	i
 8005eaa:	617a      	str	r2, [r7, #20]
 8005eac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005eae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d22b      	bcs.n	8005f1a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ed4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005edc:	d112      	bne.n	8005f04 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d016      	beq.n	8005f14 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	3324      	adds	r3, #36	; 0x24
 8005eea:	4618      	mov	r0, r3
 8005eec:	f001 f8d4 	bl	8007098 <xTaskRemoveFromEventList>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00e      	beq.n	8005f14 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00b      	beq.n	8005f14 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2201      	movs	r2, #1
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	e007      	b.n	8005f14 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f08:	3301      	adds	r3, #1
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	b25a      	sxtb	r2, r3
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f14:	2301      	movs	r3, #1
 8005f16:	637b      	str	r3, [r7, #52]	; 0x34
 8005f18:	e001      	b.n	8005f1e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f20:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3738      	adds	r7, #56	; 0x38
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08c      	sub	sp, #48	; 0x30
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f40:	2300      	movs	r3, #0
 8005f42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10b      	bne.n	8005f66 <xQueueReceive+0x32>
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f52:	b672      	cpsid	i
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	b662      	cpsie	i
 8005f62:	623b      	str	r3, [r7, #32]
 8005f64:	e7fe      	b.n	8005f64 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d103      	bne.n	8005f74 <xQueueReceive+0x40>
 8005f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <xQueueReceive+0x44>
 8005f74:	2301      	movs	r3, #1
 8005f76:	e000      	b.n	8005f7a <xQueueReceive+0x46>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10b      	bne.n	8005f96 <xQueueReceive+0x62>
 8005f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f82:	b672      	cpsid	i
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	b662      	cpsie	i
 8005f92:	61fb      	str	r3, [r7, #28]
 8005f94:	e7fe      	b.n	8005f94 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f96:	f001 fa3d 	bl	8007414 <xTaskGetSchedulerState>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d102      	bne.n	8005fa6 <xQueueReceive+0x72>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <xQueueReceive+0x76>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e000      	b.n	8005fac <xQueueReceive+0x78>
 8005faa:	2300      	movs	r3, #0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10b      	bne.n	8005fc8 <xQueueReceive+0x94>
 8005fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb4:	b672      	cpsid	i
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	b662      	cpsie	i
 8005fc4:	61bb      	str	r3, [r7, #24]
 8005fc6:	e7fe      	b.n	8005fc6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fc8:	f002 f866 	bl	8008098 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d01f      	beq.n	8006018 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005fd8:	68b9      	ldr	r1, [r7, #8]
 8005fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fdc:	f000 fac5 	bl	800656a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	1e5a      	subs	r2, r3, #1
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00f      	beq.n	8006010 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff2:	3310      	adds	r3, #16
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f001 f84f 	bl	8007098 <xTaskRemoveFromEventList>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d007      	beq.n	8006010 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006000:	4b3c      	ldr	r3, [pc, #240]	; (80060f4 <xQueueReceive+0x1c0>)
 8006002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006010:	f002 f874 	bl	80080fc <vPortExitCritical>
				return pdPASS;
 8006014:	2301      	movs	r3, #1
 8006016:	e069      	b.n	80060ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d103      	bne.n	8006026 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800601e:	f002 f86d 	bl	80080fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006022:	2300      	movs	r3, #0
 8006024:	e062      	b.n	80060ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d106      	bne.n	800603a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800602c:	f107 0310 	add.w	r3, r7, #16
 8006030:	4618      	mov	r0, r3
 8006032:	f001 f895 	bl	8007160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006036:	2301      	movs	r3, #1
 8006038:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800603a:	f002 f85f 	bl	80080fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800603e:	f000 fe05 	bl	8006c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006042:	f002 f829 	bl	8008098 <vPortEnterCritical>
 8006046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800604c:	b25b      	sxtb	r3, r3
 800604e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006052:	d103      	bne.n	800605c <xQueueReceive+0x128>
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006062:	b25b      	sxtb	r3, r3
 8006064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006068:	d103      	bne.n	8006072 <xQueueReceive+0x13e>
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006072:	f002 f843 	bl	80080fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006076:	1d3a      	adds	r2, r7, #4
 8006078:	f107 0310 	add.w	r3, r7, #16
 800607c:	4611      	mov	r1, r2
 800607e:	4618      	mov	r0, r3
 8006080:	f001 f884 	bl	800718c <xTaskCheckForTimeOut>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d123      	bne.n	80060d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800608a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800608c:	f000 fae5 	bl	800665a <prvIsQueueEmpty>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d017      	beq.n	80060c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006098:	3324      	adds	r3, #36	; 0x24
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	4611      	mov	r1, r2
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 ffa8 	bl	8006ff4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060a6:	f000 fa86 	bl	80065b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060aa:	f000 fddd 	bl	8006c68 <xTaskResumeAll>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d189      	bne.n	8005fc8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80060b4:	4b0f      	ldr	r3, [pc, #60]	; (80060f4 <xQueueReceive+0x1c0>)
 80060b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	f3bf 8f6f 	isb	sy
 80060c4:	e780      	b.n	8005fc8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80060c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060c8:	f000 fa75 	bl	80065b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060cc:	f000 fdcc 	bl	8006c68 <xTaskResumeAll>
 80060d0:	e77a      	b.n	8005fc8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80060d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060d4:	f000 fa6f 	bl	80065b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060d8:	f000 fdc6 	bl	8006c68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060de:	f000 fabc 	bl	800665a <prvIsQueueEmpty>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f43f af6f 	beq.w	8005fc8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80060ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3730      	adds	r7, #48	; 0x30
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	e000ed04 	.word	0xe000ed04

080060f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08e      	sub	sp, #56	; 0x38
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006102:	2300      	movs	r3, #0
 8006104:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800610a:	2300      	movs	r3, #0
 800610c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10b      	bne.n	800612c <xQueueSemaphoreTake+0x34>
 8006114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006118:	b672      	cpsid	i
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	b662      	cpsie	i
 8006128:	623b      	str	r3, [r7, #32]
 800612a:	e7fe      	b.n	800612a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00b      	beq.n	800614c <xQueueSemaphoreTake+0x54>
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	b672      	cpsid	i
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	b662      	cpsie	i
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	e7fe      	b.n	800614a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800614c:	f001 f962 	bl	8007414 <xTaskGetSchedulerState>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d102      	bne.n	800615c <xQueueSemaphoreTake+0x64>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <xQueueSemaphoreTake+0x68>
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <xQueueSemaphoreTake+0x6a>
 8006160:	2300      	movs	r3, #0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10b      	bne.n	800617e <xQueueSemaphoreTake+0x86>
 8006166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616a:	b672      	cpsid	i
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	b662      	cpsie	i
 800617a:	61bb      	str	r3, [r7, #24]
 800617c:	e7fe      	b.n	800617c <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800617e:	f001 ff8b 	bl	8008098 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	2b00      	cmp	r3, #0
 800618c:	d024      	beq.n	80061d8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	1e5a      	subs	r2, r3, #1
 8006192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006194:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d104      	bne.n	80061a8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800619e:	f001 fab3 	bl	8007708 <pvTaskIncrementMutexHeldCount>
 80061a2:	4602      	mov	r2, r0
 80061a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00f      	beq.n	80061d0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b2:	3310      	adds	r3, #16
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 ff6f 	bl	8007098 <xTaskRemoveFromEventList>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d007      	beq.n	80061d0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061c0:	4b54      	ldr	r3, [pc, #336]	; (8006314 <xQueueSemaphoreTake+0x21c>)
 80061c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061d0:	f001 ff94 	bl	80080fc <vPortExitCritical>
				return pdPASS;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e098      	b.n	800630a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d112      	bne.n	8006204 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80061de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00b      	beq.n	80061fc <xQueueSemaphoreTake+0x104>
 80061e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e8:	b672      	cpsid	i
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	b662      	cpsie	i
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	e7fe      	b.n	80061fa <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80061fc:	f001 ff7e 	bl	80080fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006200:	2300      	movs	r3, #0
 8006202:	e082      	b.n	800630a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006206:	2b00      	cmp	r3, #0
 8006208:	d106      	bne.n	8006218 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800620a:	f107 030c 	add.w	r3, r7, #12
 800620e:	4618      	mov	r0, r3
 8006210:	f000 ffa6 	bl	8007160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006214:	2301      	movs	r3, #1
 8006216:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006218:	f001 ff70 	bl	80080fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800621c:	f000 fd16 	bl	8006c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006220:	f001 ff3a 	bl	8008098 <vPortEnterCritical>
 8006224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006226:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800622a:	b25b      	sxtb	r3, r3
 800622c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006230:	d103      	bne.n	800623a <xQueueSemaphoreTake+0x142>
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006240:	b25b      	sxtb	r3, r3
 8006242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006246:	d103      	bne.n	8006250 <xQueueSemaphoreTake+0x158>
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006250:	f001 ff54 	bl	80080fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006254:	463a      	mov	r2, r7
 8006256:	f107 030c 	add.w	r3, r7, #12
 800625a:	4611      	mov	r1, r2
 800625c:	4618      	mov	r0, r3
 800625e:	f000 ff95 	bl	800718c <xTaskCheckForTimeOut>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d132      	bne.n	80062ce <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006268:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800626a:	f000 f9f6 	bl	800665a <prvIsQueueEmpty>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d026      	beq.n	80062c2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d109      	bne.n	8006290 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800627c:	f001 ff0c 	bl	8008098 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	4618      	mov	r0, r3
 8006286:	f001 f8e3 	bl	8007450 <xTaskPriorityInherit>
 800628a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800628c:	f001 ff36 	bl	80080fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006292:	3324      	adds	r3, #36	; 0x24
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	4611      	mov	r1, r2
 8006298:	4618      	mov	r0, r3
 800629a:	f000 feab 	bl	8006ff4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800629e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062a0:	f000 f989 	bl	80065b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062a4:	f000 fce0 	bl	8006c68 <xTaskResumeAll>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f47f af67 	bne.w	800617e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80062b0:	4b18      	ldr	r3, [pc, #96]	; (8006314 <xQueueSemaphoreTake+0x21c>)
 80062b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	e75d      	b.n	800617e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80062c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062c4:	f000 f977 	bl	80065b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062c8:	f000 fcce 	bl	8006c68 <xTaskResumeAll>
 80062cc:	e757      	b.n	800617e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80062ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062d0:	f000 f971 	bl	80065b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062d4:	f000 fcc8 	bl	8006c68 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062da:	f000 f9be 	bl	800665a <prvIsQueueEmpty>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f43f af4c 	beq.w	800617e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80062e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00d      	beq.n	8006308 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80062ec:	f001 fed4 	bl	8008098 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80062f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062f2:	f000 f8b8 	bl	8006466 <prvGetDisinheritPriorityAfterTimeout>
 80062f6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80062f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062fe:	4618      	mov	r0, r3
 8006300:	f001 f97e 	bl	8007600 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006304:	f001 fefa 	bl	80080fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006308:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800630a:	4618      	mov	r0, r3
 800630c:	3738      	adds	r7, #56	; 0x38
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	e000ed04 	.word	0xe000ed04

08006318 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b08e      	sub	sp, #56	; 0x38
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10b      	bne.n	8006346 <xQueueReceiveFromISR+0x2e>
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	b672      	cpsid	i
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	b662      	cpsie	i
 8006342:	623b      	str	r3, [r7, #32]
 8006344:	e7fe      	b.n	8006344 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d103      	bne.n	8006354 <xQueueReceiveFromISR+0x3c>
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <xQueueReceiveFromISR+0x40>
 8006354:	2301      	movs	r3, #1
 8006356:	e000      	b.n	800635a <xQueueReceiveFromISR+0x42>
 8006358:	2300      	movs	r3, #0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10b      	bne.n	8006376 <xQueueReceiveFromISR+0x5e>
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	b672      	cpsid	i
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	b662      	cpsie	i
 8006372:	61fb      	str	r3, [r7, #28]
 8006374:	e7fe      	b.n	8006374 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006376:	f001 ff6f 	bl	8008258 <vPortValidateInterruptPriority>
	__asm volatile
 800637a:	f3ef 8211 	mrs	r2, BASEPRI
 800637e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006382:	b672      	cpsid	i
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	b662      	cpsie	i
 8006392:	61ba      	str	r2, [r7, #24]
 8006394:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006396:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006398:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d02f      	beq.n	8006406 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063b0:	68b9      	ldr	r1, [r7, #8]
 80063b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063b4:	f000 f8d9 	bl	800656a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	1e5a      	subs	r2, r3, #1
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80063c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c8:	d112      	bne.n	80063f0 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d016      	beq.n	8006400 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	3310      	adds	r3, #16
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fe5e 	bl	8007098 <xTaskRemoveFromEventList>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00e      	beq.n	8006400 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00b      	beq.n	8006400 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	e007      	b.n	8006400 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80063f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063f4:	3301      	adds	r3, #1
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	b25a      	sxtb	r2, r3
 80063fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006400:	2301      	movs	r3, #1
 8006402:	637b      	str	r3, [r7, #52]	; 0x34
 8006404:	e001      	b.n	800640a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8006406:	2300      	movs	r3, #0
 8006408:	637b      	str	r3, [r7, #52]	; 0x34
 800640a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006416:	4618      	mov	r0, r3
 8006418:	3738      	adds	r7, #56	; 0x38
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10b      	bne.n	8006448 <vQueueDelete+0x2a>
	__asm volatile
 8006430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006434:	b672      	cpsid	i
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	b662      	cpsie	i
 8006444:	60bb      	str	r3, [r7, #8]
 8006446:	e7fe      	b.n	8006446 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f95d 	bl	8006708 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006454:	2b00      	cmp	r3, #0
 8006456:	d102      	bne.n	800645e <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f002 f807 	bl	800846c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800645e:	bf00      	nop
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006466:	b480      	push	{r7}
 8006468:	b085      	sub	sp, #20
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	2b00      	cmp	r3, #0
 8006474:	d006      	beq.n	8006484 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	e001      	b.n	8006488 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006484:	2300      	movs	r3, #0
 8006486:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006488:	68fb      	ldr	r3, [r7, #12]
	}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b086      	sub	sp, #24
 800649a:	af00      	add	r7, sp, #0
 800649c:	60f8      	str	r0, [r7, #12]
 800649e:	60b9      	str	r1, [r7, #8]
 80064a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064a2:	2300      	movs	r3, #0
 80064a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10d      	bne.n	80064d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d14d      	bne.n	8006558 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f001 f82d 	bl	8007520 <xTaskPriorityDisinherit>
 80064c6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	609a      	str	r2, [r3, #8]
 80064ce:	e043      	b.n	8006558 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d119      	bne.n	800650a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6858      	ldr	r0, [r3, #4]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	461a      	mov	r2, r3
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	f002 f905 	bl	80086f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	441a      	add	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d32b      	bcc.n	8006558 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	605a      	str	r2, [r3, #4]
 8006508:	e026      	b.n	8006558 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	68d8      	ldr	r0, [r3, #12]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	461a      	mov	r2, r3
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	f002 f8eb 	bl	80086f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	425b      	negs	r3, r3
 8006524:	441a      	add	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d207      	bcs.n	8006546 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	425b      	negs	r3, r3
 8006540:	441a      	add	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b02      	cmp	r3, #2
 800654a:	d105      	bne.n	8006558 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	3b01      	subs	r3, #1
 8006556:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	1c5a      	adds	r2, r3, #1
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006560:	697b      	ldr	r3, [r7, #20]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3718      	adds	r7, #24
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b082      	sub	sp, #8
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	2b00      	cmp	r3, #0
 800657a:	d018      	beq.n	80065ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006584:	441a      	add	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	429a      	cmp	r2, r3
 8006594:	d303      	bcc.n	800659e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68d9      	ldr	r1, [r3, #12]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	461a      	mov	r2, r3
 80065a8:	6838      	ldr	r0, [r7, #0]
 80065aa:	f002 f8a1 	bl	80086f0 <memcpy>
	}
}
 80065ae:	bf00      	nop
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065be:	f001 fd6b 	bl	8008098 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065c8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065ca:	e011      	b.n	80065f0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d012      	beq.n	80065fa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3324      	adds	r3, #36	; 0x24
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 fd5d 	bl	8007098 <xTaskRemoveFromEventList>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80065e4:	f000 fe36 	bl	8007254 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	dce9      	bgt.n	80065cc <prvUnlockQueue+0x16>
 80065f8:	e000      	b.n	80065fc <prvUnlockQueue+0x46>
					break;
 80065fa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	22ff      	movs	r2, #255	; 0xff
 8006600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006604:	f001 fd7a 	bl	80080fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006608:	f001 fd46 	bl	8008098 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006612:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006614:	e011      	b.n	800663a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d012      	beq.n	8006644 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	3310      	adds	r3, #16
 8006622:	4618      	mov	r0, r3
 8006624:	f000 fd38 	bl	8007098 <xTaskRemoveFromEventList>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800662e:	f000 fe11 	bl	8007254 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006632:	7bbb      	ldrb	r3, [r7, #14]
 8006634:	3b01      	subs	r3, #1
 8006636:	b2db      	uxtb	r3, r3
 8006638:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800663a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800663e:	2b00      	cmp	r3, #0
 8006640:	dce9      	bgt.n	8006616 <prvUnlockQueue+0x60>
 8006642:	e000      	b.n	8006646 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006644:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	22ff      	movs	r2, #255	; 0xff
 800664a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800664e:	f001 fd55 	bl	80080fc <vPortExitCritical>
}
 8006652:	bf00      	nop
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006662:	f001 fd19 	bl	8008098 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666a:	2b00      	cmp	r3, #0
 800666c:	d102      	bne.n	8006674 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800666e:	2301      	movs	r3, #1
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	e001      	b.n	8006678 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006674:	2300      	movs	r3, #0
 8006676:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006678:	f001 fd40 	bl	80080fc <vPortExitCritical>

	return xReturn;
 800667c:	68fb      	ldr	r3, [r7, #12]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800668e:	f001 fd03 	bl	8008098 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800669a:	429a      	cmp	r2, r3
 800669c:	d102      	bne.n	80066a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800669e:	2301      	movs	r3, #1
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	e001      	b.n	80066a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066a8:	f001 fd28 	bl	80080fc <vPortExitCritical>

	return xReturn;
 80066ac:	68fb      	ldr	r3, [r7, #12]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	e014      	b.n	80066f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80066c8:	4a0e      	ldr	r2, [pc, #56]	; (8006704 <vQueueAddToRegistry+0x4c>)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10b      	bne.n	80066ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80066d4:	490b      	ldr	r1, [pc, #44]	; (8006704 <vQueueAddToRegistry+0x4c>)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80066de:	4a09      	ldr	r2, [pc, #36]	; (8006704 <vQueueAddToRegistry+0x4c>)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	4413      	add	r3, r2
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80066ea:	e005      	b.n	80066f8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2b07      	cmp	r3, #7
 80066f6:	d9e7      	bls.n	80066c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80066f8:	bf00      	nop
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	20004c14 	.word	0x20004c14

08006708 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006710:	2300      	movs	r3, #0
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	e016      	b.n	8006744 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006716:	4a10      	ldr	r2, [pc, #64]	; (8006758 <vQueueUnregisterQueue+0x50>)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	00db      	lsls	r3, r3, #3
 800671c:	4413      	add	r3, r2
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	429a      	cmp	r2, r3
 8006724:	d10b      	bne.n	800673e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006726:	4a0c      	ldr	r2, [pc, #48]	; (8006758 <vQueueUnregisterQueue+0x50>)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2100      	movs	r1, #0
 800672c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006730:	4a09      	ldr	r2, [pc, #36]	; (8006758 <vQueueUnregisterQueue+0x50>)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	4413      	add	r3, r2
 8006738:	2200      	movs	r2, #0
 800673a:	605a      	str	r2, [r3, #4]
				break;
 800673c:	e005      	b.n	800674a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3301      	adds	r3, #1
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b07      	cmp	r3, #7
 8006748:	d9e5      	bls.n	8006716 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800674a:	bf00      	nop
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	20004c14 	.word	0x20004c14

0800675c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800676c:	f001 fc94 	bl	8008098 <vPortEnterCritical>
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006776:	b25b      	sxtb	r3, r3
 8006778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677c:	d103      	bne.n	8006786 <vQueueWaitForMessageRestricted+0x2a>
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800678c:	b25b      	sxtb	r3, r3
 800678e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006792:	d103      	bne.n	800679c <vQueueWaitForMessageRestricted+0x40>
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800679c:	f001 fcae 	bl	80080fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d106      	bne.n	80067b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	3324      	adds	r3, #36	; 0x24
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 fc45 	bl	8007040 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80067b6:	6978      	ldr	r0, [r7, #20]
 80067b8:	f7ff fefd 	bl	80065b6 <prvUnlockQueue>
	}
 80067bc:	bf00      	nop
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08e      	sub	sp, #56	; 0x38
 80067c8:	af04      	add	r7, sp, #16
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
 80067d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10b      	bne.n	80067f0 <xTaskCreateStatic+0x2c>
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	b672      	cpsid	i
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	b662      	cpsie	i
 80067ec:	623b      	str	r3, [r7, #32]
 80067ee:	e7fe      	b.n	80067ee <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80067f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10b      	bne.n	800680e <xTaskCreateStatic+0x4a>
 80067f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fa:	b672      	cpsid	i
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	b662      	cpsie	i
 800680a:	61fb      	str	r3, [r7, #28]
 800680c:	e7fe      	b.n	800680c <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800680e:	235c      	movs	r3, #92	; 0x5c
 8006810:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	2b5c      	cmp	r3, #92	; 0x5c
 8006816:	d00b      	beq.n	8006830 <xTaskCreateStatic+0x6c>
 8006818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681c:	b672      	cpsid	i
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	b662      	cpsie	i
 800682c:	61bb      	str	r3, [r7, #24]
 800682e:	e7fe      	b.n	800682e <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006830:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01e      	beq.n	8006876 <xTaskCreateStatic+0xb2>
 8006838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800683a:	2b00      	cmp	r3, #0
 800683c:	d01b      	beq.n	8006876 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800683e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006840:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006846:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	2202      	movs	r2, #2
 800684c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006850:	2300      	movs	r3, #0
 8006852:	9303      	str	r3, [sp, #12]
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	9302      	str	r3, [sp, #8]
 8006858:	f107 0314 	add.w	r3, r7, #20
 800685c:	9301      	str	r3, [sp, #4]
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	68b9      	ldr	r1, [r7, #8]
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 f850 	bl	800690e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800686e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006870:	f000 f8de 	bl	8006a30 <prvAddNewTaskToReadyList>
 8006874:	e001      	b.n	800687a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006876:	2300      	movs	r3, #0
 8006878:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800687a:	697b      	ldr	r3, [r7, #20]
	}
 800687c:	4618      	mov	r0, r3
 800687e:	3728      	adds	r7, #40	; 0x28
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08c      	sub	sp, #48	; 0x30
 8006888:	af04      	add	r7, sp, #16
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	603b      	str	r3, [r7, #0]
 8006890:	4613      	mov	r3, r2
 8006892:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006894:	88fb      	ldrh	r3, [r7, #6]
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4618      	mov	r0, r3
 800689a:	f001 fd1f 	bl	80082dc <pvPortMalloc>
 800689e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00e      	beq.n	80068c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068a6:	205c      	movs	r0, #92	; 0x5c
 80068a8:	f001 fd18 	bl	80082dc <pvPortMalloc>
 80068ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	631a      	str	r2, [r3, #48]	; 0x30
 80068ba:	e005      	b.n	80068c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068bc:	6978      	ldr	r0, [r7, #20]
 80068be:	f001 fdd5 	bl	800846c <vPortFree>
 80068c2:	e001      	b.n	80068c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068c4:	2300      	movs	r3, #0
 80068c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d017      	beq.n	80068fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068d6:	88fa      	ldrh	r2, [r7, #6]
 80068d8:	2300      	movs	r3, #0
 80068da:	9303      	str	r3, [sp, #12]
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	9302      	str	r3, [sp, #8]
 80068e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	68b9      	ldr	r1, [r7, #8]
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f000 f80e 	bl	800690e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068f2:	69f8      	ldr	r0, [r7, #28]
 80068f4:	f000 f89c 	bl	8006a30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068f8:	2301      	movs	r3, #1
 80068fa:	61bb      	str	r3, [r7, #24]
 80068fc:	e002      	b.n	8006904 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006902:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006904:	69bb      	ldr	r3, [r7, #24]
	}
 8006906:	4618      	mov	r0, r3
 8006908:	3720      	adds	r7, #32
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b088      	sub	sp, #32
 8006912:	af00      	add	r7, sp, #0
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	607a      	str	r2, [r7, #4]
 800691a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	461a      	mov	r2, r3
 8006926:	21a5      	movs	r1, #165	; 0xa5
 8006928:	f001 feed 	bl	8008706 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800692c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006930:	6879      	ldr	r1, [r7, #4]
 8006932:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006936:	440b      	add	r3, r1
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	f023 0307 	bic.w	r3, r3, #7
 8006944:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00b      	beq.n	8006968 <prvInitialiseNewTask+0x5a>
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	b672      	cpsid	i
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	b662      	cpsie	i
 8006964:	617b      	str	r3, [r7, #20]
 8006966:	e7fe      	b.n	8006966 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d01f      	beq.n	80069ae <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800696e:	2300      	movs	r3, #0
 8006970:	61fb      	str	r3, [r7, #28]
 8006972:	e012      	b.n	800699a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	4413      	add	r3, r2
 800697a:	7819      	ldrb	r1, [r3, #0]
 800697c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	4413      	add	r3, r2
 8006982:	3334      	adds	r3, #52	; 0x34
 8006984:	460a      	mov	r2, r1
 8006986:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	4413      	add	r3, r2
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d006      	beq.n	80069a2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	3301      	adds	r3, #1
 8006998:	61fb      	str	r3, [r7, #28]
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	2b0f      	cmp	r3, #15
 800699e:	d9e9      	bls.n	8006974 <prvInitialiseNewTask+0x66>
 80069a0:	e000      	b.n	80069a4 <prvInitialiseNewTask+0x96>
			{
				break;
 80069a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069ac:	e003      	b.n	80069b6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b8:	2b37      	cmp	r3, #55	; 0x37
 80069ba:	d901      	bls.n	80069c0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069bc:	2337      	movs	r3, #55	; 0x37
 80069be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	2200      	movs	r2, #0
 80069d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	3304      	adds	r3, #4
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7fe fe2e 	bl	8005638 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069de:	3318      	adds	r3, #24
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fe fe29 	bl	8005638 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	2200      	movs	r2, #0
 8006a00:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	68f9      	ldr	r1, [r7, #12]
 8006a0e:	69b8      	ldr	r0, [r7, #24]
 8006a10:	f001 fa36 	bl	8007e80 <pxPortInitialiseStack>
 8006a14:	4602      	mov	r2, r0
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a26:	bf00      	nop
 8006a28:	3720      	adds	r7, #32
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
	...

08006a30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a38:	f001 fb2e 	bl	8008098 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a3c:	4b2d      	ldr	r3, [pc, #180]	; (8006af4 <prvAddNewTaskToReadyList+0xc4>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3301      	adds	r3, #1
 8006a42:	4a2c      	ldr	r2, [pc, #176]	; (8006af4 <prvAddNewTaskToReadyList+0xc4>)
 8006a44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a46:	4b2c      	ldr	r3, [pc, #176]	; (8006af8 <prvAddNewTaskToReadyList+0xc8>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d109      	bne.n	8006a62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a4e:	4a2a      	ldr	r2, [pc, #168]	; (8006af8 <prvAddNewTaskToReadyList+0xc8>)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a54:	4b27      	ldr	r3, [pc, #156]	; (8006af4 <prvAddNewTaskToReadyList+0xc4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d110      	bne.n	8006a7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a5c:	f000 fc1e 	bl	800729c <prvInitialiseTaskLists>
 8006a60:	e00d      	b.n	8006a7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a62:	4b26      	ldr	r3, [pc, #152]	; (8006afc <prvAddNewTaskToReadyList+0xcc>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a6a:	4b23      	ldr	r3, [pc, #140]	; (8006af8 <prvAddNewTaskToReadyList+0xc8>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d802      	bhi.n	8006a7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a78:	4a1f      	ldr	r2, [pc, #124]	; (8006af8 <prvAddNewTaskToReadyList+0xc8>)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a7e:	4b20      	ldr	r3, [pc, #128]	; (8006b00 <prvAddNewTaskToReadyList+0xd0>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3301      	adds	r3, #1
 8006a84:	4a1e      	ldr	r2, [pc, #120]	; (8006b00 <prvAddNewTaskToReadyList+0xd0>)
 8006a86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a88:	4b1d      	ldr	r3, [pc, #116]	; (8006b00 <prvAddNewTaskToReadyList+0xd0>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a94:	4b1b      	ldr	r3, [pc, #108]	; (8006b04 <prvAddNewTaskToReadyList+0xd4>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d903      	bls.n	8006aa4 <prvAddNewTaskToReadyList+0x74>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa0:	4a18      	ldr	r2, [pc, #96]	; (8006b04 <prvAddNewTaskToReadyList+0xd4>)
 8006aa2:	6013      	str	r3, [r2, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4a15      	ldr	r2, [pc, #84]	; (8006b08 <prvAddNewTaskToReadyList+0xd8>)
 8006ab2:	441a      	add	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4610      	mov	r0, r2
 8006abc:	f7fe fdc9 	bl	8005652 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ac0:	f001 fb1c 	bl	80080fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ac4:	4b0d      	ldr	r3, [pc, #52]	; (8006afc <prvAddNewTaskToReadyList+0xcc>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00e      	beq.n	8006aea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006acc:	4b0a      	ldr	r3, [pc, #40]	; (8006af8 <prvAddNewTaskToReadyList+0xc8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d207      	bcs.n	8006aea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ada:	4b0c      	ldr	r3, [pc, #48]	; (8006b0c <prvAddNewTaskToReadyList+0xdc>)
 8006adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae0:	601a      	str	r2, [r3, #0]
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006aea:	bf00      	nop
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	20000e30 	.word	0x20000e30
 8006af8:	2000095c 	.word	0x2000095c
 8006afc:	20000e3c 	.word	0x20000e3c
 8006b00:	20000e4c 	.word	0x20000e4c
 8006b04:	20000e38 	.word	0x20000e38
 8006b08:	20000960 	.word	0x20000960
 8006b0c:	e000ed04 	.word	0xe000ed04

08006b10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d018      	beq.n	8006b54 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b22:	4b14      	ldr	r3, [pc, #80]	; (8006b74 <vTaskDelay+0x64>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00b      	beq.n	8006b42 <vTaskDelay+0x32>
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	b672      	cpsid	i
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	b662      	cpsie	i
 8006b3e:	60bb      	str	r3, [r7, #8]
 8006b40:	e7fe      	b.n	8006b40 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8006b42:	f000 f883 	bl	8006c4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b46:	2100      	movs	r1, #0
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fdf1 	bl	8007730 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b4e:	f000 f88b 	bl	8006c68 <xTaskResumeAll>
 8006b52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d107      	bne.n	8006b6a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006b5a:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <vTaskDelay+0x68>)
 8006b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b6a:	bf00      	nop
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	20000e58 	.word	0x20000e58
 8006b78:	e000ed04 	.word	0xe000ed04

08006b7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08a      	sub	sp, #40	; 0x28
 8006b80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b86:	2300      	movs	r3, #0
 8006b88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b8a:	463a      	mov	r2, r7
 8006b8c:	1d39      	adds	r1, r7, #4
 8006b8e:	f107 0308 	add.w	r3, r7, #8
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fcfc 	bl	8005590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	9202      	str	r2, [sp, #8]
 8006ba0:	9301      	str	r3, [sp, #4]
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	460a      	mov	r2, r1
 8006baa:	4922      	ldr	r1, [pc, #136]	; (8006c34 <vTaskStartScheduler+0xb8>)
 8006bac:	4822      	ldr	r0, [pc, #136]	; (8006c38 <vTaskStartScheduler+0xbc>)
 8006bae:	f7ff fe09 	bl	80067c4 <xTaskCreateStatic>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	4b21      	ldr	r3, [pc, #132]	; (8006c3c <vTaskStartScheduler+0xc0>)
 8006bb6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006bb8:	4b20      	ldr	r3, [pc, #128]	; (8006c3c <vTaskStartScheduler+0xc0>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	e001      	b.n	8006bca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d102      	bne.n	8006bd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006bd0:	f000 fe02 	bl	80077d8 <xTimerCreateTimerTask>
 8006bd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d117      	bne.n	8006c0c <vTaskStartScheduler+0x90>
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	b672      	cpsid	i
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	b662      	cpsie	i
 8006bf0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006bf2:	4b13      	ldr	r3, [pc, #76]	; (8006c40 <vTaskStartScheduler+0xc4>)
 8006bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8006bf8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006bfa:	4b12      	ldr	r3, [pc, #72]	; (8006c44 <vTaskStartScheduler+0xc8>)
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c00:	4b11      	ldr	r3, [pc, #68]	; (8006c48 <vTaskStartScheduler+0xcc>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c06:	f001 f9cb 	bl	8007fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c0a:	e00f      	b.n	8006c2c <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c12:	d10b      	bne.n	8006c2c <vTaskStartScheduler+0xb0>
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	b672      	cpsid	i
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	b662      	cpsie	i
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	e7fe      	b.n	8006c2a <vTaskStartScheduler+0xae>
}
 8006c2c:	bf00      	nop
 8006c2e:	3718      	adds	r7, #24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	08009078 	.word	0x08009078
 8006c38:	0800726d 	.word	0x0800726d
 8006c3c:	20000e54 	.word	0x20000e54
 8006c40:	20000e50 	.word	0x20000e50
 8006c44:	20000e3c 	.word	0x20000e3c
 8006c48:	20000e34 	.word	0x20000e34

08006c4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006c50:	4b04      	ldr	r3, [pc, #16]	; (8006c64 <vTaskSuspendAll+0x18>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3301      	adds	r3, #1
 8006c56:	4a03      	ldr	r2, [pc, #12]	; (8006c64 <vTaskSuspendAll+0x18>)
 8006c58:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006c5a:	bf00      	nop
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	20000e58 	.word	0x20000e58

08006c68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c72:	2300      	movs	r3, #0
 8006c74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c76:	4b42      	ldr	r3, [pc, #264]	; (8006d80 <xTaskResumeAll+0x118>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10b      	bne.n	8006c96 <xTaskResumeAll+0x2e>
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	b672      	cpsid	i
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	b662      	cpsie	i
 8006c92:	603b      	str	r3, [r7, #0]
 8006c94:	e7fe      	b.n	8006c94 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c96:	f001 f9ff 	bl	8008098 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c9a:	4b39      	ldr	r3, [pc, #228]	; (8006d80 <xTaskResumeAll+0x118>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	4a37      	ldr	r2, [pc, #220]	; (8006d80 <xTaskResumeAll+0x118>)
 8006ca2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ca4:	4b36      	ldr	r3, [pc, #216]	; (8006d80 <xTaskResumeAll+0x118>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d162      	bne.n	8006d72 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006cac:	4b35      	ldr	r3, [pc, #212]	; (8006d84 <xTaskResumeAll+0x11c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d05e      	beq.n	8006d72 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cb4:	e02f      	b.n	8006d16 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cb6:	4b34      	ldr	r3, [pc, #208]	; (8006d88 <xTaskResumeAll+0x120>)
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	3318      	adds	r3, #24
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fe fd22 	bl	800570c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	3304      	adds	r3, #4
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fe fd1d 	bl	800570c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd6:	4b2d      	ldr	r3, [pc, #180]	; (8006d8c <xTaskResumeAll+0x124>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d903      	bls.n	8006ce6 <xTaskResumeAll+0x7e>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce2:	4a2a      	ldr	r2, [pc, #168]	; (8006d8c <xTaskResumeAll+0x124>)
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cea:	4613      	mov	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4a27      	ldr	r2, [pc, #156]	; (8006d90 <xTaskResumeAll+0x128>)
 8006cf4:	441a      	add	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	f7fe fca8 	bl	8005652 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d06:	4b23      	ldr	r3, [pc, #140]	; (8006d94 <xTaskResumeAll+0x12c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d302      	bcc.n	8006d16 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006d10:	4b21      	ldr	r3, [pc, #132]	; (8006d98 <xTaskResumeAll+0x130>)
 8006d12:	2201      	movs	r2, #1
 8006d14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d16:	4b1c      	ldr	r3, [pc, #112]	; (8006d88 <xTaskResumeAll+0x120>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1cb      	bne.n	8006cb6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d24:	f000 fb56 	bl	80073d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006d28:	4b1c      	ldr	r3, [pc, #112]	; (8006d9c <xTaskResumeAll+0x134>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d010      	beq.n	8006d56 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d34:	f000 f846 	bl	8006dc4 <xTaskIncrementTick>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006d3e:	4b16      	ldr	r3, [pc, #88]	; (8006d98 <xTaskResumeAll+0x130>)
 8006d40:	2201      	movs	r2, #1
 8006d42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1f1      	bne.n	8006d34 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006d50:	4b12      	ldr	r3, [pc, #72]	; (8006d9c <xTaskResumeAll+0x134>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d56:	4b10      	ldr	r3, [pc, #64]	; (8006d98 <xTaskResumeAll+0x130>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d009      	beq.n	8006d72 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d62:	4b0f      	ldr	r3, [pc, #60]	; (8006da0 <xTaskResumeAll+0x138>)
 8006d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d72:	f001 f9c3 	bl	80080fc <vPortExitCritical>

	return xAlreadyYielded;
 8006d76:	68bb      	ldr	r3, [r7, #8]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	20000e58 	.word	0x20000e58
 8006d84:	20000e30 	.word	0x20000e30
 8006d88:	20000df0 	.word	0x20000df0
 8006d8c:	20000e38 	.word	0x20000e38
 8006d90:	20000960 	.word	0x20000960
 8006d94:	2000095c 	.word	0x2000095c
 8006d98:	20000e44 	.word	0x20000e44
 8006d9c:	20000e40 	.word	0x20000e40
 8006da0:	e000ed04 	.word	0xe000ed04

08006da4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006daa:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <xTaskGetTickCount+0x1c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006db0:	687b      	ldr	r3, [r7, #4]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	20000e34 	.word	0x20000e34

08006dc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dce:	4b4f      	ldr	r3, [pc, #316]	; (8006f0c <xTaskIncrementTick+0x148>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f040 808a 	bne.w	8006eec <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006dd8:	4b4d      	ldr	r3, [pc, #308]	; (8006f10 <xTaskIncrementTick+0x14c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006de0:	4a4b      	ldr	r2, [pc, #300]	; (8006f10 <xTaskIncrementTick+0x14c>)
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d121      	bne.n	8006e30 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006dec:	4b49      	ldr	r3, [pc, #292]	; (8006f14 <xTaskIncrementTick+0x150>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00b      	beq.n	8006e0e <xTaskIncrementTick+0x4a>
 8006df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfa:	b672      	cpsid	i
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	b662      	cpsie	i
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	e7fe      	b.n	8006e0c <xTaskIncrementTick+0x48>
 8006e0e:	4b41      	ldr	r3, [pc, #260]	; (8006f14 <xTaskIncrementTick+0x150>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	4b40      	ldr	r3, [pc, #256]	; (8006f18 <xTaskIncrementTick+0x154>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a3e      	ldr	r2, [pc, #248]	; (8006f14 <xTaskIncrementTick+0x150>)
 8006e1a:	6013      	str	r3, [r2, #0]
 8006e1c:	4a3e      	ldr	r2, [pc, #248]	; (8006f18 <xTaskIncrementTick+0x154>)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6013      	str	r3, [r2, #0]
 8006e22:	4b3e      	ldr	r3, [pc, #248]	; (8006f1c <xTaskIncrementTick+0x158>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3301      	adds	r3, #1
 8006e28:	4a3c      	ldr	r2, [pc, #240]	; (8006f1c <xTaskIncrementTick+0x158>)
 8006e2a:	6013      	str	r3, [r2, #0]
 8006e2c:	f000 fad2 	bl	80073d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e30:	4b3b      	ldr	r3, [pc, #236]	; (8006f20 <xTaskIncrementTick+0x15c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d349      	bcc.n	8006ece <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e3a:	4b36      	ldr	r3, [pc, #216]	; (8006f14 <xTaskIncrementTick+0x150>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d104      	bne.n	8006e4e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e44:	4b36      	ldr	r3, [pc, #216]	; (8006f20 <xTaskIncrementTick+0x15c>)
 8006e46:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4a:	601a      	str	r2, [r3, #0]
					break;
 8006e4c:	e03f      	b.n	8006ece <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e4e:	4b31      	ldr	r3, [pc, #196]	; (8006f14 <xTaskIncrementTick+0x150>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d203      	bcs.n	8006e6e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e66:	4a2e      	ldr	r2, [pc, #184]	; (8006f20 <xTaskIncrementTick+0x15c>)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e6c:	e02f      	b.n	8006ece <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	3304      	adds	r3, #4
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fe fc4a 	bl	800570c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d004      	beq.n	8006e8a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	3318      	adds	r3, #24
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fe fc41 	bl	800570c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e8e:	4b25      	ldr	r3, [pc, #148]	; (8006f24 <xTaskIncrementTick+0x160>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d903      	bls.n	8006e9e <xTaskIncrementTick+0xda>
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9a:	4a22      	ldr	r2, [pc, #136]	; (8006f24 <xTaskIncrementTick+0x160>)
 8006e9c:	6013      	str	r3, [r2, #0]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4a1f      	ldr	r2, [pc, #124]	; (8006f28 <xTaskIncrementTick+0x164>)
 8006eac:	441a      	add	r2, r3
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	f7fe fbcc 	bl	8005652 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ebe:	4b1b      	ldr	r3, [pc, #108]	; (8006f2c <xTaskIncrementTick+0x168>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d3b8      	bcc.n	8006e3a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ecc:	e7b5      	b.n	8006e3a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ece:	4b17      	ldr	r3, [pc, #92]	; (8006f2c <xTaskIncrementTick+0x168>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed4:	4914      	ldr	r1, [pc, #80]	; (8006f28 <xTaskIncrementTick+0x164>)
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d907      	bls.n	8006ef6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	617b      	str	r3, [r7, #20]
 8006eea:	e004      	b.n	8006ef6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006eec:	4b10      	ldr	r3, [pc, #64]	; (8006f30 <xTaskIncrementTick+0x16c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	4a0f      	ldr	r2, [pc, #60]	; (8006f30 <xTaskIncrementTick+0x16c>)
 8006ef4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006ef6:	4b0f      	ldr	r3, [pc, #60]	; (8006f34 <xTaskIncrementTick+0x170>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8006efe:	2301      	movs	r3, #1
 8006f00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006f02:	697b      	ldr	r3, [r7, #20]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	20000e58 	.word	0x20000e58
 8006f10:	20000e34 	.word	0x20000e34
 8006f14:	20000de8 	.word	0x20000de8
 8006f18:	20000dec 	.word	0x20000dec
 8006f1c:	20000e48 	.word	0x20000e48
 8006f20:	20000e50 	.word	0x20000e50
 8006f24:	20000e38 	.word	0x20000e38
 8006f28:	20000960 	.word	0x20000960
 8006f2c:	2000095c 	.word	0x2000095c
 8006f30:	20000e40 	.word	0x20000e40
 8006f34:	20000e44 	.word	0x20000e44

08006f38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f3e:	4b28      	ldr	r3, [pc, #160]	; (8006fe0 <vTaskSwitchContext+0xa8>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f46:	4b27      	ldr	r3, [pc, #156]	; (8006fe4 <vTaskSwitchContext+0xac>)
 8006f48:	2201      	movs	r2, #1
 8006f4a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f4c:	e042      	b.n	8006fd4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006f4e:	4b25      	ldr	r3, [pc, #148]	; (8006fe4 <vTaskSwitchContext+0xac>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f54:	4b24      	ldr	r3, [pc, #144]	; (8006fe8 <vTaskSwitchContext+0xb0>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	60fb      	str	r3, [r7, #12]
 8006f5a:	e011      	b.n	8006f80 <vTaskSwitchContext+0x48>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10b      	bne.n	8006f7a <vTaskSwitchContext+0x42>
 8006f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f66:	b672      	cpsid	i
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	b662      	cpsie	i
 8006f76:	607b      	str	r3, [r7, #4]
 8006f78:	e7fe      	b.n	8006f78 <vTaskSwitchContext+0x40>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	491a      	ldr	r1, [pc, #104]	; (8006fec <vTaskSwitchContext+0xb4>)
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4613      	mov	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	440b      	add	r3, r1
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0e3      	beq.n	8006f5c <vTaskSwitchContext+0x24>
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4a13      	ldr	r2, [pc, #76]	; (8006fec <vTaskSwitchContext+0xb4>)
 8006fa0:	4413      	add	r3, r2
 8006fa2:	60bb      	str	r3, [r7, #8]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	605a      	str	r2, [r3, #4]
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	3308      	adds	r3, #8
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d104      	bne.n	8006fc4 <vTaskSwitchContext+0x8c>
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	605a      	str	r2, [r3, #4]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	4a09      	ldr	r2, [pc, #36]	; (8006ff0 <vTaskSwitchContext+0xb8>)
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	4a06      	ldr	r2, [pc, #24]	; (8006fe8 <vTaskSwitchContext+0xb0>)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6013      	str	r3, [r2, #0]
}
 8006fd4:	bf00      	nop
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	20000e58 	.word	0x20000e58
 8006fe4:	20000e44 	.word	0x20000e44
 8006fe8:	20000e38 	.word	0x20000e38
 8006fec:	20000960 	.word	0x20000960
 8006ff0:	2000095c 	.word	0x2000095c

08006ff4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10b      	bne.n	800701c <vTaskPlaceOnEventList+0x28>
 8007004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007008:	b672      	cpsid	i
 800700a:	f383 8811 	msr	BASEPRI, r3
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	b662      	cpsie	i
 8007018:	60fb      	str	r3, [r7, #12]
 800701a:	e7fe      	b.n	800701a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800701c:	4b07      	ldr	r3, [pc, #28]	; (800703c <vTaskPlaceOnEventList+0x48>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3318      	adds	r3, #24
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7fe fb38 	bl	800569a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800702a:	2101      	movs	r1, #1
 800702c:	6838      	ldr	r0, [r7, #0]
 800702e:	f000 fb7f 	bl	8007730 <prvAddCurrentTaskToDelayedList>
}
 8007032:	bf00      	nop
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	2000095c 	.word	0x2000095c

08007040 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10b      	bne.n	800706a <vTaskPlaceOnEventListRestricted+0x2a>
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	b672      	cpsid	i
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	b662      	cpsie	i
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	e7fe      	b.n	8007068 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800706a:	4b0a      	ldr	r3, [pc, #40]	; (8007094 <vTaskPlaceOnEventListRestricted+0x54>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3318      	adds	r3, #24
 8007070:	4619      	mov	r1, r3
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f7fe faed 	bl	8005652 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800707e:	f04f 33ff 	mov.w	r3, #4294967295
 8007082:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007084:	6879      	ldr	r1, [r7, #4]
 8007086:	68b8      	ldr	r0, [r7, #8]
 8007088:	f000 fb52 	bl	8007730 <prvAddCurrentTaskToDelayedList>
	}
 800708c:	bf00      	nop
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	2000095c 	.word	0x2000095c

08007098 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10b      	bne.n	80070c6 <xTaskRemoveFromEventList+0x2e>
 80070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b2:	b672      	cpsid	i
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	b662      	cpsie	i
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	e7fe      	b.n	80070c4 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	3318      	adds	r3, #24
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe fb1e 	bl	800570c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070d0:	4b1d      	ldr	r3, [pc, #116]	; (8007148 <xTaskRemoveFromEventList+0xb0>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d11d      	bne.n	8007114 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	3304      	adds	r3, #4
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fe fb15 	bl	800570c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e6:	4b19      	ldr	r3, [pc, #100]	; (800714c <xTaskRemoveFromEventList+0xb4>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d903      	bls.n	80070f6 <xTaskRemoveFromEventList+0x5e>
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f2:	4a16      	ldr	r2, [pc, #88]	; (800714c <xTaskRemoveFromEventList+0xb4>)
 80070f4:	6013      	str	r3, [r2, #0]
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fa:	4613      	mov	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4a13      	ldr	r2, [pc, #76]	; (8007150 <xTaskRemoveFromEventList+0xb8>)
 8007104:	441a      	add	r2, r3
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	3304      	adds	r3, #4
 800710a:	4619      	mov	r1, r3
 800710c:	4610      	mov	r0, r2
 800710e:	f7fe faa0 	bl	8005652 <vListInsertEnd>
 8007112:	e005      	b.n	8007120 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	3318      	adds	r3, #24
 8007118:	4619      	mov	r1, r3
 800711a:	480e      	ldr	r0, [pc, #56]	; (8007154 <xTaskRemoveFromEventList+0xbc>)
 800711c:	f7fe fa99 	bl	8005652 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007124:	4b0c      	ldr	r3, [pc, #48]	; (8007158 <xTaskRemoveFromEventList+0xc0>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712a:	429a      	cmp	r2, r3
 800712c:	d905      	bls.n	800713a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800712e:	2301      	movs	r3, #1
 8007130:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007132:	4b0a      	ldr	r3, [pc, #40]	; (800715c <xTaskRemoveFromEventList+0xc4>)
 8007134:	2201      	movs	r2, #1
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	e001      	b.n	800713e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800713a:	2300      	movs	r3, #0
 800713c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800713e:	697b      	ldr	r3, [r7, #20]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	20000e58 	.word	0x20000e58
 800714c:	20000e38 	.word	0x20000e38
 8007150:	20000960 	.word	0x20000960
 8007154:	20000df0 	.word	0x20000df0
 8007158:	2000095c 	.word	0x2000095c
 800715c:	20000e44 	.word	0x20000e44

08007160 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007168:	4b06      	ldr	r3, [pc, #24]	; (8007184 <vTaskInternalSetTimeOutState+0x24>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007170:	4b05      	ldr	r3, [pc, #20]	; (8007188 <vTaskInternalSetTimeOutState+0x28>)
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	605a      	str	r2, [r3, #4]
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	20000e48 	.word	0x20000e48
 8007188:	20000e34 	.word	0x20000e34

0800718c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b088      	sub	sp, #32
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10b      	bne.n	80071b4 <xTaskCheckForTimeOut+0x28>
 800719c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a0:	b672      	cpsid	i
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	b662      	cpsie	i
 80071b0:	613b      	str	r3, [r7, #16]
 80071b2:	e7fe      	b.n	80071b2 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10b      	bne.n	80071d2 <xTaskCheckForTimeOut+0x46>
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	b672      	cpsid	i
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	b662      	cpsie	i
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	e7fe      	b.n	80071d0 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80071d2:	f000 ff61 	bl	8008098 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071d6:	4b1d      	ldr	r3, [pc, #116]	; (800724c <xTaskCheckForTimeOut+0xc0>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ee:	d102      	bne.n	80071f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071f0:	2300      	movs	r3, #0
 80071f2:	61fb      	str	r3, [r7, #28]
 80071f4:	e023      	b.n	800723e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	4b15      	ldr	r3, [pc, #84]	; (8007250 <xTaskCheckForTimeOut+0xc4>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d007      	beq.n	8007212 <xTaskCheckForTimeOut+0x86>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	429a      	cmp	r2, r3
 800720a:	d302      	bcc.n	8007212 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800720c:	2301      	movs	r3, #1
 800720e:	61fb      	str	r3, [r7, #28]
 8007210:	e015      	b.n	800723e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	429a      	cmp	r2, r3
 800721a:	d20b      	bcs.n	8007234 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	1ad2      	subs	r2, r2, r3
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7ff ff99 	bl	8007160 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800722e:	2300      	movs	r3, #0
 8007230:	61fb      	str	r3, [r7, #28]
 8007232:	e004      	b.n	800723e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2200      	movs	r2, #0
 8007238:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800723a:	2301      	movs	r3, #1
 800723c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800723e:	f000 ff5d 	bl	80080fc <vPortExitCritical>

	return xReturn;
 8007242:	69fb      	ldr	r3, [r7, #28]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3720      	adds	r7, #32
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	20000e34 	.word	0x20000e34
 8007250:	20000e48 	.word	0x20000e48

08007254 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007254:	b480      	push	{r7}
 8007256:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007258:	4b03      	ldr	r3, [pc, #12]	; (8007268 <vTaskMissedYield+0x14>)
 800725a:	2201      	movs	r2, #1
 800725c:	601a      	str	r2, [r3, #0]
}
 800725e:	bf00      	nop
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	20000e44 	.word	0x20000e44

0800726c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007274:	f000 f852 	bl	800731c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007278:	4b06      	ldr	r3, [pc, #24]	; (8007294 <prvIdleTask+0x28>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d9f9      	bls.n	8007274 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007280:	4b05      	ldr	r3, [pc, #20]	; (8007298 <prvIdleTask+0x2c>)
 8007282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007290:	e7f0      	b.n	8007274 <prvIdleTask+0x8>
 8007292:	bf00      	nop
 8007294:	20000960 	.word	0x20000960
 8007298:	e000ed04 	.word	0xe000ed04

0800729c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072a2:	2300      	movs	r3, #0
 80072a4:	607b      	str	r3, [r7, #4]
 80072a6:	e00c      	b.n	80072c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	4613      	mov	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4a12      	ldr	r2, [pc, #72]	; (80072fc <prvInitialiseTaskLists+0x60>)
 80072b4:	4413      	add	r3, r2
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fe f99e 	bl	80055f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3301      	adds	r3, #1
 80072c0:	607b      	str	r3, [r7, #4]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2b37      	cmp	r3, #55	; 0x37
 80072c6:	d9ef      	bls.n	80072a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072c8:	480d      	ldr	r0, [pc, #52]	; (8007300 <prvInitialiseTaskLists+0x64>)
 80072ca:	f7fe f995 	bl	80055f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072ce:	480d      	ldr	r0, [pc, #52]	; (8007304 <prvInitialiseTaskLists+0x68>)
 80072d0:	f7fe f992 	bl	80055f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072d4:	480c      	ldr	r0, [pc, #48]	; (8007308 <prvInitialiseTaskLists+0x6c>)
 80072d6:	f7fe f98f 	bl	80055f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072da:	480c      	ldr	r0, [pc, #48]	; (800730c <prvInitialiseTaskLists+0x70>)
 80072dc:	f7fe f98c 	bl	80055f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072e0:	480b      	ldr	r0, [pc, #44]	; (8007310 <prvInitialiseTaskLists+0x74>)
 80072e2:	f7fe f989 	bl	80055f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072e6:	4b0b      	ldr	r3, [pc, #44]	; (8007314 <prvInitialiseTaskLists+0x78>)
 80072e8:	4a05      	ldr	r2, [pc, #20]	; (8007300 <prvInitialiseTaskLists+0x64>)
 80072ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072ec:	4b0a      	ldr	r3, [pc, #40]	; (8007318 <prvInitialiseTaskLists+0x7c>)
 80072ee:	4a05      	ldr	r2, [pc, #20]	; (8007304 <prvInitialiseTaskLists+0x68>)
 80072f0:	601a      	str	r2, [r3, #0]
}
 80072f2:	bf00      	nop
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	20000960 	.word	0x20000960
 8007300:	20000dc0 	.word	0x20000dc0
 8007304:	20000dd4 	.word	0x20000dd4
 8007308:	20000df0 	.word	0x20000df0
 800730c:	20000e04 	.word	0x20000e04
 8007310:	20000e1c 	.word	0x20000e1c
 8007314:	20000de8 	.word	0x20000de8
 8007318:	20000dec 	.word	0x20000dec

0800731c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007322:	e019      	b.n	8007358 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007324:	f000 feb8 	bl	8008098 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007328:	4b0f      	ldr	r3, [pc, #60]	; (8007368 <prvCheckTasksWaitingTermination+0x4c>)
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3304      	adds	r3, #4
 8007334:	4618      	mov	r0, r3
 8007336:	f7fe f9e9 	bl	800570c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800733a:	4b0c      	ldr	r3, [pc, #48]	; (800736c <prvCheckTasksWaitingTermination+0x50>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3b01      	subs	r3, #1
 8007340:	4a0a      	ldr	r2, [pc, #40]	; (800736c <prvCheckTasksWaitingTermination+0x50>)
 8007342:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007344:	4b0a      	ldr	r3, [pc, #40]	; (8007370 <prvCheckTasksWaitingTermination+0x54>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3b01      	subs	r3, #1
 800734a:	4a09      	ldr	r2, [pc, #36]	; (8007370 <prvCheckTasksWaitingTermination+0x54>)
 800734c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800734e:	f000 fed5 	bl	80080fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f80e 	bl	8007374 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007358:	4b05      	ldr	r3, [pc, #20]	; (8007370 <prvCheckTasksWaitingTermination+0x54>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e1      	bne.n	8007324 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	20000e04 	.word	0x20000e04
 800736c:	20000e30 	.word	0x20000e30
 8007370:	20000e18 	.word	0x20000e18

08007374 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007382:	2b00      	cmp	r3, #0
 8007384:	d108      	bne.n	8007398 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738a:	4618      	mov	r0, r3
 800738c:	f001 f86e 	bl	800846c <vPortFree>
				vPortFree( pxTCB );
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f001 f86b 	bl	800846c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007396:	e019      	b.n	80073cc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d103      	bne.n	80073aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f001 f862 	bl	800846c <vPortFree>
	}
 80073a8:	e010      	b.n	80073cc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d00b      	beq.n	80073cc <prvDeleteTCB+0x58>
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	b672      	cpsid	i
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	b662      	cpsie	i
 80073c8:	60fb      	str	r3, [r7, #12]
 80073ca:	e7fe      	b.n	80073ca <prvDeleteTCB+0x56>
	}
 80073cc:	bf00      	nop
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073da:	4b0c      	ldr	r3, [pc, #48]	; (800740c <prvResetNextTaskUnblockTime+0x38>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d104      	bne.n	80073ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073e4:	4b0a      	ldr	r3, [pc, #40]	; (8007410 <prvResetNextTaskUnblockTime+0x3c>)
 80073e6:	f04f 32ff 	mov.w	r2, #4294967295
 80073ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073ec:	e008      	b.n	8007400 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ee:	4b07      	ldr	r3, [pc, #28]	; (800740c <prvResetNextTaskUnblockTime+0x38>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	4a04      	ldr	r2, [pc, #16]	; (8007410 <prvResetNextTaskUnblockTime+0x3c>)
 80073fe:	6013      	str	r3, [r2, #0]
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	20000de8 	.word	0x20000de8
 8007410:	20000e50 	.word	0x20000e50

08007414 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800741a:	4b0b      	ldr	r3, [pc, #44]	; (8007448 <xTaskGetSchedulerState+0x34>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d102      	bne.n	8007428 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007422:	2301      	movs	r3, #1
 8007424:	607b      	str	r3, [r7, #4]
 8007426:	e008      	b.n	800743a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007428:	4b08      	ldr	r3, [pc, #32]	; (800744c <xTaskGetSchedulerState+0x38>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d102      	bne.n	8007436 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007430:	2302      	movs	r3, #2
 8007432:	607b      	str	r3, [r7, #4]
 8007434:	e001      	b.n	800743a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007436:	2300      	movs	r3, #0
 8007438:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800743a:	687b      	ldr	r3, [r7, #4]
	}
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	20000e3c 	.word	0x20000e3c
 800744c:	20000e58 	.word	0x20000e58

08007450 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800745c:	2300      	movs	r3, #0
 800745e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d051      	beq.n	800750a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746a:	4b2a      	ldr	r3, [pc, #168]	; (8007514 <xTaskPriorityInherit+0xc4>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007470:	429a      	cmp	r2, r3
 8007472:	d241      	bcs.n	80074f8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	2b00      	cmp	r3, #0
 800747a:	db06      	blt.n	800748a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800747c:	4b25      	ldr	r3, [pc, #148]	; (8007514 <xTaskPriorityInherit+0xc4>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007482:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	6959      	ldr	r1, [r3, #20]
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007492:	4613      	mov	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4413      	add	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4a1f      	ldr	r2, [pc, #124]	; (8007518 <xTaskPriorityInherit+0xc8>)
 800749c:	4413      	add	r3, r2
 800749e:	4299      	cmp	r1, r3
 80074a0:	d122      	bne.n	80074e8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	3304      	adds	r3, #4
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fe f930 	bl	800570c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074ac:	4b19      	ldr	r3, [pc, #100]	; (8007514 <xTaskPriorityInherit+0xc4>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ba:	4b18      	ldr	r3, [pc, #96]	; (800751c <xTaskPriorityInherit+0xcc>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d903      	bls.n	80074ca <xTaskPriorityInherit+0x7a>
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c6:	4a15      	ldr	r2, [pc, #84]	; (800751c <xTaskPriorityInherit+0xcc>)
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ce:	4613      	mov	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4a10      	ldr	r2, [pc, #64]	; (8007518 <xTaskPriorityInherit+0xc8>)
 80074d8:	441a      	add	r2, r3
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	3304      	adds	r3, #4
 80074de:	4619      	mov	r1, r3
 80074e0:	4610      	mov	r0, r2
 80074e2:	f7fe f8b6 	bl	8005652 <vListInsertEnd>
 80074e6:	e004      	b.n	80074f2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074e8:	4b0a      	ldr	r3, [pc, #40]	; (8007514 <xTaskPriorityInherit+0xc4>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80074f2:	2301      	movs	r3, #1
 80074f4:	60fb      	str	r3, [r7, #12]
 80074f6:	e008      	b.n	800750a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074fc:	4b05      	ldr	r3, [pc, #20]	; (8007514 <xTaskPriorityInherit+0xc4>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007502:	429a      	cmp	r2, r3
 8007504:	d201      	bcs.n	800750a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007506:	2301      	movs	r3, #1
 8007508:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800750a:	68fb      	ldr	r3, [r7, #12]
	}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	2000095c 	.word	0x2000095c
 8007518:	20000960 	.word	0x20000960
 800751c:	20000e38 	.word	0x20000e38

08007520 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800752c:	2300      	movs	r3, #0
 800752e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d058      	beq.n	80075e8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007536:	4b2f      	ldr	r3, [pc, #188]	; (80075f4 <xTaskPriorityDisinherit+0xd4>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	429a      	cmp	r2, r3
 800753e:	d00b      	beq.n	8007558 <xTaskPriorityDisinherit+0x38>
 8007540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007544:	b672      	cpsid	i
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	b662      	cpsie	i
 8007554:	60fb      	str	r3, [r7, #12]
 8007556:	e7fe      	b.n	8007556 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10b      	bne.n	8007578 <xTaskPriorityDisinherit+0x58>
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	b672      	cpsid	i
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	b662      	cpsie	i
 8007574:	60bb      	str	r3, [r7, #8]
 8007576:	e7fe      	b.n	8007576 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800757c:	1e5a      	subs	r2, r3, #1
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800758a:	429a      	cmp	r2, r3
 800758c:	d02c      	beq.n	80075e8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007592:	2b00      	cmp	r3, #0
 8007594:	d128      	bne.n	80075e8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	3304      	adds	r3, #4
 800759a:	4618      	mov	r0, r3
 800759c:	f7fe f8b6 	bl	800570c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b8:	4b0f      	ldr	r3, [pc, #60]	; (80075f8 <xTaskPriorityDisinherit+0xd8>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d903      	bls.n	80075c8 <xTaskPriorityDisinherit+0xa8>
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	4a0c      	ldr	r2, [pc, #48]	; (80075f8 <xTaskPriorityDisinherit+0xd8>)
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075cc:	4613      	mov	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4a09      	ldr	r2, [pc, #36]	; (80075fc <xTaskPriorityDisinherit+0xdc>)
 80075d6:	441a      	add	r2, r3
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	3304      	adds	r3, #4
 80075dc:	4619      	mov	r1, r3
 80075de:	4610      	mov	r0, r2
 80075e0:	f7fe f837 	bl	8005652 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075e4:	2301      	movs	r3, #1
 80075e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075e8:	697b      	ldr	r3, [r7, #20]
	}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	2000095c 	.word	0x2000095c
 80075f8:	20000e38 	.word	0x20000e38
 80075fc:	20000960 	.word	0x20000960

08007600 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007600:	b580      	push	{r7, lr}
 8007602:	b088      	sub	sp, #32
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800760e:	2301      	movs	r3, #1
 8007610:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d06c      	beq.n	80076f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10b      	bne.n	8007638 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	b672      	cpsid	i
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	b662      	cpsie	i
 8007634:	60fb      	str	r3, [r7, #12]
 8007636:	e7fe      	b.n	8007636 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800763c:	683a      	ldr	r2, [r7, #0]
 800763e:	429a      	cmp	r2, r3
 8007640:	d902      	bls.n	8007648 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	61fb      	str	r3, [r7, #28]
 8007646:	e002      	b.n	800764e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800764c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007652:	69fa      	ldr	r2, [r7, #28]
 8007654:	429a      	cmp	r2, r3
 8007656:	d04c      	beq.n	80076f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	429a      	cmp	r2, r3
 8007660:	d147      	bne.n	80076f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007662:	4b26      	ldr	r3, [pc, #152]	; (80076fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	429a      	cmp	r2, r3
 800766a:	d10b      	bne.n	8007684 <vTaskPriorityDisinheritAfterTimeout+0x84>
 800766c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007670:	b672      	cpsid	i
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	b662      	cpsie	i
 8007680:	60bb      	str	r3, [r7, #8]
 8007682:	e7fe      	b.n	8007682 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	69fa      	ldr	r2, [r7, #28]
 800768e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	2b00      	cmp	r3, #0
 8007696:	db04      	blt.n	80076a2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	6959      	ldr	r1, [r3, #20]
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	4613      	mov	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4a13      	ldr	r2, [pc, #76]	; (8007700 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80076b2:	4413      	add	r3, r2
 80076b4:	4299      	cmp	r1, r3
 80076b6:	d11c      	bne.n	80076f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	3304      	adds	r3, #4
 80076bc:	4618      	mov	r0, r3
 80076be:	f7fe f825 	bl	800570c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c6:	4b0f      	ldr	r3, [pc, #60]	; (8007704 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d903      	bls.n	80076d6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d2:	4a0c      	ldr	r2, [pc, #48]	; (8007704 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80076d4:	6013      	str	r3, [r2, #0]
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4a07      	ldr	r2, [pc, #28]	; (8007700 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80076e4:	441a      	add	r2, r3
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	3304      	adds	r3, #4
 80076ea:	4619      	mov	r1, r3
 80076ec:	4610      	mov	r0, r2
 80076ee:	f7fd ffb0 	bl	8005652 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076f2:	bf00      	nop
 80076f4:	3720      	adds	r7, #32
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	2000095c 	.word	0x2000095c
 8007700:	20000960 	.word	0x20000960
 8007704:	20000e38 	.word	0x20000e38

08007708 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800770c:	4b07      	ldr	r3, [pc, #28]	; (800772c <pvTaskIncrementMutexHeldCount+0x24>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d004      	beq.n	800771e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007714:	4b05      	ldr	r3, [pc, #20]	; (800772c <pvTaskIncrementMutexHeldCount+0x24>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800771a:	3201      	adds	r2, #1
 800771c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800771e:	4b03      	ldr	r3, [pc, #12]	; (800772c <pvTaskIncrementMutexHeldCount+0x24>)
 8007720:	681b      	ldr	r3, [r3, #0]
	}
 8007722:	4618      	mov	r0, r3
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	2000095c 	.word	0x2000095c

08007730 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800773a:	4b21      	ldr	r3, [pc, #132]	; (80077c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007740:	4b20      	ldr	r3, [pc, #128]	; (80077c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3304      	adds	r3, #4
 8007746:	4618      	mov	r0, r3
 8007748:	f7fd ffe0 	bl	800570c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007752:	d10a      	bne.n	800776a <prvAddCurrentTaskToDelayedList+0x3a>
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d007      	beq.n	800776a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800775a:	4b1a      	ldr	r3, [pc, #104]	; (80077c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3304      	adds	r3, #4
 8007760:	4619      	mov	r1, r3
 8007762:	4819      	ldr	r0, [pc, #100]	; (80077c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007764:	f7fd ff75 	bl	8005652 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007768:	e026      	b.n	80077b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4413      	add	r3, r2
 8007770:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007772:	4b14      	ldr	r3, [pc, #80]	; (80077c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	429a      	cmp	r2, r3
 8007780:	d209      	bcs.n	8007796 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007782:	4b12      	ldr	r3, [pc, #72]	; (80077cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	4b0f      	ldr	r3, [pc, #60]	; (80077c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3304      	adds	r3, #4
 800778c:	4619      	mov	r1, r3
 800778e:	4610      	mov	r0, r2
 8007790:	f7fd ff83 	bl	800569a <vListInsert>
}
 8007794:	e010      	b.n	80077b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007796:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	4b0a      	ldr	r3, [pc, #40]	; (80077c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3304      	adds	r3, #4
 80077a0:	4619      	mov	r1, r3
 80077a2:	4610      	mov	r0, r2
 80077a4:	f7fd ff79 	bl	800569a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077a8:	4b0a      	ldr	r3, [pc, #40]	; (80077d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d202      	bcs.n	80077b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80077b2:	4a08      	ldr	r2, [pc, #32]	; (80077d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	6013      	str	r3, [r2, #0]
}
 80077b8:	bf00      	nop
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	20000e34 	.word	0x20000e34
 80077c4:	2000095c 	.word	0x2000095c
 80077c8:	20000e1c 	.word	0x20000e1c
 80077cc:	20000dec 	.word	0x20000dec
 80077d0:	20000de8 	.word	0x20000de8
 80077d4:	20000e50 	.word	0x20000e50

080077d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08a      	sub	sp, #40	; 0x28
 80077dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80077de:	2300      	movs	r3, #0
 80077e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80077e2:	f000 fb0d 	bl	8007e00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80077e6:	4b1d      	ldr	r3, [pc, #116]	; (800785c <xTimerCreateTimerTask+0x84>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d021      	beq.n	8007832 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80077f2:	2300      	movs	r3, #0
 80077f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80077f6:	1d3a      	adds	r2, r7, #4
 80077f8:	f107 0108 	add.w	r1, r7, #8
 80077fc:	f107 030c 	add.w	r3, r7, #12
 8007800:	4618      	mov	r0, r3
 8007802:	f7fd fedf 	bl	80055c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007806:	6879      	ldr	r1, [r7, #4]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	9202      	str	r2, [sp, #8]
 800780e:	9301      	str	r3, [sp, #4]
 8007810:	2302      	movs	r3, #2
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	2300      	movs	r3, #0
 8007816:	460a      	mov	r2, r1
 8007818:	4911      	ldr	r1, [pc, #68]	; (8007860 <xTimerCreateTimerTask+0x88>)
 800781a:	4812      	ldr	r0, [pc, #72]	; (8007864 <xTimerCreateTimerTask+0x8c>)
 800781c:	f7fe ffd2 	bl	80067c4 <xTaskCreateStatic>
 8007820:	4602      	mov	r2, r0
 8007822:	4b11      	ldr	r3, [pc, #68]	; (8007868 <xTimerCreateTimerTask+0x90>)
 8007824:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007826:	4b10      	ldr	r3, [pc, #64]	; (8007868 <xTimerCreateTimerTask+0x90>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800782e:	2301      	movs	r3, #1
 8007830:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10b      	bne.n	8007850 <xTimerCreateTimerTask+0x78>
 8007838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783c:	b672      	cpsid	i
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	b662      	cpsie	i
 800784c:	613b      	str	r3, [r7, #16]
 800784e:	e7fe      	b.n	800784e <xTimerCreateTimerTask+0x76>
	return xReturn;
 8007850:	697b      	ldr	r3, [r7, #20]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	20000e8c 	.word	0x20000e8c
 8007860:	08009080 	.word	0x08009080
 8007864:	080079a5 	.word	0x080079a5
 8007868:	20000e90 	.word	0x20000e90

0800786c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08a      	sub	sp, #40	; 0x28
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
 8007878:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800787a:	2300      	movs	r3, #0
 800787c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10b      	bne.n	800789c <xTimerGenericCommand+0x30>
 8007884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007888:	b672      	cpsid	i
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	b662      	cpsie	i
 8007898:	623b      	str	r3, [r7, #32]
 800789a:	e7fe      	b.n	800789a <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800789c:	4b19      	ldr	r3, [pc, #100]	; (8007904 <xTimerGenericCommand+0x98>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d02a      	beq.n	80078fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	2b05      	cmp	r3, #5
 80078b4:	dc18      	bgt.n	80078e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078b6:	f7ff fdad 	bl	8007414 <xTaskGetSchedulerState>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d109      	bne.n	80078d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078c0:	4b10      	ldr	r3, [pc, #64]	; (8007904 <xTimerGenericCommand+0x98>)
 80078c2:	6818      	ldr	r0, [r3, #0]
 80078c4:	f107 0110 	add.w	r1, r7, #16
 80078c8:	2300      	movs	r3, #0
 80078ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078cc:	f7fe f902 	bl	8005ad4 <xQueueGenericSend>
 80078d0:	6278      	str	r0, [r7, #36]	; 0x24
 80078d2:	e012      	b.n	80078fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80078d4:	4b0b      	ldr	r3, [pc, #44]	; (8007904 <xTimerGenericCommand+0x98>)
 80078d6:	6818      	ldr	r0, [r3, #0]
 80078d8:	f107 0110 	add.w	r1, r7, #16
 80078dc:	2300      	movs	r3, #0
 80078de:	2200      	movs	r2, #0
 80078e0:	f7fe f8f8 	bl	8005ad4 <xQueueGenericSend>
 80078e4:	6278      	str	r0, [r7, #36]	; 0x24
 80078e6:	e008      	b.n	80078fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80078e8:	4b06      	ldr	r3, [pc, #24]	; (8007904 <xTimerGenericCommand+0x98>)
 80078ea:	6818      	ldr	r0, [r3, #0]
 80078ec:	f107 0110 	add.w	r1, r7, #16
 80078f0:	2300      	movs	r3, #0
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	f7fe f9f0 	bl	8005cd8 <xQueueGenericSendFromISR>
 80078f8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3728      	adds	r7, #40	; 0x28
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	20000e8c 	.word	0x20000e8c

08007908 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b088      	sub	sp, #32
 800790c:	af02      	add	r7, sp, #8
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007912:	4b23      	ldr	r3, [pc, #140]	; (80079a0 <prvProcessExpiredTimer+0x98>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	3304      	adds	r3, #4
 8007920:	4618      	mov	r0, r3
 8007922:	f7fd fef3 	bl	800570c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b00      	cmp	r3, #0
 8007932:	d023      	beq.n	800797c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	699a      	ldr	r2, [r3, #24]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	18d1      	adds	r1, r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	6978      	ldr	r0, [r7, #20]
 8007942:	f000 f8d3 	bl	8007aec <prvInsertTimerInActiveList>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d020      	beq.n	800798e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800794c:	2300      	movs	r3, #0
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	2300      	movs	r3, #0
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	2100      	movs	r1, #0
 8007956:	6978      	ldr	r0, [r7, #20]
 8007958:	f7ff ff88 	bl	800786c <xTimerGenericCommand>
 800795c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d114      	bne.n	800798e <prvProcessExpiredTimer+0x86>
 8007964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007968:	b672      	cpsid	i
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	b662      	cpsie	i
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	e7fe      	b.n	800797a <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007982:	f023 0301 	bic.w	r3, r3, #1
 8007986:	b2da      	uxtb	r2, r3
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	6978      	ldr	r0, [r7, #20]
 8007994:	4798      	blx	r3
}
 8007996:	bf00      	nop
 8007998:	3718      	adds	r7, #24
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20000e84 	.word	0x20000e84

080079a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079ac:	f107 0308 	add.w	r3, r7, #8
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 f857 	bl	8007a64 <prvGetNextExpireTime>
 80079b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	4619      	mov	r1, r3
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 f803 	bl	80079c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80079c2:	f000 f8d5 	bl	8007b70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079c6:	e7f1      	b.n	80079ac <prvTimerTask+0x8>

080079c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80079d2:	f7ff f93b 	bl	8006c4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079d6:	f107 0308 	add.w	r3, r7, #8
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 f866 	bl	8007aac <prvSampleTimeNow>
 80079e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d130      	bne.n	8007a4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10a      	bne.n	8007a04 <prvProcessTimerOrBlockTask+0x3c>
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d806      	bhi.n	8007a04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80079f6:	f7ff f937 	bl	8006c68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80079fa:	68f9      	ldr	r1, [r7, #12]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff ff83 	bl	8007908 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a02:	e024      	b.n	8007a4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d008      	beq.n	8007a1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a0a:	4b13      	ldr	r3, [pc, #76]	; (8007a58 <prvProcessTimerOrBlockTask+0x90>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <prvProcessTimerOrBlockTask+0x50>
 8007a14:	2301      	movs	r3, #1
 8007a16:	e000      	b.n	8007a1a <prvProcessTimerOrBlockTask+0x52>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a1c:	4b0f      	ldr	r3, [pc, #60]	; (8007a5c <prvProcessTimerOrBlockTask+0x94>)
 8007a1e:	6818      	ldr	r0, [r3, #0]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	4619      	mov	r1, r3
 8007a2a:	f7fe fe97 	bl	800675c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a2e:	f7ff f91b 	bl	8006c68 <xTaskResumeAll>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10a      	bne.n	8007a4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a38:	4b09      	ldr	r3, [pc, #36]	; (8007a60 <prvProcessTimerOrBlockTask+0x98>)
 8007a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	f3bf 8f6f 	isb	sy
}
 8007a48:	e001      	b.n	8007a4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a4a:	f7ff f90d 	bl	8006c68 <xTaskResumeAll>
}
 8007a4e:	bf00      	nop
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	20000e88 	.word	0x20000e88
 8007a5c:	20000e8c 	.word	0x20000e8c
 8007a60:	e000ed04 	.word	0xe000ed04

08007a64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a6c:	4b0e      	ldr	r3, [pc, #56]	; (8007aa8 <prvGetNextExpireTime+0x44>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d101      	bne.n	8007a7a <prvGetNextExpireTime+0x16>
 8007a76:	2201      	movs	r2, #1
 8007a78:	e000      	b.n	8007a7c <prvGetNextExpireTime+0x18>
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d105      	bne.n	8007a94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a88:	4b07      	ldr	r3, [pc, #28]	; (8007aa8 <prvGetNextExpireTime+0x44>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	60fb      	str	r3, [r7, #12]
 8007a92:	e001      	b.n	8007a98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a98:	68fb      	ldr	r3, [r7, #12]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	20000e84 	.word	0x20000e84

08007aac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ab4:	f7ff f976 	bl	8006da4 <xTaskGetTickCount>
 8007ab8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007aba:	4b0b      	ldr	r3, [pc, #44]	; (8007ae8 <prvSampleTimeNow+0x3c>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d205      	bcs.n	8007ad0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ac4:	f000 f936 	bl	8007d34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	e002      	b.n	8007ad6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ad6:	4a04      	ldr	r2, [pc, #16]	; (8007ae8 <prvSampleTimeNow+0x3c>)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007adc:	68fb      	ldr	r3, [r7, #12]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000e94 	.word	0x20000e94

08007aec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
 8007af8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007afa:	2300      	movs	r3, #0
 8007afc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d812      	bhi.n	8007b38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	1ad2      	subs	r2, r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d302      	bcc.n	8007b26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b20:	2301      	movs	r3, #1
 8007b22:	617b      	str	r3, [r7, #20]
 8007b24:	e01b      	b.n	8007b5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b26:	4b10      	ldr	r3, [pc, #64]	; (8007b68 <prvInsertTimerInActiveList+0x7c>)
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	4619      	mov	r1, r3
 8007b30:	4610      	mov	r0, r2
 8007b32:	f7fd fdb2 	bl	800569a <vListInsert>
 8007b36:	e012      	b.n	8007b5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d206      	bcs.n	8007b4e <prvInsertTimerInActiveList+0x62>
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d302      	bcc.n	8007b4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	617b      	str	r3, [r7, #20]
 8007b4c:	e007      	b.n	8007b5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b4e:	4b07      	ldr	r3, [pc, #28]	; (8007b6c <prvInsertTimerInActiveList+0x80>)
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3304      	adds	r3, #4
 8007b56:	4619      	mov	r1, r3
 8007b58:	4610      	mov	r0, r2
 8007b5a:	f7fd fd9e 	bl	800569a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b5e:	697b      	ldr	r3, [r7, #20]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3718      	adds	r7, #24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	20000e88 	.word	0x20000e88
 8007b6c:	20000e84 	.word	0x20000e84

08007b70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b08e      	sub	sp, #56	; 0x38
 8007b74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b76:	e0cc      	b.n	8007d12 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	da19      	bge.n	8007bb2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b7e:	1d3b      	adds	r3, r7, #4
 8007b80:	3304      	adds	r3, #4
 8007b82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10b      	bne.n	8007ba2 <prvProcessReceivedCommands+0x32>
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	b672      	cpsid	i
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	b662      	cpsie	i
 8007b9e:	61fb      	str	r3, [r7, #28]
 8007ba0:	e7fe      	b.n	8007ba0 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ba8:	6850      	ldr	r0, [r2, #4]
 8007baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bac:	6892      	ldr	r2, [r2, #8]
 8007bae:	4611      	mov	r1, r2
 8007bb0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f2c0 80ab 	blt.w	8007d10 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d004      	beq.n	8007bd0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc8:	3304      	adds	r3, #4
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fd fd9e 	bl	800570c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bd0:	463b      	mov	r3, r7
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7ff ff6a 	bl	8007aac <prvSampleTimeNow>
 8007bd8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b09      	cmp	r3, #9
 8007bde:	f200 8098 	bhi.w	8007d12 <prvProcessReceivedCommands+0x1a2>
 8007be2:	a201      	add	r2, pc, #4	; (adr r2, 8007be8 <prvProcessReceivedCommands+0x78>)
 8007be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be8:	08007c11 	.word	0x08007c11
 8007bec:	08007c11 	.word	0x08007c11
 8007bf0:	08007c11 	.word	0x08007c11
 8007bf4:	08007c87 	.word	0x08007c87
 8007bf8:	08007c9b 	.word	0x08007c9b
 8007bfc:	08007ce7 	.word	0x08007ce7
 8007c00:	08007c11 	.word	0x08007c11
 8007c04:	08007c11 	.word	0x08007c11
 8007c08:	08007c87 	.word	0x08007c87
 8007c0c:	08007c9b 	.word	0x08007c9b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c16:	f043 0301 	orr.w	r3, r3, #1
 8007c1a:	b2da      	uxtb	r2, r3
 8007c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	18d1      	adds	r1, r2, r3
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c30:	f7ff ff5c 	bl	8007aec <prvInsertTimerInActiveList>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d06b      	beq.n	8007d12 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d060      	beq.n	8007d12 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	441a      	add	r2, r3
 8007c58:	2300      	movs	r3, #0
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	2100      	movs	r1, #0
 8007c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c62:	f7ff fe03 	bl	800786c <xTimerGenericCommand>
 8007c66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d151      	bne.n	8007d12 <prvProcessReceivedCommands+0x1a2>
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	b672      	cpsid	i
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	b662      	cpsie	i
 8007c82:	61bb      	str	r3, [r7, #24]
 8007c84:	e7fe      	b.n	8007c84 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c8c:	f023 0301 	bic.w	r3, r3, #1
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007c98:	e03b      	b.n	8007d12 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ca0:	f043 0301 	orr.w	r3, r3, #1
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10b      	bne.n	8007cd2 <prvProcessReceivedCommands+0x162>
 8007cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbe:	b672      	cpsid	i
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	b662      	cpsie	i
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	e7fe      	b.n	8007cd0 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd4:	699a      	ldr	r2, [r3, #24]
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd8:	18d1      	adds	r1, r2, r3
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ce0:	f7ff ff04 	bl	8007aec <prvInsertTimerInActiveList>
					break;
 8007ce4:	e015      	b.n	8007d12 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cec:	f003 0302 	and.w	r3, r3, #2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d103      	bne.n	8007cfc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cf6:	f000 fbb9 	bl	800846c <vPortFree>
 8007cfa:	e00a      	b.n	8007d12 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d02:	f023 0301 	bic.w	r3, r3, #1
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d0e:	e000      	b.n	8007d12 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d12:	4b07      	ldr	r3, [pc, #28]	; (8007d30 <prvProcessReceivedCommands+0x1c0>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	1d39      	adds	r1, r7, #4
 8007d18:	2200      	movs	r2, #0
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fe f90a 	bl	8005f34 <xQueueReceive>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f47f af28 	bne.w	8007b78 <prvProcessReceivedCommands+0x8>
	}
}
 8007d28:	bf00      	nop
 8007d2a:	3730      	adds	r7, #48	; 0x30
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	20000e8c 	.word	0x20000e8c

08007d34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b088      	sub	sp, #32
 8007d38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d3a:	e049      	b.n	8007dd0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d3c:	4b2e      	ldr	r3, [pc, #184]	; (8007df8 <prvSwitchTimerLists+0xc4>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d46:	4b2c      	ldr	r3, [pc, #176]	; (8007df8 <prvSwitchTimerLists+0xc4>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3304      	adds	r3, #4
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7fd fcd9 	bl	800570c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d68:	f003 0304 	and.w	r3, r3, #4
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d02f      	beq.n	8007dd0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	4413      	add	r3, r2
 8007d78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d90e      	bls.n	8007da0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d8e:	4b1a      	ldr	r3, [pc, #104]	; (8007df8 <prvSwitchTimerLists+0xc4>)
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	3304      	adds	r3, #4
 8007d96:	4619      	mov	r1, r3
 8007d98:	4610      	mov	r0, r2
 8007d9a:	f7fd fc7e 	bl	800569a <vListInsert>
 8007d9e:	e017      	b.n	8007dd0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007da0:	2300      	movs	r3, #0
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	2300      	movs	r3, #0
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	2100      	movs	r1, #0
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f7ff fd5e 	bl	800786c <xTimerGenericCommand>
 8007db0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10b      	bne.n	8007dd0 <prvSwitchTimerLists+0x9c>
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	b672      	cpsid	i
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	b662      	cpsie	i
 8007dcc:	603b      	str	r3, [r7, #0]
 8007dce:	e7fe      	b.n	8007dce <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dd0:	4b09      	ldr	r3, [pc, #36]	; (8007df8 <prvSwitchTimerLists+0xc4>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1b0      	bne.n	8007d3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007dda:	4b07      	ldr	r3, [pc, #28]	; (8007df8 <prvSwitchTimerLists+0xc4>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007de0:	4b06      	ldr	r3, [pc, #24]	; (8007dfc <prvSwitchTimerLists+0xc8>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a04      	ldr	r2, [pc, #16]	; (8007df8 <prvSwitchTimerLists+0xc4>)
 8007de6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007de8:	4a04      	ldr	r2, [pc, #16]	; (8007dfc <prvSwitchTimerLists+0xc8>)
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	6013      	str	r3, [r2, #0]
}
 8007dee:	bf00      	nop
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20000e84 	.word	0x20000e84
 8007dfc:	20000e88 	.word	0x20000e88

08007e00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e06:	f000 f947 	bl	8008098 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e0a:	4b15      	ldr	r3, [pc, #84]	; (8007e60 <prvCheckForValidListAndQueue+0x60>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d120      	bne.n	8007e54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e12:	4814      	ldr	r0, [pc, #80]	; (8007e64 <prvCheckForValidListAndQueue+0x64>)
 8007e14:	f7fd fbf0 	bl	80055f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e18:	4813      	ldr	r0, [pc, #76]	; (8007e68 <prvCheckForValidListAndQueue+0x68>)
 8007e1a:	f7fd fbed 	bl	80055f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e1e:	4b13      	ldr	r3, [pc, #76]	; (8007e6c <prvCheckForValidListAndQueue+0x6c>)
 8007e20:	4a10      	ldr	r2, [pc, #64]	; (8007e64 <prvCheckForValidListAndQueue+0x64>)
 8007e22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e24:	4b12      	ldr	r3, [pc, #72]	; (8007e70 <prvCheckForValidListAndQueue+0x70>)
 8007e26:	4a10      	ldr	r2, [pc, #64]	; (8007e68 <prvCheckForValidListAndQueue+0x68>)
 8007e28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	4b11      	ldr	r3, [pc, #68]	; (8007e74 <prvCheckForValidListAndQueue+0x74>)
 8007e30:	4a11      	ldr	r2, [pc, #68]	; (8007e78 <prvCheckForValidListAndQueue+0x78>)
 8007e32:	2110      	movs	r1, #16
 8007e34:	200a      	movs	r0, #10
 8007e36:	f7fd fcfd 	bl	8005834 <xQueueGenericCreateStatic>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	4b08      	ldr	r3, [pc, #32]	; (8007e60 <prvCheckForValidListAndQueue+0x60>)
 8007e3e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e40:	4b07      	ldr	r3, [pc, #28]	; (8007e60 <prvCheckForValidListAndQueue+0x60>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d005      	beq.n	8007e54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e48:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <prvCheckForValidListAndQueue+0x60>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	490b      	ldr	r1, [pc, #44]	; (8007e7c <prvCheckForValidListAndQueue+0x7c>)
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fe fc32 	bl	80066b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e54:	f000 f952 	bl	80080fc <vPortExitCritical>
}
 8007e58:	bf00      	nop
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000e8c 	.word	0x20000e8c
 8007e64:	20000e5c 	.word	0x20000e5c
 8007e68:	20000e70 	.word	0x20000e70
 8007e6c:	20000e84 	.word	0x20000e84
 8007e70:	20000e88 	.word	0x20000e88
 8007e74:	20000f38 	.word	0x20000f38
 8007e78:	20000e98 	.word	0x20000e98
 8007e7c:	08009088 	.word	0x08009088

08007e80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	3b04      	subs	r3, #4
 8007e90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3b04      	subs	r3, #4
 8007e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f023 0201 	bic.w	r2, r3, #1
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	3b04      	subs	r3, #4
 8007eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007eb0:	4a0c      	ldr	r2, [pc, #48]	; (8007ee4 <pxPortInitialiseStack+0x64>)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	3b14      	subs	r3, #20
 8007eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	3b04      	subs	r3, #4
 8007ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f06f 0202 	mvn.w	r2, #2
 8007ece:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	3b20      	subs	r3, #32
 8007ed4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	08007ee9 	.word	0x08007ee9

08007ee8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ef2:	4b13      	ldr	r3, [pc, #76]	; (8007f40 <prvTaskExitError+0x58>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efa:	d00b      	beq.n	8007f14 <prvTaskExitError+0x2c>
 8007efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f00:	b672      	cpsid	i
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	b662      	cpsie	i
 8007f10:	60fb      	str	r3, [r7, #12]
 8007f12:	e7fe      	b.n	8007f12 <prvTaskExitError+0x2a>
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	b672      	cpsid	i
 8007f1a:	f383 8811 	msr	BASEPRI, r3
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	b662      	cpsie	i
 8007f28:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f2a:	bf00      	nop
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d0fc      	beq.n	8007f2c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f32:	bf00      	nop
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	200001d0 	.word	0x200001d0
	...

08007f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f50:	4b07      	ldr	r3, [pc, #28]	; (8007f70 <pxCurrentTCBConst2>)
 8007f52:	6819      	ldr	r1, [r3, #0]
 8007f54:	6808      	ldr	r0, [r1, #0]
 8007f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5a:	f380 8809 	msr	PSP, r0
 8007f5e:	f3bf 8f6f 	isb	sy
 8007f62:	f04f 0000 	mov.w	r0, #0
 8007f66:	f380 8811 	msr	BASEPRI, r0
 8007f6a:	4770      	bx	lr
 8007f6c:	f3af 8000 	nop.w

08007f70 <pxCurrentTCBConst2>:
 8007f70:	2000095c 	.word	0x2000095c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f74:	bf00      	nop
 8007f76:	bf00      	nop

08007f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f78:	4808      	ldr	r0, [pc, #32]	; (8007f9c <prvPortStartFirstTask+0x24>)
 8007f7a:	6800      	ldr	r0, [r0, #0]
 8007f7c:	6800      	ldr	r0, [r0, #0]
 8007f7e:	f380 8808 	msr	MSP, r0
 8007f82:	f04f 0000 	mov.w	r0, #0
 8007f86:	f380 8814 	msr	CONTROL, r0
 8007f8a:	b662      	cpsie	i
 8007f8c:	b661      	cpsie	f
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	df00      	svc	0
 8007f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f9a:	bf00      	nop
 8007f9c:	e000ed08 	.word	0xe000ed08

08007fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fa6:	4b36      	ldr	r3, [pc, #216]	; (8008080 <xPortStartScheduler+0xe0>)
 8007fa8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	22ff      	movs	r2, #255	; 0xff
 8007fb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	4b2e      	ldr	r3, [pc, #184]	; (8008084 <xPortStartScheduler+0xe4>)
 8007fcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fce:	4b2e      	ldr	r3, [pc, #184]	; (8008088 <xPortStartScheduler+0xe8>)
 8007fd0:	2207      	movs	r2, #7
 8007fd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fd4:	e009      	b.n	8007fea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007fd6:	4b2c      	ldr	r3, [pc, #176]	; (8008088 <xPortStartScheduler+0xe8>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	4a2a      	ldr	r2, [pc, #168]	; (8008088 <xPortStartScheduler+0xe8>)
 8007fde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	005b      	lsls	r3, r3, #1
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fea:	78fb      	ldrb	r3, [r7, #3]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff2:	2b80      	cmp	r3, #128	; 0x80
 8007ff4:	d0ef      	beq.n	8007fd6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ff6:	4b24      	ldr	r3, [pc, #144]	; (8008088 <xPortStartScheduler+0xe8>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f1c3 0307 	rsb	r3, r3, #7
 8007ffe:	2b04      	cmp	r3, #4
 8008000:	d00b      	beq.n	800801a <xPortStartScheduler+0x7a>
 8008002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008006:	b672      	cpsid	i
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	b662      	cpsie	i
 8008016:	60bb      	str	r3, [r7, #8]
 8008018:	e7fe      	b.n	8008018 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800801a:	4b1b      	ldr	r3, [pc, #108]	; (8008088 <xPortStartScheduler+0xe8>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	021b      	lsls	r3, r3, #8
 8008020:	4a19      	ldr	r2, [pc, #100]	; (8008088 <xPortStartScheduler+0xe8>)
 8008022:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008024:	4b18      	ldr	r3, [pc, #96]	; (8008088 <xPortStartScheduler+0xe8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800802c:	4a16      	ldr	r2, [pc, #88]	; (8008088 <xPortStartScheduler+0xe8>)
 800802e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	b2da      	uxtb	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008038:	4b14      	ldr	r3, [pc, #80]	; (800808c <xPortStartScheduler+0xec>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a13      	ldr	r2, [pc, #76]	; (800808c <xPortStartScheduler+0xec>)
 800803e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008042:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008044:	4b11      	ldr	r3, [pc, #68]	; (800808c <xPortStartScheduler+0xec>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a10      	ldr	r2, [pc, #64]	; (800808c <xPortStartScheduler+0xec>)
 800804a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800804e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008050:	f000 f8d4 	bl	80081fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008054:	4b0e      	ldr	r3, [pc, #56]	; (8008090 <xPortStartScheduler+0xf0>)
 8008056:	2200      	movs	r2, #0
 8008058:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800805a:	f000 f8f3 	bl	8008244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800805e:	4b0d      	ldr	r3, [pc, #52]	; (8008094 <xPortStartScheduler+0xf4>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a0c      	ldr	r2, [pc, #48]	; (8008094 <xPortStartScheduler+0xf4>)
 8008064:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008068:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800806a:	f7ff ff85 	bl	8007f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800806e:	f7fe ff63 	bl	8006f38 <vTaskSwitchContext>
	prvTaskExitError();
 8008072:	f7ff ff39 	bl	8007ee8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	e000e400 	.word	0xe000e400
 8008084:	20000f88 	.word	0x20000f88
 8008088:	20000f8c 	.word	0x20000f8c
 800808c:	e000ed20 	.word	0xe000ed20
 8008090:	200001d0 	.word	0x200001d0
 8008094:	e000ef34 	.word	0xe000ef34

08008098 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a2:	b672      	cpsid	i
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	b662      	cpsie	i
 80080b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080b4:	4b0f      	ldr	r3, [pc, #60]	; (80080f4 <vPortEnterCritical+0x5c>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3301      	adds	r3, #1
 80080ba:	4a0e      	ldr	r2, [pc, #56]	; (80080f4 <vPortEnterCritical+0x5c>)
 80080bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080be:	4b0d      	ldr	r3, [pc, #52]	; (80080f4 <vPortEnterCritical+0x5c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d110      	bne.n	80080e8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080c6:	4b0c      	ldr	r3, [pc, #48]	; (80080f8 <vPortEnterCritical+0x60>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00b      	beq.n	80080e8 <vPortEnterCritical+0x50>
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	b672      	cpsid	i
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	b662      	cpsie	i
 80080e4:	603b      	str	r3, [r7, #0]
 80080e6:	e7fe      	b.n	80080e6 <vPortEnterCritical+0x4e>
	}
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	200001d0 	.word	0x200001d0
 80080f8:	e000ed04 	.word	0xe000ed04

080080fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008102:	4b12      	ldr	r3, [pc, #72]	; (800814c <vPortExitCritical+0x50>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10b      	bne.n	8008122 <vPortExitCritical+0x26>
 800810a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810e:	b672      	cpsid	i
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	b662      	cpsie	i
 800811e:	607b      	str	r3, [r7, #4]
 8008120:	e7fe      	b.n	8008120 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8008122:	4b0a      	ldr	r3, [pc, #40]	; (800814c <vPortExitCritical+0x50>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3b01      	subs	r3, #1
 8008128:	4a08      	ldr	r2, [pc, #32]	; (800814c <vPortExitCritical+0x50>)
 800812a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800812c:	4b07      	ldr	r3, [pc, #28]	; (800814c <vPortExitCritical+0x50>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d104      	bne.n	800813e <vPortExitCritical+0x42>
 8008134:	2300      	movs	r3, #0
 8008136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800813e:	bf00      	nop
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	200001d0 	.word	0x200001d0

08008150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008150:	f3ef 8009 	mrs	r0, PSP
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	4b15      	ldr	r3, [pc, #84]	; (80081b0 <pxCurrentTCBConst>)
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	f01e 0f10 	tst.w	lr, #16
 8008160:	bf08      	it	eq
 8008162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816a:	6010      	str	r0, [r2, #0]
 800816c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008174:	b672      	cpsid	i
 8008176:	f380 8811 	msr	BASEPRI, r0
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	b662      	cpsie	i
 8008184:	f7fe fed8 	bl	8006f38 <vTaskSwitchContext>
 8008188:	f04f 0000 	mov.w	r0, #0
 800818c:	f380 8811 	msr	BASEPRI, r0
 8008190:	bc09      	pop	{r0, r3}
 8008192:	6819      	ldr	r1, [r3, #0]
 8008194:	6808      	ldr	r0, [r1, #0]
 8008196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819a:	f01e 0f10 	tst.w	lr, #16
 800819e:	bf08      	it	eq
 80081a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081a4:	f380 8809 	msr	PSP, r0
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop

080081b0 <pxCurrentTCBConst>:
 80081b0:	2000095c 	.word	0x2000095c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081b4:	bf00      	nop
 80081b6:	bf00      	nop

080081b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c2:	b672      	cpsid	i
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	b662      	cpsie	i
 80081d2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081d4:	f7fe fdf6 	bl	8006dc4 <xTaskIncrementTick>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081de:	4b06      	ldr	r3, [pc, #24]	; (80081f8 <xPortSysTickHandler+0x40>)
 80081e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	2300      	movs	r3, #0
 80081e8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	e000ed04 	.word	0xe000ed04

080081fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081fc:	b480      	push	{r7}
 80081fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008200:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <vPortSetupTimerInterrupt+0x34>)
 8008202:	2200      	movs	r2, #0
 8008204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008206:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <vPortSetupTimerInterrupt+0x38>)
 8008208:	2200      	movs	r2, #0
 800820a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800820c:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <vPortSetupTimerInterrupt+0x3c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a0a      	ldr	r2, [pc, #40]	; (800823c <vPortSetupTimerInterrupt+0x40>)
 8008212:	fba2 2303 	umull	r2, r3, r2, r3
 8008216:	099b      	lsrs	r3, r3, #6
 8008218:	4a09      	ldr	r2, [pc, #36]	; (8008240 <vPortSetupTimerInterrupt+0x44>)
 800821a:	3b01      	subs	r3, #1
 800821c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800821e:	4b04      	ldr	r3, [pc, #16]	; (8008230 <vPortSetupTimerInterrupt+0x34>)
 8008220:	2207      	movs	r2, #7
 8008222:	601a      	str	r2, [r3, #0]
}
 8008224:	bf00      	nop
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	e000e010 	.word	0xe000e010
 8008234:	e000e018 	.word	0xe000e018
 8008238:	200000b0 	.word	0x200000b0
 800823c:	10624dd3 	.word	0x10624dd3
 8008240:	e000e014 	.word	0xe000e014

08008244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008254 <vPortEnableVFP+0x10>
 8008248:	6801      	ldr	r1, [r0, #0]
 800824a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800824e:	6001      	str	r1, [r0, #0]
 8008250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008252:	bf00      	nop
 8008254:	e000ed88 	.word	0xe000ed88

08008258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800825e:	f3ef 8305 	mrs	r3, IPSR
 8008262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b0f      	cmp	r3, #15
 8008268:	d915      	bls.n	8008296 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800826a:	4a18      	ldr	r2, [pc, #96]	; (80082cc <vPortValidateInterruptPriority+0x74>)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4413      	add	r3, r2
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008274:	4b16      	ldr	r3, [pc, #88]	; (80082d0 <vPortValidateInterruptPriority+0x78>)
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	7afa      	ldrb	r2, [r7, #11]
 800827a:	429a      	cmp	r2, r3
 800827c:	d20b      	bcs.n	8008296 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	b672      	cpsid	i
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	b662      	cpsie	i
 8008292:	607b      	str	r3, [r7, #4]
 8008294:	e7fe      	b.n	8008294 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008296:	4b0f      	ldr	r3, [pc, #60]	; (80082d4 <vPortValidateInterruptPriority+0x7c>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800829e:	4b0e      	ldr	r3, [pc, #56]	; (80082d8 <vPortValidateInterruptPriority+0x80>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d90b      	bls.n	80082be <vPortValidateInterruptPriority+0x66>
 80082a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082aa:	b672      	cpsid	i
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	b662      	cpsie	i
 80082ba:	603b      	str	r3, [r7, #0]
 80082bc:	e7fe      	b.n	80082bc <vPortValidateInterruptPriority+0x64>
	}
 80082be:	bf00      	nop
 80082c0:	3714      	adds	r7, #20
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	e000e3f0 	.word	0xe000e3f0
 80082d0:	20000f88 	.word	0x20000f88
 80082d4:	e000ed0c 	.word	0xe000ed0c
 80082d8:	20000f8c 	.word	0x20000f8c

080082dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b08a      	sub	sp, #40	; 0x28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082e4:	2300      	movs	r3, #0
 80082e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082e8:	f7fe fcb0 	bl	8006c4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082ec:	4b5a      	ldr	r3, [pc, #360]	; (8008458 <pvPortMalloc+0x17c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d101      	bne.n	80082f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082f4:	f000 f916 	bl	8008524 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082f8:	4b58      	ldr	r3, [pc, #352]	; (800845c <pvPortMalloc+0x180>)
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4013      	ands	r3, r2
 8008300:	2b00      	cmp	r3, #0
 8008302:	f040 8090 	bne.w	8008426 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d01e      	beq.n	800834a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800830c:	2208      	movs	r2, #8
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4413      	add	r3, r2
 8008312:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f003 0307 	and.w	r3, r3, #7
 800831a:	2b00      	cmp	r3, #0
 800831c:	d015      	beq.n	800834a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f023 0307 	bic.w	r3, r3, #7
 8008324:	3308      	adds	r3, #8
 8008326:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f003 0307 	and.w	r3, r3, #7
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00b      	beq.n	800834a <pvPortMalloc+0x6e>
 8008332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008336:	b672      	cpsid	i
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	b662      	cpsie	i
 8008346:	617b      	str	r3, [r7, #20]
 8008348:	e7fe      	b.n	8008348 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d06a      	beq.n	8008426 <pvPortMalloc+0x14a>
 8008350:	4b43      	ldr	r3, [pc, #268]	; (8008460 <pvPortMalloc+0x184>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	429a      	cmp	r2, r3
 8008358:	d865      	bhi.n	8008426 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800835a:	4b42      	ldr	r3, [pc, #264]	; (8008464 <pvPortMalloc+0x188>)
 800835c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800835e:	4b41      	ldr	r3, [pc, #260]	; (8008464 <pvPortMalloc+0x188>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008364:	e004      	b.n	8008370 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008368:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	429a      	cmp	r2, r3
 8008378:	d903      	bls.n	8008382 <pvPortMalloc+0xa6>
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1f1      	bne.n	8008366 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008382:	4b35      	ldr	r3, [pc, #212]	; (8008458 <pvPortMalloc+0x17c>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008388:	429a      	cmp	r2, r3
 800838a:	d04c      	beq.n	8008426 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800838c:	6a3b      	ldr	r3, [r7, #32]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2208      	movs	r2, #8
 8008392:	4413      	add	r3, r2
 8008394:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800839e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	1ad2      	subs	r2, r2, r3
 80083a6:	2308      	movs	r3, #8
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d920      	bls.n	80083f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4413      	add	r3, r2
 80083b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	f003 0307 	and.w	r3, r3, #7
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00b      	beq.n	80083d8 <pvPortMalloc+0xfc>
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	b672      	cpsid	i
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	b662      	cpsie	i
 80083d4:	613b      	str	r3, [r7, #16]
 80083d6:	e7fe      	b.n	80083d6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	1ad2      	subs	r2, r2, r3
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083ea:	69b8      	ldr	r0, [r7, #24]
 80083ec:	f000 f8fc 	bl	80085e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083f0:	4b1b      	ldr	r3, [pc, #108]	; (8008460 <pvPortMalloc+0x184>)
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	4a19      	ldr	r2, [pc, #100]	; (8008460 <pvPortMalloc+0x184>)
 80083fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083fe:	4b18      	ldr	r3, [pc, #96]	; (8008460 <pvPortMalloc+0x184>)
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	4b19      	ldr	r3, [pc, #100]	; (8008468 <pvPortMalloc+0x18c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	429a      	cmp	r2, r3
 8008408:	d203      	bcs.n	8008412 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800840a:	4b15      	ldr	r3, [pc, #84]	; (8008460 <pvPortMalloc+0x184>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a16      	ldr	r2, [pc, #88]	; (8008468 <pvPortMalloc+0x18c>)
 8008410:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	4b11      	ldr	r3, [pc, #68]	; (800845c <pvPortMalloc+0x180>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	431a      	orrs	r2, r3
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008426:	f7fe fc1f 	bl	8006c68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	f003 0307 	and.w	r3, r3, #7
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00b      	beq.n	800844c <pvPortMalloc+0x170>
 8008434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008438:	b672      	cpsid	i
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	b662      	cpsie	i
 8008448:	60fb      	str	r3, [r7, #12]
 800844a:	e7fe      	b.n	800844a <pvPortMalloc+0x16e>
	return pvReturn;
 800844c:	69fb      	ldr	r3, [r7, #28]
}
 800844e:	4618      	mov	r0, r3
 8008450:	3728      	adds	r7, #40	; 0x28
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20004b98 	.word	0x20004b98
 800845c:	20004ba4 	.word	0x20004ba4
 8008460:	20004b9c 	.word	0x20004b9c
 8008464:	20004b90 	.word	0x20004b90
 8008468:	20004ba0 	.word	0x20004ba0

0800846c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d04a      	beq.n	8008514 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800847e:	2308      	movs	r3, #8
 8008480:	425b      	negs	r3, r3
 8008482:	697a      	ldr	r2, [r7, #20]
 8008484:	4413      	add	r3, r2
 8008486:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	4b22      	ldr	r3, [pc, #136]	; (800851c <vPortFree+0xb0>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4013      	ands	r3, r2
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10b      	bne.n	80084b2 <vPortFree+0x46>
 800849a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849e:	b672      	cpsid	i
 80084a0:	f383 8811 	msr	BASEPRI, r3
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	b662      	cpsie	i
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	e7fe      	b.n	80084b0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00b      	beq.n	80084d2 <vPortFree+0x66>
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	b672      	cpsid	i
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	b662      	cpsie	i
 80084ce:	60bb      	str	r3, [r7, #8]
 80084d0:	e7fe      	b.n	80084d0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	4b11      	ldr	r3, [pc, #68]	; (800851c <vPortFree+0xb0>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4013      	ands	r3, r2
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d019      	beq.n	8008514 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d115      	bne.n	8008514 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	4b0b      	ldr	r3, [pc, #44]	; (800851c <vPortFree+0xb0>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	43db      	mvns	r3, r3
 80084f2:	401a      	ands	r2, r3
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084f8:	f7fe fba8 	bl	8006c4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	4b07      	ldr	r3, [pc, #28]	; (8008520 <vPortFree+0xb4>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4413      	add	r3, r2
 8008506:	4a06      	ldr	r2, [pc, #24]	; (8008520 <vPortFree+0xb4>)
 8008508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800850a:	6938      	ldr	r0, [r7, #16]
 800850c:	f000 f86c 	bl	80085e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008510:	f7fe fbaa 	bl	8006c68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008514:	bf00      	nop
 8008516:	3718      	adds	r7, #24
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	20004ba4 	.word	0x20004ba4
 8008520:	20004b9c 	.word	0x20004b9c

08008524 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800852a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800852e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008530:	4b27      	ldr	r3, [pc, #156]	; (80085d0 <prvHeapInit+0xac>)
 8008532:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f003 0307 	and.w	r3, r3, #7
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00c      	beq.n	8008558 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	3307      	adds	r3, #7
 8008542:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f023 0307 	bic.w	r3, r3, #7
 800854a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	4a1f      	ldr	r2, [pc, #124]	; (80085d0 <prvHeapInit+0xac>)
 8008554:	4413      	add	r3, r2
 8008556:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800855c:	4a1d      	ldr	r2, [pc, #116]	; (80085d4 <prvHeapInit+0xb0>)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008562:	4b1c      	ldr	r3, [pc, #112]	; (80085d4 <prvHeapInit+0xb0>)
 8008564:	2200      	movs	r2, #0
 8008566:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	4413      	add	r3, r2
 800856e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008570:	2208      	movs	r2, #8
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	1a9b      	subs	r3, r3, r2
 8008576:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f023 0307 	bic.w	r3, r3, #7
 800857e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	4a15      	ldr	r2, [pc, #84]	; (80085d8 <prvHeapInit+0xb4>)
 8008584:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008586:	4b14      	ldr	r3, [pc, #80]	; (80085d8 <prvHeapInit+0xb4>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2200      	movs	r2, #0
 800858c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800858e:	4b12      	ldr	r3, [pc, #72]	; (80085d8 <prvHeapInit+0xb4>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2200      	movs	r2, #0
 8008594:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	1ad2      	subs	r2, r2, r3
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085a4:	4b0c      	ldr	r3, [pc, #48]	; (80085d8 <prvHeapInit+0xb4>)
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	4a0a      	ldr	r2, [pc, #40]	; (80085dc <prvHeapInit+0xb8>)
 80085b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	4a09      	ldr	r2, [pc, #36]	; (80085e0 <prvHeapInit+0xbc>)
 80085ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085bc:	4b09      	ldr	r3, [pc, #36]	; (80085e4 <prvHeapInit+0xc0>)
 80085be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80085c2:	601a      	str	r2, [r3, #0]
}
 80085c4:	bf00      	nop
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	20000f90 	.word	0x20000f90
 80085d4:	20004b90 	.word	0x20004b90
 80085d8:	20004b98 	.word	0x20004b98
 80085dc:	20004ba0 	.word	0x20004ba0
 80085e0:	20004b9c 	.word	0x20004b9c
 80085e4:	20004ba4 	.word	0x20004ba4

080085e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085f0:	4b28      	ldr	r3, [pc, #160]	; (8008694 <prvInsertBlockIntoFreeList+0xac>)
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	e002      	b.n	80085fc <prvInsertBlockIntoFreeList+0x14>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	429a      	cmp	r2, r3
 8008604:	d8f7      	bhi.n	80085f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	4413      	add	r3, r2
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	429a      	cmp	r2, r3
 8008616:	d108      	bne.n	800862a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	441a      	add	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	441a      	add	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	429a      	cmp	r2, r3
 800863c:	d118      	bne.n	8008670 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	4b15      	ldr	r3, [pc, #84]	; (8008698 <prvInsertBlockIntoFreeList+0xb0>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	429a      	cmp	r2, r3
 8008648:	d00d      	beq.n	8008666 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	685a      	ldr	r2, [r3, #4]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	441a      	add	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	e008      	b.n	8008678 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008666:	4b0c      	ldr	r3, [pc, #48]	; (8008698 <prvInsertBlockIntoFreeList+0xb0>)
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	601a      	str	r2, [r3, #0]
 800866e:	e003      	b.n	8008678 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	429a      	cmp	r2, r3
 800867e:	d002      	beq.n	8008686 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008686:	bf00      	nop
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	20004b90 	.word	0x20004b90
 8008698:	20004b98 	.word	0x20004b98

0800869c <__errno>:
 800869c:	4b01      	ldr	r3, [pc, #4]	; (80086a4 <__errno+0x8>)
 800869e:	6818      	ldr	r0, [r3, #0]
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	200001d4 	.word	0x200001d4

080086a8 <__libc_init_array>:
 80086a8:	b570      	push	{r4, r5, r6, lr}
 80086aa:	4e0d      	ldr	r6, [pc, #52]	; (80086e0 <__libc_init_array+0x38>)
 80086ac:	4c0d      	ldr	r4, [pc, #52]	; (80086e4 <__libc_init_array+0x3c>)
 80086ae:	1ba4      	subs	r4, r4, r6
 80086b0:	10a4      	asrs	r4, r4, #2
 80086b2:	2500      	movs	r5, #0
 80086b4:	42a5      	cmp	r5, r4
 80086b6:	d109      	bne.n	80086cc <__libc_init_array+0x24>
 80086b8:	4e0b      	ldr	r6, [pc, #44]	; (80086e8 <__libc_init_array+0x40>)
 80086ba:	4c0c      	ldr	r4, [pc, #48]	; (80086ec <__libc_init_array+0x44>)
 80086bc:	f000 fc94 	bl	8008fe8 <_init>
 80086c0:	1ba4      	subs	r4, r4, r6
 80086c2:	10a4      	asrs	r4, r4, #2
 80086c4:	2500      	movs	r5, #0
 80086c6:	42a5      	cmp	r5, r4
 80086c8:	d105      	bne.n	80086d6 <__libc_init_array+0x2e>
 80086ca:	bd70      	pop	{r4, r5, r6, pc}
 80086cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086d0:	4798      	blx	r3
 80086d2:	3501      	adds	r5, #1
 80086d4:	e7ee      	b.n	80086b4 <__libc_init_array+0xc>
 80086d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086da:	4798      	blx	r3
 80086dc:	3501      	adds	r5, #1
 80086de:	e7f2      	b.n	80086c6 <__libc_init_array+0x1e>
 80086e0:	08009188 	.word	0x08009188
 80086e4:	08009188 	.word	0x08009188
 80086e8:	08009188 	.word	0x08009188
 80086ec:	0800918c 	.word	0x0800918c

080086f0 <memcpy>:
 80086f0:	b510      	push	{r4, lr}
 80086f2:	1e43      	subs	r3, r0, #1
 80086f4:	440a      	add	r2, r1
 80086f6:	4291      	cmp	r1, r2
 80086f8:	d100      	bne.n	80086fc <memcpy+0xc>
 80086fa:	bd10      	pop	{r4, pc}
 80086fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008700:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008704:	e7f7      	b.n	80086f6 <memcpy+0x6>

08008706 <memset>:
 8008706:	4402      	add	r2, r0
 8008708:	4603      	mov	r3, r0
 800870a:	4293      	cmp	r3, r2
 800870c:	d100      	bne.n	8008710 <memset+0xa>
 800870e:	4770      	bx	lr
 8008710:	f803 1b01 	strb.w	r1, [r3], #1
 8008714:	e7f9      	b.n	800870a <memset+0x4>
	...

08008718 <_puts_r>:
 8008718:	b570      	push	{r4, r5, r6, lr}
 800871a:	460e      	mov	r6, r1
 800871c:	4605      	mov	r5, r0
 800871e:	b118      	cbz	r0, 8008728 <_puts_r+0x10>
 8008720:	6983      	ldr	r3, [r0, #24]
 8008722:	b90b      	cbnz	r3, 8008728 <_puts_r+0x10>
 8008724:	f000 fa0c 	bl	8008b40 <__sinit>
 8008728:	69ab      	ldr	r3, [r5, #24]
 800872a:	68ac      	ldr	r4, [r5, #8]
 800872c:	b913      	cbnz	r3, 8008734 <_puts_r+0x1c>
 800872e:	4628      	mov	r0, r5
 8008730:	f000 fa06 	bl	8008b40 <__sinit>
 8008734:	4b23      	ldr	r3, [pc, #140]	; (80087c4 <_puts_r+0xac>)
 8008736:	429c      	cmp	r4, r3
 8008738:	d117      	bne.n	800876a <_puts_r+0x52>
 800873a:	686c      	ldr	r4, [r5, #4]
 800873c:	89a3      	ldrh	r3, [r4, #12]
 800873e:	071b      	lsls	r3, r3, #28
 8008740:	d51d      	bpl.n	800877e <_puts_r+0x66>
 8008742:	6923      	ldr	r3, [r4, #16]
 8008744:	b1db      	cbz	r3, 800877e <_puts_r+0x66>
 8008746:	3e01      	subs	r6, #1
 8008748:	68a3      	ldr	r3, [r4, #8]
 800874a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800874e:	3b01      	subs	r3, #1
 8008750:	60a3      	str	r3, [r4, #8]
 8008752:	b9e9      	cbnz	r1, 8008790 <_puts_r+0x78>
 8008754:	2b00      	cmp	r3, #0
 8008756:	da2e      	bge.n	80087b6 <_puts_r+0x9e>
 8008758:	4622      	mov	r2, r4
 800875a:	210a      	movs	r1, #10
 800875c:	4628      	mov	r0, r5
 800875e:	f000 f83f 	bl	80087e0 <__swbuf_r>
 8008762:	3001      	adds	r0, #1
 8008764:	d011      	beq.n	800878a <_puts_r+0x72>
 8008766:	200a      	movs	r0, #10
 8008768:	e011      	b.n	800878e <_puts_r+0x76>
 800876a:	4b17      	ldr	r3, [pc, #92]	; (80087c8 <_puts_r+0xb0>)
 800876c:	429c      	cmp	r4, r3
 800876e:	d101      	bne.n	8008774 <_puts_r+0x5c>
 8008770:	68ac      	ldr	r4, [r5, #8]
 8008772:	e7e3      	b.n	800873c <_puts_r+0x24>
 8008774:	4b15      	ldr	r3, [pc, #84]	; (80087cc <_puts_r+0xb4>)
 8008776:	429c      	cmp	r4, r3
 8008778:	bf08      	it	eq
 800877a:	68ec      	ldreq	r4, [r5, #12]
 800877c:	e7de      	b.n	800873c <_puts_r+0x24>
 800877e:	4621      	mov	r1, r4
 8008780:	4628      	mov	r0, r5
 8008782:	f000 f87f 	bl	8008884 <__swsetup_r>
 8008786:	2800      	cmp	r0, #0
 8008788:	d0dd      	beq.n	8008746 <_puts_r+0x2e>
 800878a:	f04f 30ff 	mov.w	r0, #4294967295
 800878e:	bd70      	pop	{r4, r5, r6, pc}
 8008790:	2b00      	cmp	r3, #0
 8008792:	da04      	bge.n	800879e <_puts_r+0x86>
 8008794:	69a2      	ldr	r2, [r4, #24]
 8008796:	429a      	cmp	r2, r3
 8008798:	dc06      	bgt.n	80087a8 <_puts_r+0x90>
 800879a:	290a      	cmp	r1, #10
 800879c:	d004      	beq.n	80087a8 <_puts_r+0x90>
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	1c5a      	adds	r2, r3, #1
 80087a2:	6022      	str	r2, [r4, #0]
 80087a4:	7019      	strb	r1, [r3, #0]
 80087a6:	e7cf      	b.n	8008748 <_puts_r+0x30>
 80087a8:	4622      	mov	r2, r4
 80087aa:	4628      	mov	r0, r5
 80087ac:	f000 f818 	bl	80087e0 <__swbuf_r>
 80087b0:	3001      	adds	r0, #1
 80087b2:	d1c9      	bne.n	8008748 <_puts_r+0x30>
 80087b4:	e7e9      	b.n	800878a <_puts_r+0x72>
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	200a      	movs	r0, #10
 80087ba:	1c5a      	adds	r2, r3, #1
 80087bc:	6022      	str	r2, [r4, #0]
 80087be:	7018      	strb	r0, [r3, #0]
 80087c0:	e7e5      	b.n	800878e <_puts_r+0x76>
 80087c2:	bf00      	nop
 80087c4:	08009140 	.word	0x08009140
 80087c8:	08009160 	.word	0x08009160
 80087cc:	08009120 	.word	0x08009120

080087d0 <puts>:
 80087d0:	4b02      	ldr	r3, [pc, #8]	; (80087dc <puts+0xc>)
 80087d2:	4601      	mov	r1, r0
 80087d4:	6818      	ldr	r0, [r3, #0]
 80087d6:	f7ff bf9f 	b.w	8008718 <_puts_r>
 80087da:	bf00      	nop
 80087dc:	200001d4 	.word	0x200001d4

080087e0 <__swbuf_r>:
 80087e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e2:	460e      	mov	r6, r1
 80087e4:	4614      	mov	r4, r2
 80087e6:	4605      	mov	r5, r0
 80087e8:	b118      	cbz	r0, 80087f2 <__swbuf_r+0x12>
 80087ea:	6983      	ldr	r3, [r0, #24]
 80087ec:	b90b      	cbnz	r3, 80087f2 <__swbuf_r+0x12>
 80087ee:	f000 f9a7 	bl	8008b40 <__sinit>
 80087f2:	4b21      	ldr	r3, [pc, #132]	; (8008878 <__swbuf_r+0x98>)
 80087f4:	429c      	cmp	r4, r3
 80087f6:	d12a      	bne.n	800884e <__swbuf_r+0x6e>
 80087f8:	686c      	ldr	r4, [r5, #4]
 80087fa:	69a3      	ldr	r3, [r4, #24]
 80087fc:	60a3      	str	r3, [r4, #8]
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	071a      	lsls	r2, r3, #28
 8008802:	d52e      	bpl.n	8008862 <__swbuf_r+0x82>
 8008804:	6923      	ldr	r3, [r4, #16]
 8008806:	b363      	cbz	r3, 8008862 <__swbuf_r+0x82>
 8008808:	6923      	ldr	r3, [r4, #16]
 800880a:	6820      	ldr	r0, [r4, #0]
 800880c:	1ac0      	subs	r0, r0, r3
 800880e:	6963      	ldr	r3, [r4, #20]
 8008810:	b2f6      	uxtb	r6, r6
 8008812:	4283      	cmp	r3, r0
 8008814:	4637      	mov	r7, r6
 8008816:	dc04      	bgt.n	8008822 <__swbuf_r+0x42>
 8008818:	4621      	mov	r1, r4
 800881a:	4628      	mov	r0, r5
 800881c:	f000 f926 	bl	8008a6c <_fflush_r>
 8008820:	bb28      	cbnz	r0, 800886e <__swbuf_r+0x8e>
 8008822:	68a3      	ldr	r3, [r4, #8]
 8008824:	3b01      	subs	r3, #1
 8008826:	60a3      	str	r3, [r4, #8]
 8008828:	6823      	ldr	r3, [r4, #0]
 800882a:	1c5a      	adds	r2, r3, #1
 800882c:	6022      	str	r2, [r4, #0]
 800882e:	701e      	strb	r6, [r3, #0]
 8008830:	6963      	ldr	r3, [r4, #20]
 8008832:	3001      	adds	r0, #1
 8008834:	4283      	cmp	r3, r0
 8008836:	d004      	beq.n	8008842 <__swbuf_r+0x62>
 8008838:	89a3      	ldrh	r3, [r4, #12]
 800883a:	07db      	lsls	r3, r3, #31
 800883c:	d519      	bpl.n	8008872 <__swbuf_r+0x92>
 800883e:	2e0a      	cmp	r6, #10
 8008840:	d117      	bne.n	8008872 <__swbuf_r+0x92>
 8008842:	4621      	mov	r1, r4
 8008844:	4628      	mov	r0, r5
 8008846:	f000 f911 	bl	8008a6c <_fflush_r>
 800884a:	b190      	cbz	r0, 8008872 <__swbuf_r+0x92>
 800884c:	e00f      	b.n	800886e <__swbuf_r+0x8e>
 800884e:	4b0b      	ldr	r3, [pc, #44]	; (800887c <__swbuf_r+0x9c>)
 8008850:	429c      	cmp	r4, r3
 8008852:	d101      	bne.n	8008858 <__swbuf_r+0x78>
 8008854:	68ac      	ldr	r4, [r5, #8]
 8008856:	e7d0      	b.n	80087fa <__swbuf_r+0x1a>
 8008858:	4b09      	ldr	r3, [pc, #36]	; (8008880 <__swbuf_r+0xa0>)
 800885a:	429c      	cmp	r4, r3
 800885c:	bf08      	it	eq
 800885e:	68ec      	ldreq	r4, [r5, #12]
 8008860:	e7cb      	b.n	80087fa <__swbuf_r+0x1a>
 8008862:	4621      	mov	r1, r4
 8008864:	4628      	mov	r0, r5
 8008866:	f000 f80d 	bl	8008884 <__swsetup_r>
 800886a:	2800      	cmp	r0, #0
 800886c:	d0cc      	beq.n	8008808 <__swbuf_r+0x28>
 800886e:	f04f 37ff 	mov.w	r7, #4294967295
 8008872:	4638      	mov	r0, r7
 8008874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008876:	bf00      	nop
 8008878:	08009140 	.word	0x08009140
 800887c:	08009160 	.word	0x08009160
 8008880:	08009120 	.word	0x08009120

08008884 <__swsetup_r>:
 8008884:	4b32      	ldr	r3, [pc, #200]	; (8008950 <__swsetup_r+0xcc>)
 8008886:	b570      	push	{r4, r5, r6, lr}
 8008888:	681d      	ldr	r5, [r3, #0]
 800888a:	4606      	mov	r6, r0
 800888c:	460c      	mov	r4, r1
 800888e:	b125      	cbz	r5, 800889a <__swsetup_r+0x16>
 8008890:	69ab      	ldr	r3, [r5, #24]
 8008892:	b913      	cbnz	r3, 800889a <__swsetup_r+0x16>
 8008894:	4628      	mov	r0, r5
 8008896:	f000 f953 	bl	8008b40 <__sinit>
 800889a:	4b2e      	ldr	r3, [pc, #184]	; (8008954 <__swsetup_r+0xd0>)
 800889c:	429c      	cmp	r4, r3
 800889e:	d10f      	bne.n	80088c0 <__swsetup_r+0x3c>
 80088a0:	686c      	ldr	r4, [r5, #4]
 80088a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	0715      	lsls	r5, r2, #28
 80088aa:	d42c      	bmi.n	8008906 <__swsetup_r+0x82>
 80088ac:	06d0      	lsls	r0, r2, #27
 80088ae:	d411      	bmi.n	80088d4 <__swsetup_r+0x50>
 80088b0:	2209      	movs	r2, #9
 80088b2:	6032      	str	r2, [r6, #0]
 80088b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088b8:	81a3      	strh	r3, [r4, #12]
 80088ba:	f04f 30ff 	mov.w	r0, #4294967295
 80088be:	e03e      	b.n	800893e <__swsetup_r+0xba>
 80088c0:	4b25      	ldr	r3, [pc, #148]	; (8008958 <__swsetup_r+0xd4>)
 80088c2:	429c      	cmp	r4, r3
 80088c4:	d101      	bne.n	80088ca <__swsetup_r+0x46>
 80088c6:	68ac      	ldr	r4, [r5, #8]
 80088c8:	e7eb      	b.n	80088a2 <__swsetup_r+0x1e>
 80088ca:	4b24      	ldr	r3, [pc, #144]	; (800895c <__swsetup_r+0xd8>)
 80088cc:	429c      	cmp	r4, r3
 80088ce:	bf08      	it	eq
 80088d0:	68ec      	ldreq	r4, [r5, #12]
 80088d2:	e7e6      	b.n	80088a2 <__swsetup_r+0x1e>
 80088d4:	0751      	lsls	r1, r2, #29
 80088d6:	d512      	bpl.n	80088fe <__swsetup_r+0x7a>
 80088d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088da:	b141      	cbz	r1, 80088ee <__swsetup_r+0x6a>
 80088dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088e0:	4299      	cmp	r1, r3
 80088e2:	d002      	beq.n	80088ea <__swsetup_r+0x66>
 80088e4:	4630      	mov	r0, r6
 80088e6:	f000 fa19 	bl	8008d1c <_free_r>
 80088ea:	2300      	movs	r3, #0
 80088ec:	6363      	str	r3, [r4, #52]	; 0x34
 80088ee:	89a3      	ldrh	r3, [r4, #12]
 80088f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088f4:	81a3      	strh	r3, [r4, #12]
 80088f6:	2300      	movs	r3, #0
 80088f8:	6063      	str	r3, [r4, #4]
 80088fa:	6923      	ldr	r3, [r4, #16]
 80088fc:	6023      	str	r3, [r4, #0]
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	f043 0308 	orr.w	r3, r3, #8
 8008904:	81a3      	strh	r3, [r4, #12]
 8008906:	6923      	ldr	r3, [r4, #16]
 8008908:	b94b      	cbnz	r3, 800891e <__swsetup_r+0x9a>
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008914:	d003      	beq.n	800891e <__swsetup_r+0x9a>
 8008916:	4621      	mov	r1, r4
 8008918:	4630      	mov	r0, r6
 800891a:	f000 f9bf 	bl	8008c9c <__smakebuf_r>
 800891e:	89a2      	ldrh	r2, [r4, #12]
 8008920:	f012 0301 	ands.w	r3, r2, #1
 8008924:	d00c      	beq.n	8008940 <__swsetup_r+0xbc>
 8008926:	2300      	movs	r3, #0
 8008928:	60a3      	str	r3, [r4, #8]
 800892a:	6963      	ldr	r3, [r4, #20]
 800892c:	425b      	negs	r3, r3
 800892e:	61a3      	str	r3, [r4, #24]
 8008930:	6923      	ldr	r3, [r4, #16]
 8008932:	b953      	cbnz	r3, 800894a <__swsetup_r+0xc6>
 8008934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008938:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800893c:	d1ba      	bne.n	80088b4 <__swsetup_r+0x30>
 800893e:	bd70      	pop	{r4, r5, r6, pc}
 8008940:	0792      	lsls	r2, r2, #30
 8008942:	bf58      	it	pl
 8008944:	6963      	ldrpl	r3, [r4, #20]
 8008946:	60a3      	str	r3, [r4, #8]
 8008948:	e7f2      	b.n	8008930 <__swsetup_r+0xac>
 800894a:	2000      	movs	r0, #0
 800894c:	e7f7      	b.n	800893e <__swsetup_r+0xba>
 800894e:	bf00      	nop
 8008950:	200001d4 	.word	0x200001d4
 8008954:	08009140 	.word	0x08009140
 8008958:	08009160 	.word	0x08009160
 800895c:	08009120 	.word	0x08009120

08008960 <__sflush_r>:
 8008960:	898a      	ldrh	r2, [r1, #12]
 8008962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008966:	4605      	mov	r5, r0
 8008968:	0710      	lsls	r0, r2, #28
 800896a:	460c      	mov	r4, r1
 800896c:	d458      	bmi.n	8008a20 <__sflush_r+0xc0>
 800896e:	684b      	ldr	r3, [r1, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	dc05      	bgt.n	8008980 <__sflush_r+0x20>
 8008974:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008976:	2b00      	cmp	r3, #0
 8008978:	dc02      	bgt.n	8008980 <__sflush_r+0x20>
 800897a:	2000      	movs	r0, #0
 800897c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008980:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008982:	2e00      	cmp	r6, #0
 8008984:	d0f9      	beq.n	800897a <__sflush_r+0x1a>
 8008986:	2300      	movs	r3, #0
 8008988:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800898c:	682f      	ldr	r7, [r5, #0]
 800898e:	6a21      	ldr	r1, [r4, #32]
 8008990:	602b      	str	r3, [r5, #0]
 8008992:	d032      	beq.n	80089fa <__sflush_r+0x9a>
 8008994:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	075a      	lsls	r2, r3, #29
 800899a:	d505      	bpl.n	80089a8 <__sflush_r+0x48>
 800899c:	6863      	ldr	r3, [r4, #4]
 800899e:	1ac0      	subs	r0, r0, r3
 80089a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089a2:	b10b      	cbz	r3, 80089a8 <__sflush_r+0x48>
 80089a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089a6:	1ac0      	subs	r0, r0, r3
 80089a8:	2300      	movs	r3, #0
 80089aa:	4602      	mov	r2, r0
 80089ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089ae:	6a21      	ldr	r1, [r4, #32]
 80089b0:	4628      	mov	r0, r5
 80089b2:	47b0      	blx	r6
 80089b4:	1c43      	adds	r3, r0, #1
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	d106      	bne.n	80089c8 <__sflush_r+0x68>
 80089ba:	6829      	ldr	r1, [r5, #0]
 80089bc:	291d      	cmp	r1, #29
 80089be:	d848      	bhi.n	8008a52 <__sflush_r+0xf2>
 80089c0:	4a29      	ldr	r2, [pc, #164]	; (8008a68 <__sflush_r+0x108>)
 80089c2:	40ca      	lsrs	r2, r1
 80089c4:	07d6      	lsls	r6, r2, #31
 80089c6:	d544      	bpl.n	8008a52 <__sflush_r+0xf2>
 80089c8:	2200      	movs	r2, #0
 80089ca:	6062      	str	r2, [r4, #4]
 80089cc:	04d9      	lsls	r1, r3, #19
 80089ce:	6922      	ldr	r2, [r4, #16]
 80089d0:	6022      	str	r2, [r4, #0]
 80089d2:	d504      	bpl.n	80089de <__sflush_r+0x7e>
 80089d4:	1c42      	adds	r2, r0, #1
 80089d6:	d101      	bne.n	80089dc <__sflush_r+0x7c>
 80089d8:	682b      	ldr	r3, [r5, #0]
 80089da:	b903      	cbnz	r3, 80089de <__sflush_r+0x7e>
 80089dc:	6560      	str	r0, [r4, #84]	; 0x54
 80089de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089e0:	602f      	str	r7, [r5, #0]
 80089e2:	2900      	cmp	r1, #0
 80089e4:	d0c9      	beq.n	800897a <__sflush_r+0x1a>
 80089e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089ea:	4299      	cmp	r1, r3
 80089ec:	d002      	beq.n	80089f4 <__sflush_r+0x94>
 80089ee:	4628      	mov	r0, r5
 80089f0:	f000 f994 	bl	8008d1c <_free_r>
 80089f4:	2000      	movs	r0, #0
 80089f6:	6360      	str	r0, [r4, #52]	; 0x34
 80089f8:	e7c0      	b.n	800897c <__sflush_r+0x1c>
 80089fa:	2301      	movs	r3, #1
 80089fc:	4628      	mov	r0, r5
 80089fe:	47b0      	blx	r6
 8008a00:	1c41      	adds	r1, r0, #1
 8008a02:	d1c8      	bne.n	8008996 <__sflush_r+0x36>
 8008a04:	682b      	ldr	r3, [r5, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d0c5      	beq.n	8008996 <__sflush_r+0x36>
 8008a0a:	2b1d      	cmp	r3, #29
 8008a0c:	d001      	beq.n	8008a12 <__sflush_r+0xb2>
 8008a0e:	2b16      	cmp	r3, #22
 8008a10:	d101      	bne.n	8008a16 <__sflush_r+0xb6>
 8008a12:	602f      	str	r7, [r5, #0]
 8008a14:	e7b1      	b.n	800897a <__sflush_r+0x1a>
 8008a16:	89a3      	ldrh	r3, [r4, #12]
 8008a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a1c:	81a3      	strh	r3, [r4, #12]
 8008a1e:	e7ad      	b.n	800897c <__sflush_r+0x1c>
 8008a20:	690f      	ldr	r7, [r1, #16]
 8008a22:	2f00      	cmp	r7, #0
 8008a24:	d0a9      	beq.n	800897a <__sflush_r+0x1a>
 8008a26:	0793      	lsls	r3, r2, #30
 8008a28:	680e      	ldr	r6, [r1, #0]
 8008a2a:	bf08      	it	eq
 8008a2c:	694b      	ldreq	r3, [r1, #20]
 8008a2e:	600f      	str	r7, [r1, #0]
 8008a30:	bf18      	it	ne
 8008a32:	2300      	movne	r3, #0
 8008a34:	eba6 0807 	sub.w	r8, r6, r7
 8008a38:	608b      	str	r3, [r1, #8]
 8008a3a:	f1b8 0f00 	cmp.w	r8, #0
 8008a3e:	dd9c      	ble.n	800897a <__sflush_r+0x1a>
 8008a40:	4643      	mov	r3, r8
 8008a42:	463a      	mov	r2, r7
 8008a44:	6a21      	ldr	r1, [r4, #32]
 8008a46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a48:	4628      	mov	r0, r5
 8008a4a:	47b0      	blx	r6
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	dc06      	bgt.n	8008a5e <__sflush_r+0xfe>
 8008a50:	89a3      	ldrh	r3, [r4, #12]
 8008a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a56:	81a3      	strh	r3, [r4, #12]
 8008a58:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5c:	e78e      	b.n	800897c <__sflush_r+0x1c>
 8008a5e:	4407      	add	r7, r0
 8008a60:	eba8 0800 	sub.w	r8, r8, r0
 8008a64:	e7e9      	b.n	8008a3a <__sflush_r+0xda>
 8008a66:	bf00      	nop
 8008a68:	20400001 	.word	0x20400001

08008a6c <_fflush_r>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	690b      	ldr	r3, [r1, #16]
 8008a70:	4605      	mov	r5, r0
 8008a72:	460c      	mov	r4, r1
 8008a74:	b1db      	cbz	r3, 8008aae <_fflush_r+0x42>
 8008a76:	b118      	cbz	r0, 8008a80 <_fflush_r+0x14>
 8008a78:	6983      	ldr	r3, [r0, #24]
 8008a7a:	b90b      	cbnz	r3, 8008a80 <_fflush_r+0x14>
 8008a7c:	f000 f860 	bl	8008b40 <__sinit>
 8008a80:	4b0c      	ldr	r3, [pc, #48]	; (8008ab4 <_fflush_r+0x48>)
 8008a82:	429c      	cmp	r4, r3
 8008a84:	d109      	bne.n	8008a9a <_fflush_r+0x2e>
 8008a86:	686c      	ldr	r4, [r5, #4]
 8008a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a8c:	b17b      	cbz	r3, 8008aae <_fflush_r+0x42>
 8008a8e:	4621      	mov	r1, r4
 8008a90:	4628      	mov	r0, r5
 8008a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a96:	f7ff bf63 	b.w	8008960 <__sflush_r>
 8008a9a:	4b07      	ldr	r3, [pc, #28]	; (8008ab8 <_fflush_r+0x4c>)
 8008a9c:	429c      	cmp	r4, r3
 8008a9e:	d101      	bne.n	8008aa4 <_fflush_r+0x38>
 8008aa0:	68ac      	ldr	r4, [r5, #8]
 8008aa2:	e7f1      	b.n	8008a88 <_fflush_r+0x1c>
 8008aa4:	4b05      	ldr	r3, [pc, #20]	; (8008abc <_fflush_r+0x50>)
 8008aa6:	429c      	cmp	r4, r3
 8008aa8:	bf08      	it	eq
 8008aaa:	68ec      	ldreq	r4, [r5, #12]
 8008aac:	e7ec      	b.n	8008a88 <_fflush_r+0x1c>
 8008aae:	2000      	movs	r0, #0
 8008ab0:	bd38      	pop	{r3, r4, r5, pc}
 8008ab2:	bf00      	nop
 8008ab4:	08009140 	.word	0x08009140
 8008ab8:	08009160 	.word	0x08009160
 8008abc:	08009120 	.word	0x08009120

08008ac0 <std>:
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	b510      	push	{r4, lr}
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	e9c0 3300 	strd	r3, r3, [r0]
 8008aca:	6083      	str	r3, [r0, #8]
 8008acc:	8181      	strh	r1, [r0, #12]
 8008ace:	6643      	str	r3, [r0, #100]	; 0x64
 8008ad0:	81c2      	strh	r2, [r0, #14]
 8008ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ad6:	6183      	str	r3, [r0, #24]
 8008ad8:	4619      	mov	r1, r3
 8008ada:	2208      	movs	r2, #8
 8008adc:	305c      	adds	r0, #92	; 0x5c
 8008ade:	f7ff fe12 	bl	8008706 <memset>
 8008ae2:	4b05      	ldr	r3, [pc, #20]	; (8008af8 <std+0x38>)
 8008ae4:	6263      	str	r3, [r4, #36]	; 0x24
 8008ae6:	4b05      	ldr	r3, [pc, #20]	; (8008afc <std+0x3c>)
 8008ae8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008aea:	4b05      	ldr	r3, [pc, #20]	; (8008b00 <std+0x40>)
 8008aec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008aee:	4b05      	ldr	r3, [pc, #20]	; (8008b04 <std+0x44>)
 8008af0:	6224      	str	r4, [r4, #32]
 8008af2:	6323      	str	r3, [r4, #48]	; 0x30
 8008af4:	bd10      	pop	{r4, pc}
 8008af6:	bf00      	nop
 8008af8:	08008e8d 	.word	0x08008e8d
 8008afc:	08008eaf 	.word	0x08008eaf
 8008b00:	08008ee7 	.word	0x08008ee7
 8008b04:	08008f0b 	.word	0x08008f0b

08008b08 <_cleanup_r>:
 8008b08:	4901      	ldr	r1, [pc, #4]	; (8008b10 <_cleanup_r+0x8>)
 8008b0a:	f000 b885 	b.w	8008c18 <_fwalk_reent>
 8008b0e:	bf00      	nop
 8008b10:	08008a6d 	.word	0x08008a6d

08008b14 <__sfmoreglue>:
 8008b14:	b570      	push	{r4, r5, r6, lr}
 8008b16:	1e4a      	subs	r2, r1, #1
 8008b18:	2568      	movs	r5, #104	; 0x68
 8008b1a:	4355      	muls	r5, r2
 8008b1c:	460e      	mov	r6, r1
 8008b1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b22:	f000 f949 	bl	8008db8 <_malloc_r>
 8008b26:	4604      	mov	r4, r0
 8008b28:	b140      	cbz	r0, 8008b3c <__sfmoreglue+0x28>
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	e9c0 1600 	strd	r1, r6, [r0]
 8008b30:	300c      	adds	r0, #12
 8008b32:	60a0      	str	r0, [r4, #8]
 8008b34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b38:	f7ff fde5 	bl	8008706 <memset>
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	bd70      	pop	{r4, r5, r6, pc}

08008b40 <__sinit>:
 8008b40:	6983      	ldr	r3, [r0, #24]
 8008b42:	b510      	push	{r4, lr}
 8008b44:	4604      	mov	r4, r0
 8008b46:	bb33      	cbnz	r3, 8008b96 <__sinit+0x56>
 8008b48:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008b4c:	6503      	str	r3, [r0, #80]	; 0x50
 8008b4e:	4b12      	ldr	r3, [pc, #72]	; (8008b98 <__sinit+0x58>)
 8008b50:	4a12      	ldr	r2, [pc, #72]	; (8008b9c <__sinit+0x5c>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6282      	str	r2, [r0, #40]	; 0x28
 8008b56:	4298      	cmp	r0, r3
 8008b58:	bf04      	itt	eq
 8008b5a:	2301      	moveq	r3, #1
 8008b5c:	6183      	streq	r3, [r0, #24]
 8008b5e:	f000 f81f 	bl	8008ba0 <__sfp>
 8008b62:	6060      	str	r0, [r4, #4]
 8008b64:	4620      	mov	r0, r4
 8008b66:	f000 f81b 	bl	8008ba0 <__sfp>
 8008b6a:	60a0      	str	r0, [r4, #8]
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f000 f817 	bl	8008ba0 <__sfp>
 8008b72:	2200      	movs	r2, #0
 8008b74:	60e0      	str	r0, [r4, #12]
 8008b76:	2104      	movs	r1, #4
 8008b78:	6860      	ldr	r0, [r4, #4]
 8008b7a:	f7ff ffa1 	bl	8008ac0 <std>
 8008b7e:	2201      	movs	r2, #1
 8008b80:	2109      	movs	r1, #9
 8008b82:	68a0      	ldr	r0, [r4, #8]
 8008b84:	f7ff ff9c 	bl	8008ac0 <std>
 8008b88:	2202      	movs	r2, #2
 8008b8a:	2112      	movs	r1, #18
 8008b8c:	68e0      	ldr	r0, [r4, #12]
 8008b8e:	f7ff ff97 	bl	8008ac0 <std>
 8008b92:	2301      	movs	r3, #1
 8008b94:	61a3      	str	r3, [r4, #24]
 8008b96:	bd10      	pop	{r4, pc}
 8008b98:	0800911c 	.word	0x0800911c
 8008b9c:	08008b09 	.word	0x08008b09

08008ba0 <__sfp>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	4b1b      	ldr	r3, [pc, #108]	; (8008c10 <__sfp+0x70>)
 8008ba4:	681e      	ldr	r6, [r3, #0]
 8008ba6:	69b3      	ldr	r3, [r6, #24]
 8008ba8:	4607      	mov	r7, r0
 8008baa:	b913      	cbnz	r3, 8008bb2 <__sfp+0x12>
 8008bac:	4630      	mov	r0, r6
 8008bae:	f7ff ffc7 	bl	8008b40 <__sinit>
 8008bb2:	3648      	adds	r6, #72	; 0x48
 8008bb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	d503      	bpl.n	8008bc4 <__sfp+0x24>
 8008bbc:	6833      	ldr	r3, [r6, #0]
 8008bbe:	b133      	cbz	r3, 8008bce <__sfp+0x2e>
 8008bc0:	6836      	ldr	r6, [r6, #0]
 8008bc2:	e7f7      	b.n	8008bb4 <__sfp+0x14>
 8008bc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008bc8:	b16d      	cbz	r5, 8008be6 <__sfp+0x46>
 8008bca:	3468      	adds	r4, #104	; 0x68
 8008bcc:	e7f4      	b.n	8008bb8 <__sfp+0x18>
 8008bce:	2104      	movs	r1, #4
 8008bd0:	4638      	mov	r0, r7
 8008bd2:	f7ff ff9f 	bl	8008b14 <__sfmoreglue>
 8008bd6:	6030      	str	r0, [r6, #0]
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	d1f1      	bne.n	8008bc0 <__sfp+0x20>
 8008bdc:	230c      	movs	r3, #12
 8008bde:	603b      	str	r3, [r7, #0]
 8008be0:	4604      	mov	r4, r0
 8008be2:	4620      	mov	r0, r4
 8008be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008be6:	4b0b      	ldr	r3, [pc, #44]	; (8008c14 <__sfp+0x74>)
 8008be8:	6665      	str	r5, [r4, #100]	; 0x64
 8008bea:	e9c4 5500 	strd	r5, r5, [r4]
 8008bee:	60a5      	str	r5, [r4, #8]
 8008bf0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008bf4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008bf8:	2208      	movs	r2, #8
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c00:	f7ff fd81 	bl	8008706 <memset>
 8008c04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c0c:	e7e9      	b.n	8008be2 <__sfp+0x42>
 8008c0e:	bf00      	nop
 8008c10:	0800911c 	.word	0x0800911c
 8008c14:	ffff0001 	.word	0xffff0001

08008c18 <_fwalk_reent>:
 8008c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c1c:	4680      	mov	r8, r0
 8008c1e:	4689      	mov	r9, r1
 8008c20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c24:	2600      	movs	r6, #0
 8008c26:	b914      	cbnz	r4, 8008c2e <_fwalk_reent+0x16>
 8008c28:	4630      	mov	r0, r6
 8008c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c2e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008c32:	3f01      	subs	r7, #1
 8008c34:	d501      	bpl.n	8008c3a <_fwalk_reent+0x22>
 8008c36:	6824      	ldr	r4, [r4, #0]
 8008c38:	e7f5      	b.n	8008c26 <_fwalk_reent+0xe>
 8008c3a:	89ab      	ldrh	r3, [r5, #12]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d907      	bls.n	8008c50 <_fwalk_reent+0x38>
 8008c40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c44:	3301      	adds	r3, #1
 8008c46:	d003      	beq.n	8008c50 <_fwalk_reent+0x38>
 8008c48:	4629      	mov	r1, r5
 8008c4a:	4640      	mov	r0, r8
 8008c4c:	47c8      	blx	r9
 8008c4e:	4306      	orrs	r6, r0
 8008c50:	3568      	adds	r5, #104	; 0x68
 8008c52:	e7ee      	b.n	8008c32 <_fwalk_reent+0x1a>

08008c54 <__swhatbuf_r>:
 8008c54:	b570      	push	{r4, r5, r6, lr}
 8008c56:	460e      	mov	r6, r1
 8008c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c5c:	2900      	cmp	r1, #0
 8008c5e:	b096      	sub	sp, #88	; 0x58
 8008c60:	4614      	mov	r4, r2
 8008c62:	461d      	mov	r5, r3
 8008c64:	da07      	bge.n	8008c76 <__swhatbuf_r+0x22>
 8008c66:	2300      	movs	r3, #0
 8008c68:	602b      	str	r3, [r5, #0]
 8008c6a:	89b3      	ldrh	r3, [r6, #12]
 8008c6c:	061a      	lsls	r2, r3, #24
 8008c6e:	d410      	bmi.n	8008c92 <__swhatbuf_r+0x3e>
 8008c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c74:	e00e      	b.n	8008c94 <__swhatbuf_r+0x40>
 8008c76:	466a      	mov	r2, sp
 8008c78:	f000 f96e 	bl	8008f58 <_fstat_r>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	dbf2      	blt.n	8008c66 <__swhatbuf_r+0x12>
 8008c80:	9a01      	ldr	r2, [sp, #4]
 8008c82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c8a:	425a      	negs	r2, r3
 8008c8c:	415a      	adcs	r2, r3
 8008c8e:	602a      	str	r2, [r5, #0]
 8008c90:	e7ee      	b.n	8008c70 <__swhatbuf_r+0x1c>
 8008c92:	2340      	movs	r3, #64	; 0x40
 8008c94:	2000      	movs	r0, #0
 8008c96:	6023      	str	r3, [r4, #0]
 8008c98:	b016      	add	sp, #88	; 0x58
 8008c9a:	bd70      	pop	{r4, r5, r6, pc}

08008c9c <__smakebuf_r>:
 8008c9c:	898b      	ldrh	r3, [r1, #12]
 8008c9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ca0:	079d      	lsls	r5, r3, #30
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	d507      	bpl.n	8008cb8 <__smakebuf_r+0x1c>
 8008ca8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cac:	6023      	str	r3, [r4, #0]
 8008cae:	6123      	str	r3, [r4, #16]
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	6163      	str	r3, [r4, #20]
 8008cb4:	b002      	add	sp, #8
 8008cb6:	bd70      	pop	{r4, r5, r6, pc}
 8008cb8:	ab01      	add	r3, sp, #4
 8008cba:	466a      	mov	r2, sp
 8008cbc:	f7ff ffca 	bl	8008c54 <__swhatbuf_r>
 8008cc0:	9900      	ldr	r1, [sp, #0]
 8008cc2:	4605      	mov	r5, r0
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	f000 f877 	bl	8008db8 <_malloc_r>
 8008cca:	b948      	cbnz	r0, 8008ce0 <__smakebuf_r+0x44>
 8008ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cd0:	059a      	lsls	r2, r3, #22
 8008cd2:	d4ef      	bmi.n	8008cb4 <__smakebuf_r+0x18>
 8008cd4:	f023 0303 	bic.w	r3, r3, #3
 8008cd8:	f043 0302 	orr.w	r3, r3, #2
 8008cdc:	81a3      	strh	r3, [r4, #12]
 8008cde:	e7e3      	b.n	8008ca8 <__smakebuf_r+0xc>
 8008ce0:	4b0d      	ldr	r3, [pc, #52]	; (8008d18 <__smakebuf_r+0x7c>)
 8008ce2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	6020      	str	r0, [r4, #0]
 8008ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cec:	81a3      	strh	r3, [r4, #12]
 8008cee:	9b00      	ldr	r3, [sp, #0]
 8008cf0:	6163      	str	r3, [r4, #20]
 8008cf2:	9b01      	ldr	r3, [sp, #4]
 8008cf4:	6120      	str	r0, [r4, #16]
 8008cf6:	b15b      	cbz	r3, 8008d10 <__smakebuf_r+0x74>
 8008cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f000 f93d 	bl	8008f7c <_isatty_r>
 8008d02:	b128      	cbz	r0, 8008d10 <__smakebuf_r+0x74>
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	f023 0303 	bic.w	r3, r3, #3
 8008d0a:	f043 0301 	orr.w	r3, r3, #1
 8008d0e:	81a3      	strh	r3, [r4, #12]
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	431d      	orrs	r5, r3
 8008d14:	81a5      	strh	r5, [r4, #12]
 8008d16:	e7cd      	b.n	8008cb4 <__smakebuf_r+0x18>
 8008d18:	08008b09 	.word	0x08008b09

08008d1c <_free_r>:
 8008d1c:	b538      	push	{r3, r4, r5, lr}
 8008d1e:	4605      	mov	r5, r0
 8008d20:	2900      	cmp	r1, #0
 8008d22:	d045      	beq.n	8008db0 <_free_r+0x94>
 8008d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d28:	1f0c      	subs	r4, r1, #4
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	bfb8      	it	lt
 8008d2e:	18e4      	addlt	r4, r4, r3
 8008d30:	f000 f946 	bl	8008fc0 <__malloc_lock>
 8008d34:	4a1f      	ldr	r2, [pc, #124]	; (8008db4 <_free_r+0x98>)
 8008d36:	6813      	ldr	r3, [r2, #0]
 8008d38:	4610      	mov	r0, r2
 8008d3a:	b933      	cbnz	r3, 8008d4a <_free_r+0x2e>
 8008d3c:	6063      	str	r3, [r4, #4]
 8008d3e:	6014      	str	r4, [r2, #0]
 8008d40:	4628      	mov	r0, r5
 8008d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d46:	f000 b93c 	b.w	8008fc2 <__malloc_unlock>
 8008d4a:	42a3      	cmp	r3, r4
 8008d4c:	d90c      	bls.n	8008d68 <_free_r+0x4c>
 8008d4e:	6821      	ldr	r1, [r4, #0]
 8008d50:	1862      	adds	r2, r4, r1
 8008d52:	4293      	cmp	r3, r2
 8008d54:	bf04      	itt	eq
 8008d56:	681a      	ldreq	r2, [r3, #0]
 8008d58:	685b      	ldreq	r3, [r3, #4]
 8008d5a:	6063      	str	r3, [r4, #4]
 8008d5c:	bf04      	itt	eq
 8008d5e:	1852      	addeq	r2, r2, r1
 8008d60:	6022      	streq	r2, [r4, #0]
 8008d62:	6004      	str	r4, [r0, #0]
 8008d64:	e7ec      	b.n	8008d40 <_free_r+0x24>
 8008d66:	4613      	mov	r3, r2
 8008d68:	685a      	ldr	r2, [r3, #4]
 8008d6a:	b10a      	cbz	r2, 8008d70 <_free_r+0x54>
 8008d6c:	42a2      	cmp	r2, r4
 8008d6e:	d9fa      	bls.n	8008d66 <_free_r+0x4a>
 8008d70:	6819      	ldr	r1, [r3, #0]
 8008d72:	1858      	adds	r0, r3, r1
 8008d74:	42a0      	cmp	r0, r4
 8008d76:	d10b      	bne.n	8008d90 <_free_r+0x74>
 8008d78:	6820      	ldr	r0, [r4, #0]
 8008d7a:	4401      	add	r1, r0
 8008d7c:	1858      	adds	r0, r3, r1
 8008d7e:	4282      	cmp	r2, r0
 8008d80:	6019      	str	r1, [r3, #0]
 8008d82:	d1dd      	bne.n	8008d40 <_free_r+0x24>
 8008d84:	6810      	ldr	r0, [r2, #0]
 8008d86:	6852      	ldr	r2, [r2, #4]
 8008d88:	605a      	str	r2, [r3, #4]
 8008d8a:	4401      	add	r1, r0
 8008d8c:	6019      	str	r1, [r3, #0]
 8008d8e:	e7d7      	b.n	8008d40 <_free_r+0x24>
 8008d90:	d902      	bls.n	8008d98 <_free_r+0x7c>
 8008d92:	230c      	movs	r3, #12
 8008d94:	602b      	str	r3, [r5, #0]
 8008d96:	e7d3      	b.n	8008d40 <_free_r+0x24>
 8008d98:	6820      	ldr	r0, [r4, #0]
 8008d9a:	1821      	adds	r1, r4, r0
 8008d9c:	428a      	cmp	r2, r1
 8008d9e:	bf04      	itt	eq
 8008da0:	6811      	ldreq	r1, [r2, #0]
 8008da2:	6852      	ldreq	r2, [r2, #4]
 8008da4:	6062      	str	r2, [r4, #4]
 8008da6:	bf04      	itt	eq
 8008da8:	1809      	addeq	r1, r1, r0
 8008daa:	6021      	streq	r1, [r4, #0]
 8008dac:	605c      	str	r4, [r3, #4]
 8008dae:	e7c7      	b.n	8008d40 <_free_r+0x24>
 8008db0:	bd38      	pop	{r3, r4, r5, pc}
 8008db2:	bf00      	nop
 8008db4:	20004ba8 	.word	0x20004ba8

08008db8 <_malloc_r>:
 8008db8:	b570      	push	{r4, r5, r6, lr}
 8008dba:	1ccd      	adds	r5, r1, #3
 8008dbc:	f025 0503 	bic.w	r5, r5, #3
 8008dc0:	3508      	adds	r5, #8
 8008dc2:	2d0c      	cmp	r5, #12
 8008dc4:	bf38      	it	cc
 8008dc6:	250c      	movcc	r5, #12
 8008dc8:	2d00      	cmp	r5, #0
 8008dca:	4606      	mov	r6, r0
 8008dcc:	db01      	blt.n	8008dd2 <_malloc_r+0x1a>
 8008dce:	42a9      	cmp	r1, r5
 8008dd0:	d903      	bls.n	8008dda <_malloc_r+0x22>
 8008dd2:	230c      	movs	r3, #12
 8008dd4:	6033      	str	r3, [r6, #0]
 8008dd6:	2000      	movs	r0, #0
 8008dd8:	bd70      	pop	{r4, r5, r6, pc}
 8008dda:	f000 f8f1 	bl	8008fc0 <__malloc_lock>
 8008dde:	4a21      	ldr	r2, [pc, #132]	; (8008e64 <_malloc_r+0xac>)
 8008de0:	6814      	ldr	r4, [r2, #0]
 8008de2:	4621      	mov	r1, r4
 8008de4:	b991      	cbnz	r1, 8008e0c <_malloc_r+0x54>
 8008de6:	4c20      	ldr	r4, [pc, #128]	; (8008e68 <_malloc_r+0xb0>)
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	b91b      	cbnz	r3, 8008df4 <_malloc_r+0x3c>
 8008dec:	4630      	mov	r0, r6
 8008dee:	f000 f83d 	bl	8008e6c <_sbrk_r>
 8008df2:	6020      	str	r0, [r4, #0]
 8008df4:	4629      	mov	r1, r5
 8008df6:	4630      	mov	r0, r6
 8008df8:	f000 f838 	bl	8008e6c <_sbrk_r>
 8008dfc:	1c43      	adds	r3, r0, #1
 8008dfe:	d124      	bne.n	8008e4a <_malloc_r+0x92>
 8008e00:	230c      	movs	r3, #12
 8008e02:	6033      	str	r3, [r6, #0]
 8008e04:	4630      	mov	r0, r6
 8008e06:	f000 f8dc 	bl	8008fc2 <__malloc_unlock>
 8008e0a:	e7e4      	b.n	8008dd6 <_malloc_r+0x1e>
 8008e0c:	680b      	ldr	r3, [r1, #0]
 8008e0e:	1b5b      	subs	r3, r3, r5
 8008e10:	d418      	bmi.n	8008e44 <_malloc_r+0x8c>
 8008e12:	2b0b      	cmp	r3, #11
 8008e14:	d90f      	bls.n	8008e36 <_malloc_r+0x7e>
 8008e16:	600b      	str	r3, [r1, #0]
 8008e18:	50cd      	str	r5, [r1, r3]
 8008e1a:	18cc      	adds	r4, r1, r3
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	f000 f8d0 	bl	8008fc2 <__malloc_unlock>
 8008e22:	f104 000b 	add.w	r0, r4, #11
 8008e26:	1d23      	adds	r3, r4, #4
 8008e28:	f020 0007 	bic.w	r0, r0, #7
 8008e2c:	1ac3      	subs	r3, r0, r3
 8008e2e:	d0d3      	beq.n	8008dd8 <_malloc_r+0x20>
 8008e30:	425a      	negs	r2, r3
 8008e32:	50e2      	str	r2, [r4, r3]
 8008e34:	e7d0      	b.n	8008dd8 <_malloc_r+0x20>
 8008e36:	428c      	cmp	r4, r1
 8008e38:	684b      	ldr	r3, [r1, #4]
 8008e3a:	bf16      	itet	ne
 8008e3c:	6063      	strne	r3, [r4, #4]
 8008e3e:	6013      	streq	r3, [r2, #0]
 8008e40:	460c      	movne	r4, r1
 8008e42:	e7eb      	b.n	8008e1c <_malloc_r+0x64>
 8008e44:	460c      	mov	r4, r1
 8008e46:	6849      	ldr	r1, [r1, #4]
 8008e48:	e7cc      	b.n	8008de4 <_malloc_r+0x2c>
 8008e4a:	1cc4      	adds	r4, r0, #3
 8008e4c:	f024 0403 	bic.w	r4, r4, #3
 8008e50:	42a0      	cmp	r0, r4
 8008e52:	d005      	beq.n	8008e60 <_malloc_r+0xa8>
 8008e54:	1a21      	subs	r1, r4, r0
 8008e56:	4630      	mov	r0, r6
 8008e58:	f000 f808 	bl	8008e6c <_sbrk_r>
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	d0cf      	beq.n	8008e00 <_malloc_r+0x48>
 8008e60:	6025      	str	r5, [r4, #0]
 8008e62:	e7db      	b.n	8008e1c <_malloc_r+0x64>
 8008e64:	20004ba8 	.word	0x20004ba8
 8008e68:	20004bac 	.word	0x20004bac

08008e6c <_sbrk_r>:
 8008e6c:	b538      	push	{r3, r4, r5, lr}
 8008e6e:	4c06      	ldr	r4, [pc, #24]	; (8008e88 <_sbrk_r+0x1c>)
 8008e70:	2300      	movs	r3, #0
 8008e72:	4605      	mov	r5, r0
 8008e74:	4608      	mov	r0, r1
 8008e76:	6023      	str	r3, [r4, #0]
 8008e78:	f7f8 f894 	bl	8000fa4 <_sbrk>
 8008e7c:	1c43      	adds	r3, r0, #1
 8008e7e:	d102      	bne.n	8008e86 <_sbrk_r+0x1a>
 8008e80:	6823      	ldr	r3, [r4, #0]
 8008e82:	b103      	cbz	r3, 8008e86 <_sbrk_r+0x1a>
 8008e84:	602b      	str	r3, [r5, #0]
 8008e86:	bd38      	pop	{r3, r4, r5, pc}
 8008e88:	20004c54 	.word	0x20004c54

08008e8c <__sread>:
 8008e8c:	b510      	push	{r4, lr}
 8008e8e:	460c      	mov	r4, r1
 8008e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e94:	f000 f896 	bl	8008fc4 <_read_r>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	bfab      	itete	ge
 8008e9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8008ea0:	181b      	addge	r3, r3, r0
 8008ea2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ea6:	bfac      	ite	ge
 8008ea8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008eaa:	81a3      	strhlt	r3, [r4, #12]
 8008eac:	bd10      	pop	{r4, pc}

08008eae <__swrite>:
 8008eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb2:	461f      	mov	r7, r3
 8008eb4:	898b      	ldrh	r3, [r1, #12]
 8008eb6:	05db      	lsls	r3, r3, #23
 8008eb8:	4605      	mov	r5, r0
 8008eba:	460c      	mov	r4, r1
 8008ebc:	4616      	mov	r6, r2
 8008ebe:	d505      	bpl.n	8008ecc <__swrite+0x1e>
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec8:	f000 f868 	bl	8008f9c <_lseek_r>
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ed6:	81a3      	strh	r3, [r4, #12]
 8008ed8:	4632      	mov	r2, r6
 8008eda:	463b      	mov	r3, r7
 8008edc:	4628      	mov	r0, r5
 8008ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee2:	f000 b817 	b.w	8008f14 <_write_r>

08008ee6 <__sseek>:
 8008ee6:	b510      	push	{r4, lr}
 8008ee8:	460c      	mov	r4, r1
 8008eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eee:	f000 f855 	bl	8008f9c <_lseek_r>
 8008ef2:	1c43      	adds	r3, r0, #1
 8008ef4:	89a3      	ldrh	r3, [r4, #12]
 8008ef6:	bf15      	itete	ne
 8008ef8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f02:	81a3      	strheq	r3, [r4, #12]
 8008f04:	bf18      	it	ne
 8008f06:	81a3      	strhne	r3, [r4, #12]
 8008f08:	bd10      	pop	{r4, pc}

08008f0a <__sclose>:
 8008f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f0e:	f000 b813 	b.w	8008f38 <_close_r>
	...

08008f14 <_write_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	4c07      	ldr	r4, [pc, #28]	; (8008f34 <_write_r+0x20>)
 8008f18:	4605      	mov	r5, r0
 8008f1a:	4608      	mov	r0, r1
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	2200      	movs	r2, #0
 8008f20:	6022      	str	r2, [r4, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	f7fb fd56 	bl	80049d4 <_write>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_write_r+0x1e>
 8008f2c:	6823      	ldr	r3, [r4, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_write_r+0x1e>
 8008f30:	602b      	str	r3, [r5, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	20004c54 	.word	0x20004c54

08008f38 <_close_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	4c06      	ldr	r4, [pc, #24]	; (8008f54 <_close_r+0x1c>)
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	4605      	mov	r5, r0
 8008f40:	4608      	mov	r0, r1
 8008f42:	6023      	str	r3, [r4, #0]
 8008f44:	f7f7 fff9 	bl	8000f3a <_close>
 8008f48:	1c43      	adds	r3, r0, #1
 8008f4a:	d102      	bne.n	8008f52 <_close_r+0x1a>
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	b103      	cbz	r3, 8008f52 <_close_r+0x1a>
 8008f50:	602b      	str	r3, [r5, #0]
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
 8008f54:	20004c54 	.word	0x20004c54

08008f58 <_fstat_r>:
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	4c07      	ldr	r4, [pc, #28]	; (8008f78 <_fstat_r+0x20>)
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	4605      	mov	r5, r0
 8008f60:	4608      	mov	r0, r1
 8008f62:	4611      	mov	r1, r2
 8008f64:	6023      	str	r3, [r4, #0]
 8008f66:	f7f7 fff4 	bl	8000f52 <_fstat>
 8008f6a:	1c43      	adds	r3, r0, #1
 8008f6c:	d102      	bne.n	8008f74 <_fstat_r+0x1c>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	b103      	cbz	r3, 8008f74 <_fstat_r+0x1c>
 8008f72:	602b      	str	r3, [r5, #0]
 8008f74:	bd38      	pop	{r3, r4, r5, pc}
 8008f76:	bf00      	nop
 8008f78:	20004c54 	.word	0x20004c54

08008f7c <_isatty_r>:
 8008f7c:	b538      	push	{r3, r4, r5, lr}
 8008f7e:	4c06      	ldr	r4, [pc, #24]	; (8008f98 <_isatty_r+0x1c>)
 8008f80:	2300      	movs	r3, #0
 8008f82:	4605      	mov	r5, r0
 8008f84:	4608      	mov	r0, r1
 8008f86:	6023      	str	r3, [r4, #0]
 8008f88:	f7f7 fff3 	bl	8000f72 <_isatty>
 8008f8c:	1c43      	adds	r3, r0, #1
 8008f8e:	d102      	bne.n	8008f96 <_isatty_r+0x1a>
 8008f90:	6823      	ldr	r3, [r4, #0]
 8008f92:	b103      	cbz	r3, 8008f96 <_isatty_r+0x1a>
 8008f94:	602b      	str	r3, [r5, #0]
 8008f96:	bd38      	pop	{r3, r4, r5, pc}
 8008f98:	20004c54 	.word	0x20004c54

08008f9c <_lseek_r>:
 8008f9c:	b538      	push	{r3, r4, r5, lr}
 8008f9e:	4c07      	ldr	r4, [pc, #28]	; (8008fbc <_lseek_r+0x20>)
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	4608      	mov	r0, r1
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	6022      	str	r2, [r4, #0]
 8008faa:	461a      	mov	r2, r3
 8008fac:	f7f7 ffec 	bl	8000f88 <_lseek>
 8008fb0:	1c43      	adds	r3, r0, #1
 8008fb2:	d102      	bne.n	8008fba <_lseek_r+0x1e>
 8008fb4:	6823      	ldr	r3, [r4, #0]
 8008fb6:	b103      	cbz	r3, 8008fba <_lseek_r+0x1e>
 8008fb8:	602b      	str	r3, [r5, #0]
 8008fba:	bd38      	pop	{r3, r4, r5, pc}
 8008fbc:	20004c54 	.word	0x20004c54

08008fc0 <__malloc_lock>:
 8008fc0:	4770      	bx	lr

08008fc2 <__malloc_unlock>:
 8008fc2:	4770      	bx	lr

08008fc4 <_read_r>:
 8008fc4:	b538      	push	{r3, r4, r5, lr}
 8008fc6:	4c07      	ldr	r4, [pc, #28]	; (8008fe4 <_read_r+0x20>)
 8008fc8:	4605      	mov	r5, r0
 8008fca:	4608      	mov	r0, r1
 8008fcc:	4611      	mov	r1, r2
 8008fce:	2200      	movs	r2, #0
 8008fd0:	6022      	str	r2, [r4, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	f7f7 ff94 	bl	8000f00 <_read>
 8008fd8:	1c43      	adds	r3, r0, #1
 8008fda:	d102      	bne.n	8008fe2 <_read_r+0x1e>
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	b103      	cbz	r3, 8008fe2 <_read_r+0x1e>
 8008fe0:	602b      	str	r3, [r5, #0]
 8008fe2:	bd38      	pop	{r3, r4, r5, pc}
 8008fe4:	20004c54 	.word	0x20004c54

08008fe8 <_init>:
 8008fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fea:	bf00      	nop
 8008fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fee:	bc08      	pop	{r3}
 8008ff0:	469e      	mov	lr, r3
 8008ff2:	4770      	bx	lr

08008ff4 <_fini>:
 8008ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff6:	bf00      	nop
 8008ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ffa:	bc08      	pop	{r3}
 8008ffc:	469e      	mov	lr, r3
 8008ffe:	4770      	bx	lr
